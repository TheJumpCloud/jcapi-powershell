version: 2.1
orbs:
  win: circleci/windows@2.2.0
parameters:
  workflow:
    description: The name of the workflow to run. Must match the workflow name exactly.
    type: enum
    enum:
      - "ci"
      - "trigger-ci-nightly"
      - "ci-nightly"
    default: "ci"
  triggered_by_scheduled_job:
    description: Whether or not this CI build was triggered by a scheduled job.
    type: boolean
    default: false
# YAML Anchors
build-sdks: &build-sdks
  - Build and Test JumpCloud SDK DirectoryInsights:
      context: aws-credentials
  - Build and Test JumpCloud SDK V1:
      requires:
        - Build and Test JumpCloud SDK DirectoryInsights
        - Draft JumpCloud SDK DirectoryInsights GitHub Release
      context: aws-credentials
  - Build and Test JumpCloud SDK V2:
      requires:
        - Build and Test JumpCloud SDK DirectoryInsights
        - Build and Test JumpCloud SDK V1
      context: aws-credentials
  - Commit Changes:
      requires:
        - Build and Test JumpCloud SDK DirectoryInsights
        - Draft JumpCloud SDK DirectoryInsights GitHub Release
        - Build and Test JumpCloud SDK V1
        - Draft JumpCloud SDK V1 GitHub Release
        - Build and Test JumpCloud SDK V2
        - Draft JumpCloud SDK V2 GitHub Release
  - CodeArtifact Approval:
      type: approval
      requires:
        - Build and Test JumpCloud SDK DirectoryInsights
        - Draft JumpCloud SDK DirectoryInsights GitHub Release
        - Build and Test JumpCloud SDK V1
        - Draft JumpCloud SDK V1 GitHub Release
        - Build and Test JumpCloud SDK V2
        - Draft JumpCloud SDK V2 GitHub Release
        - Commit Changes
  - Pack and Deploy To CodeArtifact:
      requires:
        - Build and Test JumpCloud SDK DirectoryInsights
        - Draft JumpCloud SDK DirectoryInsights GitHub Release
        - Build and Test JumpCloud SDK V1
        - Draft JumpCloud SDK V1 GitHub Release
        - Build and Test JumpCloud SDK V2
        - Draft JumpCloud SDK V2 GitHub Release
        - Commit Changes
        - CodeArtifact Approval
      context: aws-credentials
  - Test SDKs on Production JumpCloud PowerShell TestModule:
      requires:
        - Build and Test JumpCloud SDK DirectoryInsights
        - Draft JumpCloud SDK DirectoryInsights GitHub Release
        - Build and Test JumpCloud SDK V1
        - Draft JumpCloud SDK V1 GitHub Release
        - Build and Test JumpCloud SDK V2
        - Draft JumpCloud SDK V2 GitHub Release
        - Commit Changes
        - CodeArtifact Approval
        - Pack and Deploy To CodeArtifact
      context: aws-credentials
  - PSGallery Approval:
      type: approval
      requires:
        - Build and Test JumpCloud SDK DirectoryInsights
        - Draft JumpCloud SDK DirectoryInsights GitHub Release
        - Build and Test JumpCloud SDK V1
        - Draft JumpCloud SDK V1 GitHub Release
        - Build and Test JumpCloud SDK V2
        - Draft JumpCloud SDK V2 GitHub Release
        - Commit Changes
        - Pack and Deploy To CodeArtifact
      filters:
        branches:
          only:
            - master
  - Pack and Deploy To PSGallery:
      requires:
        - Build and Test JumpCloud SDK DirectoryInsights
        - Draft JumpCloud SDK DirectoryInsights GitHub Release
        - Build and Test JumpCloud SDK V1
        - Draft JumpCloud SDK V1 GitHub Release
        - Build and Test JumpCloud SDK V2
        - Draft JumpCloud SDK V2 GitHub Release
        - Commit Changes
        - Pack and Deploy To CodeArtifact
        - PSGallery Approval
      filters:
        branches:
          only:
            - master
  - Draft JumpCloud SDK DirectoryInsights GitHub Release:
      requires:
        - Build and Test JumpCloud SDK DirectoryInsights
  - Draft JumpCloud SDK V1 GitHub Release:
      requires:
        - Build and Test JumpCloud SDK DirectoryInsights
        - Draft JumpCloud SDK DirectoryInsights GitHub Release
        - Build and Test JumpCloud SDK V1
  - Draft JumpCloud SDK V2 GitHub Release:
      requires:
        - Build and Test JumpCloud SDK DirectoryInsights
        - Draft JumpCloud SDK DirectoryInsights GitHub Release
        - Build and Test JumpCloud SDK V1
        - Draft JumpCloud SDK V1 GitHub Release
        - Build and Test JumpCloud SDK V2
workflows:
  version: 2
  ci:
    when:
      equal: [<< pipeline.parameters.workflow >>, "ci"]
    jobs: *build-sdks
  trigger-ci-nightly:
    triggers:
      - schedule:
          cron: '0 6 * * 1-5' # Run on weekdays at 12AM MST (6AM UTC)
          filters:
            branches:
              only:
                - master
    jobs:
      - Trigger ci-nightly
  ci-nightly:
    when:
      equal: [<< pipeline.parameters.workflow >>, "ci-nightly"]
    jobs:
      - Build and Test JumpCloud SDK DirectoryInsights
      - Build and Test JumpCloud SDK V1
      - Build and Test JumpCloud SDK V2
jobs:
  Test SDKs on Production JumpCloud PowerShell TestModule:
    executor: win/default
    steps:
      - add_ssh_keys:
          fingerprints:
            - '24:54:e1:c2:70:c6:f7:61:71:4b:c5:52:9f:20:b9:63'
      - checkout
      - pulljcmodule
  Build and Test JumpCloud SDK DirectoryInsights:
    executor: win/default
    steps:
      - setup
      - build-test:
          SDKName: JumpCloud.SDK.DirectoryInsights
          ManualModuleVersion: ''
          RunApiTransform: true
          TestModule: true
      - changelog:
          SDKName: JumpCloud.SDK.DirectoryInsights
  Draft JumpCloud SDK DirectoryInsights GitHub Release:
    docker:
      - image: cibuilds/github:0.13
    steps:
      - attach_workspace:
          at: .
      - create-github-release-draft:
          SDKName: JumpCloud.SDK.DirectoryInsights
  Build and Test JumpCloud SDK V1:
    executor: win/default
    steps:
      - setup
      - build-test:
          SDKName: JumpCloud.SDK.V1
          ManualModuleVersion: ''
          RunApiTransform: true
          TestModule: true
      - changelog:
          SDKName: JumpCloud.SDK.V1
  Draft JumpCloud SDK V1 GitHub Release:
    docker:
      - image: cibuilds/github:0.13
    steps:
      - attach_workspace:
          at: .
      - create-github-release-draft:
          SDKName: JumpCloud.SDK.V1
  Build and Test JumpCloud SDK V2:
    executor: win/default
    steps:
      - setup
      - build-test:
          SDKName: JumpCloud.SDK.V2
          ManualModuleVersion: ''
          RunApiTransform: true
          TestModule: true
      - changelog:
          SDKName: JumpCloud.SDK.V2
  Draft JumpCloud SDK V2 GitHub Release:
    docker:
      - image: cibuilds/github:0.13
    steps:
      - attach_workspace:
          at: .
      - create-github-release-draft:
          SDKName: JumpCloud.SDK.V2
  Commit Changes:
    executor: win/default
    steps:
      - add_ssh_keys:
          fingerprints:
            - '77:04:3b:23:54:68:a8:d3:ee:63:6b:77:bb:a1:9d:c3'
      - checkout
      - commit:
          SDKName: JumpCloud.SDK.DirectoryInsights, JumpCloud.SDK.V1, JumpCloud.SDK.V2
  Pack and Deploy To CodeArtifact:
    executor: win/default
    steps:
      - setup
      - attach_workspace:
          at: .
      - deploy-nupkg:
          SDKName: JumpCloud.SDK.DirectoryInsights
          source: CodeArtifact
      - deploy-nupkg:
          SDKName: JumpCloud.SDK.V1
          source: CodeArtifact
      - deploy-nupkg:
          SDKName: JumpCloud.SDK.V2
          source: CodeArtifact
  Pack and Deploy To PSGallery:
    executor: win/default
    steps:
      - setup
      - attach_workspace:
          at: .
      - deploy-nupkg:
          SDKName: JumpCloud.SDK.DirectoryInsights
          source: PSGallery
      - deploy-nupkg:
          SDKName: JumpCloud.SDK.V1
          source: PSGallery
      - deploy-nupkg:
          SDKName: JumpCloud.SDK.V2
          source: PSGallery
  Trigger ci-nightly:
    executor: win/default
    steps:
      - run:
          name: Trigger Scheduled Run
          shell: pwsh.exe
          command: |
            Invoke-RestMethod -Method:("POST") -Uri:("https://circleci.com/api/v2/project/github/$env:CIRCLE_PROJECT_USERNAME/$env:CIRCLE_PROJECT_REPONAME/pipeline") -Headers:(@{"Circle-Token" = "$env:CIRCLE_TOKEN"; "content-type" = "application/json";}) -Body:('{"branch":"' + $env:CIRCLE_BRANCH + '","parameters":{"workflow": "ci-nightly", "triggered_by_scheduled_job": true}}')
commands:
  pulljcmodule:
    steps:
      - run:
          name: Clone JC Module Repository
          command: |
            # GIT_SSH_COMMAND='ssh -i ~/.ssh/id_rsa'
            git clone git@github.com:TheJumpCloud/support.git .\support
      - run:
          name: Setup Dependencies
          shell: pwsh.exe
          command: |
            $ErrorActionPreference = 'Stop'
            ./support\PowerShell\Deploy\Setup-Dependencies.ps1 -RequiredModulesRepo:('CodeArtifact')
      - run:
          name: Add nuget sources
          shell: pwsh.exe
          command: |
            Set-AWSCredential -AccessKey:($env:AWS_ACCESS_KEY_ID) -SecretKey:($env:AWS_SECRET_ACCESS_KEY)
            $CARepoEndpoint = "$(Get-CARepositoryEndpoint -Domain jumpcloud-artifacts -Region us-east-1 -Repository jumpcloud-nuget-modules -Format nuget)v3/index.json"
            dotnet nuget add source $CARepoEndpoint --name CodeArtifact --username aws --password (Get-CAAuthorizationToken -Domain:("jumpcloud-artifacts") -Region:("us-east-1")).AuthorizationToken
            dotnet nuget add source "https://www.powershellgallery.com/api/v2/package" --name PSGallery
      - run:
          name: Invoke Pester
          shell: pwsh.exe
          no_output_timeout: 30m
          command: |
            $ErrorActionPreference = 'stop'
            ./support\PowerShell\Deploy\SdkSync\jcapiToSupportSync.ps1 -RequiredModulesRepo CodeArtifact
            # Get functions where 'jcsdk' functions are found
            # Private & Public Functions
            $pathList = @('Private', 'Public')
            # Get matching functions
            $functions = $pathList | ForEach-Object {
                Get-ChildItem "./support/PowerShell/Jumpcloud Module/$($_)/*.ps1" -Recurse
            }
            $testTags = @()
            # For each function file
            foreach ($file in $functions) {
                $regex = [regex]'jcsdk'
                if (Select-String -path $file.FullName -Pattern $regex){
                    # If 'jcsdk' is used in the function file continue
                    # get test file
                    $testFile = ($file.FullName -replace "\\Jumpcloud Module\\", "\\Jumpcloud Module\\Tests\\") -replace ".ps1", ".Tests.ps1"
                    $tagRegex = [regex]'-Tag:\(.(\w+).\)'
                    $testTag = Select-String -path $testFile -Pattern $tagRegex
                    # "$test"
                    if ($testTag.matches) {
                        # If tag found in test file add to testTags list:
                        $testTags += $testTag.matches.Groups[1].Value
                    }
                }
            }
            # return found tags
            $tags = ($testTags | Select-Object -Unique)
            # Manually add tags that we can't automatically add with script above:
            # At this time only associations need to be added:
            $tags += 'JCAssociation'
            # Invoke Pester
            . "./support/PowerShell/JumpCloud Module/Tests/InvokePester.ps1" -JumpCloudApiKey $env:JCApiKey -JumpCloudApiKeyMsp $env:JCApiKeyMTP -ExcludeTagList:('None') -IncludeTagList:($tags) -RequiredModulesRepo:('CodeArtifact')
      - store_test_results:
          name: Uploading test results'
          path: "./support/PowerShell/JumpCloud Module/Tests/test_results/"
  setup:

    steps:
      - checkout
      - run:
          name: Install PowerShell Core
          command: dotnet tool install --global PowerShell --version 7.1.5
      - run:
          name: Setup Dependencies
          shell: pwsh.exe
          command: |
            $ErrorActionPreference = 'Stop'
            ./SetupDependencies.ps1
      - run:
          name: Display Session Variables (For Debugging)
          shell: pwsh.exe
          command: |
            Write-Host ("---------------------------------------------------------------------------------------")
            Write-Host ('Host Information') -BackgroundColor:('Green') -ForegroundColor:('Black')
            Write-Host ("---------------------------------------------------------------------------------------")
            Get-Host | Select-Object *
            Write-Host ("---------------------------------------------------------------------------------------")
            Write-Host ('Imported Environment Variables') -BackgroundColor:('Green') -ForegroundColor:('Black')
            Write-Host ("---------------------------------------------------------------------------------------")
            Get-ChildItem Env: | Format-Table
            Write-Host ("---------------------------------------------------------------------------------------")
            Write-Host ('PsBoundParameters') -BackgroundColor:('Green') -ForegroundColor:('Black')
            Write-Host ("---------------------------------------------------------------------------------------")
            $PsBoundParameters.GetEnumerator()
            Write-Host ("---------------------------------------------------------------------------------------")
            Write-Host ('Imported Variables') -BackgroundColor:('Green') -ForegroundColor:('Black')
            Write-Host ("---------------------------------------------------------------------------------------")
            Get-Variable | Format-Table
      - run:
          name: Add nuget sources
          shell: pwsh.exe
          command: |
            Set-AWSCredential -AccessKey:($env:AWS_ACCESS_KEY_ID) -SecretKey:($env:AWS_SECRET_ACCESS_KEY)
            $CARepoEndpoint = "$(Get-CARepositoryEndpoint -Domain jumpcloud-artifacts -Region us-east-1 -Repository jumpcloud-nuget-modules -Format nuget)v3/index.json"
            dotnet nuget add source $CARepoEndpoint --name CodeArtifact --username aws --password (Get-CAAuthorizationToken -Domain:("jumpcloud-artifacts") -Region:("us-east-1")).AuthorizationToken
            dotnet nuget add source "https://www.powershellgallery.com/api/v2/package" --name PSGallery
  build-test:
    parameters:
      SDKName:
        description: Name of the SDK to generate
        type: string
      ManualModuleVersion:
        description: ''
        type: string
        default: ''
      RunApiTransform:
        description: ''
        type: boolean
        default: true
      TestModule:
        description: ''
        type: boolean
        default: true
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Building '<< parameters.SDKName >>'
          shell: pwsh.exe
          command: |
            $ErrorActionPreference = 'Stop'
            ./BuildAutoRest.ps1 -SDKName:('<< parameters.SDKName >>') -ManualModuleVersion:('<< parameters.ManualModuleVersion >>') -RunApiTransform:($<< parameters.RunApiTransform >>)
      - when:
          condition:
            equal: [true, << parameters.TestModule >>]
          steps:
            - run:
                name: Testing '<< parameters.SDKName >>'
                shell: pwsh.exe
                command: |
                  $ErrorActionPreference = 'Stop'
                  ./Test-Module.ps1 -JCApiKey:($env:JCApiKey) -JCOrgId:($env:JCOrgId) -JCApiKeyMTP:($env:JCApiKeyMTP) -JCProviderId:($env:JCProviderId) -testModulePath:("./SDKs/PowerShell/<< parameters.SDKName >>/test-module.ps1")
            - store_test_results:
                name: Uploading test results for '<< parameters.SDKName >>'
                path: ./SDKs/PowerShell/<< parameters.SDKName >>/test/results
      - persist_to_workspace:
          root: .
          paths:
            - .
  create-github-release-draft:
    parameters:
      SDKName:
        description: Name of the SDK to generate
        type: string
    steps:
      - attach_workspace:
          at: .
      - run:
          name: "Draft Release GitHub"
          command: |
            # Module Version
            MODULE_VERSION=$(grep -o "ModuleVersion = '\d\+\.\d\+\.\d\+'" ./SDKs/PowerShell/<< parameters.SDKName >>/<< parameters.SDKName>>.psd1)
            VERSION=$(echo $MODULE_VERSION | grep -o "\d\+\.\d\+\.\d\+")
            TITLE="<< parameters.SDKName >>-$VERSION"
            # Get the changelog text between the latest release # and the next sequential "## SemanticVersionNumber"
            CHANGELOG=$(cat ./<< parameters.SDKName >>.md | awk "/^## << parameters.SDKName >>-$VERSION/{ f = 1; next } /## << parameters.SDKName >>-[0-9]+.[0-9]+.[0-9]+/{ f = 0 } f")
            BODY="$TITLE $CHANGELOG"
            TAG="<< parameters.SDKName >>-$VERSION"
            echo ${CIRCLE_PROJECT_USERNAME}
            echo ${CIRCLE_PROJECT_REPONAME}
            echo ${GITHUB_TOKEN}
            # Post Draft Release
            ghr -t ${GitHubAccessToken} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -n "$TITLE" -b "$BODY" -delete -draft "$TAG"
  changelog:
    parameters:
     SDKName:
        description: Name of the SDK to generate/update it's current changelog
        type: string
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Creating/Updating Changelog For '<< parameters.SDKName >>''
          shell: pwsh.exe
          command: |
           $ErrorActionPreference = 'Stop'
           ./Tools/Build-SdkChangelog.ps1 -SDKName:('<< parameters.SDKName >>')
      - persist_to_workspace:
          root: .
          paths:
            - .
  commit:
    parameters:
      SDKName:
        description: Name of the SDK to generate
        type: string
    steps:
      - attach_workspace:
          at: .
      - run:
          when: on_success
          name: 'Commit PowerShell SDKs to << pipeline.git.branch >>'
          shell: pwsh.exe
          command: |
            $UserEmail = If ($env:CIRCLE_PROJECT_USERNAME) { $env:CIRCLE_PROJECT_USERNAME } Else { ($env:USERNAME).Replace(' ', '') + '@FakeEmail.com' }
            $UserName = If ($env:CIRCLE_PROJECT_USERNAME) { $env:CIRCLE_PROJECT_USERNAME } Else { $env:USERNAME }
            git config user.email "$UserEmail"
            git config user.name "$UserName"
            git pull
            git add -A
            git status
            git commit -m "Updating PowerShell SDK: << parameters.SDKName >>;[skip ci]"
            git push origin << pipeline.git.branch >>
  pack:
    parameters:
      source:
        description: Name of the source to deploy to
        type: string
      SDKName:
        description: Name of the SDK to generate
        type: string
    steps:
      - run:
          name: Packing '<< parameters.SDKName >>'
          shell: pwsh.exe
          command: |
            $ModuleName = '<< parameters.SDKName >>'
            $Psd1 = Import-PowerShellDataFile -Path:("./SDKs/PowerShell/$ModuleName/$ModuleName.psd1")
            $nupkgFilePath = "./SDKs/PowerShell/$ModuleName/bin/nupkg"
            $csprojFilePath = "./SDKs/PowerShell/$ModuleName/$ModuleName.csproj"
            $nuspecFilePath = "./SDKs/PowerShell/$ModuleName/$ModuleName.nuspec"
            $BuildVersion = If ('<< parameters.source >>' -eq 'CodeArtifact')
            {
              "$($Psd1.ModuleVersion).$($env:CIRCLE_BUILD_NUM)-$((Get-Date).ToString("yyyyMMddHHmm"))"
            }
            ElseIf('<< parameters.source >>' -eq 'PSGallery')
            {
              $Psd1.ModuleVersion
            }
            $nuspecContent = [System.Xml.XmlDocument](Get-Content -Path:($nuspecFilePath))
            $nuspecContent.package.metadata.version = $BuildVersion
            $nuspecContent.save($nuspecFilePath)
            dotnet pack $csprojFilePath --output $nupkgFilePath --configuration=$ModuleName --verbosity Detailed
  deploy-nupkg:
    parameters:
      source:
        description: Name of the source to deploy to
        type: string
      SDKName:
        description: Name of the SDK to generate
        type: string
    steps:
      - pack:
          source: << parameters.source >>
          SDKName: << parameters.SDKName >>
      - run:
          when: on_success
          name: Publishing to "<< parameters.source >>" repo
          shell: pwsh.exe
          command: |
            $NupkgPath = (Get-ChildItem -Path:("./SDKs/PowerShell/<< parameters.SDKName >>/bin/nupkg/<< parameters.SDKName >>*.nupkg")).FullName
            If('<< parameters.source >>' -eq 'CodeArtifact'){dotnet nuget push $NupkgPath --source << parameters.source >>}
            ElseIf('<< parameters.source >>' -eq 'PSGallery'){dotnet nuget push $NupkgPath --source << parameters.source >> --api-key $env:NuGetApiKey}
            Else {Write-Error "Unknown source value: << parameters.source >>"}
