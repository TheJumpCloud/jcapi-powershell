version: 2.1
orbs:
  win: circleci/windows@2.2.0
workflows:
  version: 2
  build-sdks:
    jobs:
      # - 'Build JumpCloud PowerShell SDKs'
      - 'Build JumpCloud SDK DirectoryInsights'
      - 'Build JumpCloud SDK V1'
      - 'Build JumpCloud SDK V2':
          requires:
            - 'Build JumpCloud SDK V1'
      - deploy-staging:
          type: approval
          requires:
            - 'Build JumpCloud SDK DirectoryInsights'
            - 'Build JumpCloud SDK V1'
            - 'Build JumpCloud SDK V2'
      - deploy-prod:
          type: approval
          requires:
            - 'deploy-staging'
            - 'Build JumpCloud SDK DirectoryInsights'
            - 'Build JumpCloud SDK V1'
            - 'Build JumpCloud SDK V2'
  # build-sdks-nightly:
  #   triggers:
  #     - schedule:
  #         cron: '0 0 * * *' # Run Nightly
  #         filters:
  #           branches:
  #             only:
  #               - master
  #   jobs:
  #     - 'Build JumpCloud PowerShell SDKs'
jobs:
  # 'Build JumpCloud PowerShell SDKs':
  #   executor: win/default
  #   steps:
  #     - setup
  #     - build-test-pack:
  #         SDKName: JumpCloud.SDK.DirectoryInsights
  #         ManualModuleVersion: ''
  #         BuildModuleOverride: true
  #         RunApiTransform: true
  #         TestModule: true
  #     - build-test-pack:
  #         SDKName: JumpCloud.SDK.V1
  #         ManualModuleVersion: ''
  #         BuildModuleOverride: true
  #         RunApiTransform: true
  #         TestModule: true
  #     - build-test-pack:
  #         SDKName: JumpCloud.SDK.V2
  #         ManualModuleVersion: ''
  #         BuildModuleOverride: true
  #         RunApiTransform: true
  #         TestModule: true
  #     - commit
  'Build JumpCloud SDK DirectoryInsights':
    executor: win/default
    steps:
      - setup
      - build-test-pack:
          SDKName: JumpCloud.SDK.DirectoryInsights
          ManualModuleVersion: ''
          BuildModuleOverride: true
          RunApiTransform: true
          TestModule: true
      - commit
  'Build JumpCloud SDK V1':
    executor: win/default
    steps:
      - setup
      - build-test-pack:
          SDKName: JumpCloud.SDK.V1
          ManualModuleVersion: ''
          BuildModuleOverride: true
          RunApiTransform: true
          TestModule: true
      - commit
  'Build JumpCloud SDK V2':
    executor: win/default
    steps:
      - setup
      - build-test-pack:
          SDKName: JumpCloud.SDK.V2
          ManualModuleVersion: ''
          BuildModuleOverride: true
          RunApiTransform: true
          TestModule: true
      - commit
  deploy-staging:
    executor: win/default
    steps:
      - restore_cache:
          key: SDK_Cache
      - deploy-nupkg:
          SDKName: JumpCloud.SDK.DirectoryInsights
          environment: staging
      - deploy-nupkg:
          SDKName: JumpCloud.SDK.V1
          environment: staging
      - deploy-nupkg:
          SDKName: JumpCloud.SDK.V2
          environment: staging
  deploy-prod:
    executor: win/default
    steps:
      - restore_cache:
          key: SDK_Cache
      - deploy-nupkg:
          SDKName: JumpCloud.SDK.DirectoryInsights
          environment: prod
      - deploy-nupkg:
          SDKName: JumpCloud.SDK.V1
          environment: prod
      - deploy-nupkg:
          SDKName: JumpCloud.SDK.V2
          environment: prod
commands:
  setup:
    steps:
      - add_ssh_keys:
          fingerprints:
            - '14:78:b4:7b:f0:bb:3b:ef:a7:ba:06:49:87:50:79:e9'
      - checkout
      - run:
          name: Install PowerShell Core
          command: dotnet tool install --global PowerShell
      - run:
          name: Setup Dependencies
          shell: pwsh.exe
          command: |
            $ErrorActionPreference = 'Stop'
            ./SetupDependencies.ps1
      - run:
          name: Display Session Variables (For Debugging)
          shell: pwsh.exe
          command: |
            Write-Host ("---------------------------------------------------------------------------------------")
            Write-Host ('Host Information') -BackgroundColor:('Green') -ForegroundColor:('Black')
            Write-Host ("---------------------------------------------------------------------------------------")
            Get-Host | Select-Object *
            Write-Host ("---------------------------------------------------------------------------------------")
            Write-Host ('Imported Environment Variables') -BackgroundColor:('Green') -ForegroundColor:('Black')
            Write-Host ("---------------------------------------------------------------------------------------")
            Get-ChildItem Env: | Format-Table
            Write-Host ("---------------------------------------------------------------------------------------")
            Write-Host ('PsBoundParameters') -BackgroundColor:('Green') -ForegroundColor:('Black')
            Write-Host ("---------------------------------------------------------------------------------------")
            $PsBoundParameters.GetEnumerator()
            Write-Host ("---------------------------------------------------------------------------------------")
            Write-Host ('Imported Variables') -BackgroundColor:('Green') -ForegroundColor:('Black')
            Write-Host ("---------------------------------------------------------------------------------------")
            Get-Variable | Format-Table
  build-test-pack:
    parameters:
      SDKName:
        description: Name of the SDK to generate
        type: string
      ManualModuleVersion:
        description: ''
        type: string
        default: ''
      BuildModuleOverride:
        description: ''
        type: boolean
        default: false
      RunApiTransform:
        description: ''
        type: boolean
        default: true
      TestModule:
        description: ''
        type: boolean
        default: true
    steps:
      - restore_cache:
          key: SDK_Cache
      - run:
          name: Building '<< parameters.SDKName >>'
          shell: pwsh.exe
          command: |
            $ErrorActionPreference = 'Stop'
            ./BuildAutoRest.ps1 -SDKName:('<< parameters.SDKName >>') -GitHubAccessToken:($env:GH_TOKEN) -ManualModuleVersion:('<< parameters.ManualModuleVersion >>') -BuildModuleOverride:($<< parameters.BuildModuleOverride >>) -RunApiTransform:($<< parameters.RunApiTransform >>)
      - run:
          name: Packing '<< parameters.SDKName >>'
          shell: pwsh.exe
          command: |
            $ModuleName = '<< parameters.SDKName >>'
            $Psd1 = Import-PowerShellDataFile -Path:("./SDKs/PowerShell/$ModuleName/$ModuleName.psd1")
            $BuildVersion = "$($Psd1.ModuleVersion)-Build$($env:CIRCLE_BUILD_NUM)DateTime$((Get-Date).ToString("yyyyMMddHHmm"))"
            $nupkgFilePath = "./SDKs/PowerShell/$ModuleName/bin/nupkg"
            $csprojFilePath = "./SDKs/PowerShell/$ModuleName/$ModuleName.csproj"
            dotnet pack $csprojFilePath --output $nupkgFilePath --configuration=$ModuleName /p:Version=$BuildVersion --verbosity Detailed
      - when:
          condition:
            equal: [true, << parameters.TestModule >>]
          steps:
            - run:
                name: Testing '<< parameters.SDKName >>'
                shell: pwsh.exe
                command: |
                  $ErrorActionPreference = 'Stop'
                  ./Test-Module.ps1 -JCApiKey:($env:JCApiKey) -JCOrgId:($env:JCOrgId) -testModulePath:("./SDKs/PowerShell/<< parameters.SDKName >>/test-module.ps1")
            - store_test_results:
                name: Uploading test results for '<< parameters.SDKName >>'
                path: ./SDKs/PowerShell/<< parameters.SDKName >>/test/results
      - save_cache:
          key: SDK_Cache
          paths:
            - ./SDKs
  commit:
    steps:
      - run:
          when: on_success
          name: 'Commit PowerShell SDKs to << pipeline.git.branch >>'
          shell: pwsh.exe
          command: |
            $UserEmail = If ($env:CIRCLE_PROJECT_USERNAME) { $env:CIRCLE_PROJECT_USERNAME } Else { ($env:USERNAME).Replace(' ', '') + '@FakeEmail.com' }
            $UserName = If ($env:CIRCLE_PROJECT_USERNAME) { $env:CIRCLE_PROJECT_USERNAME } Else { $env:USERNAME }
            git config user.email "$UserEmail"
            git config user.name "$UserName"
            git add -A
            git status
            git commit -m "Updating PowerShell SDKs;[skip ci]"
            git push origin << pipeline.git.branch >>
  deploy-nupkg:
    parameters:
      environment:
        description: Name of the environment to deploy to
        type: string
      SDKName:
        description: Name of the SDK to generate
        type: string
    steps:
      - when:
          condition:
            equal: [staging, << parameters.environment >>]
          steps:
            - run:
                # when: on_success
                name: Publishing to AWS CodeArtifact (DEV)
                shell: pwsh.exe
                command: |
                  Write-Host ("Publishing to AWS CodeArtifact (DEV)")
                # $NupkgPath = (Get-ChildItem -Path:(".\SDKs\<< parameters.SDKName >>\bin\<< parameters.SDKName >>*.nupkg")).FullName
                # $GitHubPackagesURL = "https://nuget.pkg.github.com/$($env:CIRCLE_PROJECT_USERNAME)/$($env:CIRCLE_PROJECT_REPONAME)/index.json"
                # dotnet nuget push "$NupkgPath" --source "$GitHubPackagesURL" --api-key "$($env:GH_TOKEN)"
      - when:
          condition:
            equal: [prod, << parameters.environment >>]
          steps:
            - run:
                # when: on_success
                name: Publishing to PowerShell Gallery (PROD)
                shell: pwsh.exe
                command: |
                  Write-Host ("Publishing to PowerShell Gallery (PROD)")
            # - run:
            #     name: Deploy '<< parameters.SDKName >>' to PowerShell Gallery (Prod)
            #     shell: pwsh.exe
            #     command: |
            #       $NupkgPath = (Get-ChildItem -Path:(".\SDKs\<< parameters.SDKName >>\bin\<< parameters.SDKName >>*.nupkg")).FullName
            #       # dotnet nuget push "$NupkgPath" --source "https://www.powershellgallery.com/api/v2" --api-key "$env:NuGetApiKey"
            #       Write-Host ("Publish-Module -Repository:('PSGallery') -Path:($extractedModulePath) -NuGetApiKey:($env:NuGetApiKey) -SkipAutomaticTags -Force -Verbose")
            #       Write-Host ("dotnet nuget push "$NupkgPath" --source "https://www.powershellgallery.com/api/v2" --api-key "$env:NuGetApiKey"")
