version: 2.1
orbs:
  win: circleci/windows@2.2.0
# YAML Anchors
build-sdks: &build-sdks
  - 'Build JumpCloud SDK DirectoryInsights'
  - 'Build JumpCloud SDK V1':
      requires:
        - 'Build JumpCloud SDK DirectoryInsights'
  - 'Build JumpCloud SDK V2':
      requires:
        - 'Build JumpCloud SDK V1'
  - deploy-dev:
      type: approval
      requires:
        - 'Build JumpCloud SDK DirectoryInsights'
        - 'Build JumpCloud SDK V1'
        - 'Build JumpCloud SDK V2'
  - deploy-prod:
      type: approval
      requires:
        - 'deploy-dev'
        - 'Build JumpCloud SDK DirectoryInsights'
        - 'Build JumpCloud SDK V1'
        - 'Build JumpCloud SDK V2'
workflows:
  version: 2
  ci:
    jobs: *build-sdks
  ci-nightly:
    triggers:
      - schedule:
          cron: '0 0 * * *' # Run at midnight
          filters:
            branches:
              only:
                - master
    jobs: *build-sdks
jobs:
  'Build JumpCloud SDK DirectoryInsights':
    executor: win/default
    steps:
      - setup
      - build-test-pack:
          SDKName: JumpCloud.SDK.DirectoryInsights
          ManualModuleVersion: ''
          BuildModuleOverride: true
          RunApiTransform: true
          TestModule: true
      - commit:
          SDKName: JumpCloud.SDK.DirectoryInsights
  'Build JumpCloud SDK V1':
    executor: win/default
    steps:
      - setup
      - build-test-pack:
          SDKName: JumpCloud.SDK.V1
          ManualModuleVersion: ''
          BuildModuleOverride: true
          RunApiTransform: true
          TestModule: true
      - commit:
          SDKName: JumpCloud.SDK.V1
  'Build JumpCloud SDK V2':
    executor: win/default
    steps:
      - setup
      - build-test-pack:
          SDKName: JumpCloud.SDK.V2
          ManualModuleVersion: ''
          BuildModuleOverride: true
          RunApiTransform: true
          TestModule: true
      - commit:
          SDKName: JumpCloud.SDK.V2
  deploy-dev:
    executor: win/default
    steps:
      - attach_workspace:
          at: ./SDKs
      - deploy-nupkg:
          SDKName: JumpCloud.SDK.DirectoryInsights
          environment: dev
      - deploy-nupkg:
          SDKName: JumpCloud.SDK.V1
          environment: dev
      - deploy-nupkg:
          SDKName: JumpCloud.SDK.V2
          environment: dev
  deploy-prod:
    executor: win/default
    steps:
      - attach_workspace:
          at: ./SDKs
      - deploy-nupkg:
          SDKName: JumpCloud.SDK.DirectoryInsights
          environment: prod
      - deploy-nupkg:
          SDKName: JumpCloud.SDK.V1
          environment: prod
      - deploy-nupkg:
          SDKName: JumpCloud.SDK.V2
          environment: prod
commands:
  setup:
    steps:
      - add_ssh_keys:
          fingerprints:
            - '14:78:b4:7b:f0:bb:3b:ef:a7:ba:06:49:87:50:79:e9'
      - checkout
      - run:
          name: Install PowerShell Core
          command: dotnet tool install --global PowerShell
      - run:
          name: Setup Dependencies
          shell: pwsh.exe
          command: |
            $ErrorActionPreference = 'Stop'
            ./SetupDependencies.ps1
      - run:
          name: Display Session Variables (For Debugging)
          shell: pwsh.exe
          command: |
            Write-Host ("---------------------------------------------------------------------------------------")
            Write-Host ('Host Information') -BackgroundColor:('Green') -ForegroundColor:('Black')
            Write-Host ("---------------------------------------------------------------------------------------")
            Get-Host | Select-Object *
            Write-Host ("---------------------------------------------------------------------------------------")
            Write-Host ('Imported Environment Variables') -BackgroundColor:('Green') -ForegroundColor:('Black')
            Write-Host ("---------------------------------------------------------------------------------------")
            Get-ChildItem Env: | Format-Table
            Write-Host ("---------------------------------------------------------------------------------------")
            Write-Host ('PsBoundParameters') -BackgroundColor:('Green') -ForegroundColor:('Black')
            Write-Host ("---------------------------------------------------------------------------------------")
            $PsBoundParameters.GetEnumerator()
            Write-Host ("---------------------------------------------------------------------------------------")
            Write-Host ('Imported Variables') -BackgroundColor:('Green') -ForegroundColor:('Black')
            Write-Host ("---------------------------------------------------------------------------------------")
            Get-Variable | Format-Table
  build-test-pack:
    parameters:
      SDKName:
        description: Name of the SDK to generate
        type: string
      ManualModuleVersion:
        description: ''
        type: string
        default: ''
      BuildModuleOverride:
        description: ''
        type: boolean
        default: false
      RunApiTransform:
        description: ''
        type: boolean
        default: true
      TestModule:
        description: ''
        type: boolean
        default: true
    steps:
      - attach_workspace:
          at: ./SDKs
      - run:
          name: Building '<< parameters.SDKName >>'
          shell: pwsh.exe
          command: |
            $ErrorActionPreference = 'Stop'
            ./BuildAutoRest.ps1 -SDKName:('<< parameters.SDKName >>') -GitHubAccessToken:($env:GH_TOKEN) -ManualModuleVersion:('<< parameters.ManualModuleVersion >>') -BuildModuleOverride:($<< parameters.BuildModuleOverride >>) -RunApiTransform:($<< parameters.RunApiTransform >>)
      - run:
          name: Packing '<< parameters.SDKName >>'
          shell: pwsh.exe
          command: |
            $ModuleName = '<< parameters.SDKName >>'
            $Psd1 = Import-PowerShellDataFile -Path:("./SDKs/PowerShell/$ModuleName/$ModuleName.psd1")
            $BuildVersion = "$($Psd1.ModuleVersion)-Build$($env:CIRCLE_BUILD_NUM)DateTime$((Get-Date).ToString("yyyyMMddHHmm"))"
            $nupkgFilePath = "./SDKs/PowerShell/$ModuleName/bin/nupkg"
            $csprojFilePath = "./SDKs/PowerShell/$ModuleName/$ModuleName.csproj"
            dotnet pack $csprojFilePath --output $nupkgFilePath --configuration=$ModuleName /p:Version=$BuildVersion --verbosity Detailed
      - when:
          condition:
            equal: [true, << parameters.TestModule >>]
          steps:
            - run:
                name: Testing '<< parameters.SDKName >>'
                shell: pwsh.exe
                command: |
                  $ErrorActionPreference = 'Stop'
                  ./Test-Module.ps1 -JCApiKey:($env:JCApiKey) -JCOrgId:($env:JCOrgId) -testModulePath:("./SDKs/PowerShell/<< parameters.SDKName >>/test-module.ps1")
            - store_test_results:
                name: Uploading test results for '<< parameters.SDKName >>'
                path: ./SDKs/PowerShell/<< parameters.SDKName >>/test/results
      - persist_to_workspace:
          root: ./SDKs
          paths:
            - .
  commit:
    parameters:
      SDKName:
        description: Name of the SDK to generate
        type: string
    steps:
      - run:
          when: on_success
          name: 'Commit PowerShell SDKs to << pipeline.git.branch >>'
          shell: pwsh.exe
          command: |
            $UserEmail = If ($env:CIRCLE_PROJECT_USERNAME) { $env:CIRCLE_PROJECT_USERNAME } Else { ($env:USERNAME).Replace(' ', '') + '@FakeEmail.com' }
            $UserName = If ($env:CIRCLE_PROJECT_USERNAME) { $env:CIRCLE_PROJECT_USERNAME } Else { $env:USERNAME }
            git config user.email "$UserEmail"
            git config user.name "$UserName"
            git pull
            git add -A
            git status
            git commit -m "Updating PowerShell SDK: << parameters.SDKName >>;[skip ci]"
            git push origin << pipeline.git.branch >>
  deploy-nupkg:
    parameters:
      environment:
        description: Name of the environment to deploy to
        type: string
      SDKName:
        description: Name of the SDK to generate
        type: string
    steps:
      - run:
          # when: on_success
          name: Publishing to "<< parameters.environment >>" repo
          shell: pwsh.exe
          command: |
            If ('<< parameters.environment >>' -eq 'dev')
            {
              $source = "https://nuget.pkg.github.com/$($env:CIRCLE_PROJECT_USERNAME)/$($env:CIRCLE_PROJECT_REPONAME)/index.json"
              $apiKey = $env:AWSAccessKey
            }
            ElseIf ('<< parameters.environment >>' -eq 'prod')
            {
              $source = "https://www.powershellgallery.com/api/v2"
              $apiKey = $env:NuGetApiKey
            }
            $NupkgPath = (Get-ChildItem -Path:(".\SDKs\<< parameters.SDKName >>\bin\<< parameters.SDKName >>*.nupkg")).FullName
            Write-Host ("dotnet nuget push $NupkgPath --source $source --api-key $apiKey")
