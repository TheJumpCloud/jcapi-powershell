version: 2.1
orbs:
  win: circleci/windows@2.2.0
workflows:
  version: 2
  build-sdks:
    jobs:
      - 'Build JumpCloud PowerShell SDKs'
  build-sdks-nightly:
    triggers:
      - schedule:
          cron: '0 0 * * *' # Run Nightly
          filters:
            branches:
              only:
                - master
    jobs:
      - 'Build JumpCloud PowerShell SDKs'
jobs:
  'Build JumpCloud PowerShell SDKs':
    executor: win/default
    steps:
      - setup
      - build-test-pack:
          SDKName: JumpCloud.SDK.DirectoryInsights
          ManualModuleVersion: ''
          BuildModuleOverride: true
          RunApiTransform: true
          TestModule: true
      - build-test-pack:
          SDKName: JumpCloud.SDK.V1
          ManualModuleVersion: ''
          BuildModuleOverride: true
          RunApiTransform: true
          TestModule: true
      - build-test-pack:
          SDKName: JumpCloud.SDK.V2
          ManualModuleVersion: ''
          BuildModuleOverride: true
          RunApiTransform: true
          TestModule: true
      - deploy-staging
      - commit
commands:
  setup:
    steps:
      - add_ssh_keys:
          fingerprints:
            - '14:78:b4:7b:f0:bb:3b:ef:a7:ba:06:49:87:50:79:e9'
      - checkout
      - run:
          name: Install PowerShell Core
          command: dotnet tool install --global PowerShell
      - run:
          name: Setup Dependencies
          shell: pwsh.exe
          command: |
            $ErrorActionPreference = 'Stop'
            ./SetupDependencies.ps1     
      - run:
          name: Display Session Variables (For Debugging)
          shell: pwsh.exe
          command: |
            Write-Host ("---------------------------------------------------------------------------------------")
            Write-Host ('Host Information') -BackgroundColor:('Green') -ForegroundColor:('Black')
            Write-Host ("---------------------------------------------------------------------------------------")
            Get-Host | Select-Object *
            Write-Host ("---------------------------------------------------------------------------------------")
            Write-Host ('Imported Environment Variables') -BackgroundColor:('Green') -ForegroundColor:('Black')
            Write-Host ("---------------------------------------------------------------------------------------")
            Get-ChildItem Env: | Format-Table
            Write-Host ("---------------------------------------------------------------------------------------")
            Write-Host ('PsBoundParameters') -BackgroundColor:('Green') -ForegroundColor:('Black')
            Write-Host ("---------------------------------------------------------------------------------------")
            $PsBoundParameters.GetEnumerator()
            Write-Host ("---------------------------------------------------------------------------------------")
            Write-Host ('Imported Variables') -BackgroundColor:('Green') -ForegroundColor:('Black')
            Write-Host ("---------------------------------------------------------------------------------------")
            Get-Variable | Format-Table
  build-test-pack:
    parameters:
      SDKName:
        description: Name of the SDK to generate
        type: string
      ManualModuleVersion:
        description: ''
        type: string
        default: ''
      BuildModuleOverride:
        description: ''
        type: boolean
        default: false
      RunApiTransform:
        description: ''
        type: boolean
        default: true
      TestModule:
        description: ''
        type: boolean
        default: true
    steps:
      - run:
          when: always
          name: Building '<< parameters.SDKName >>'
          shell: pwsh.exe
          command: |
            $ErrorActionPreference = 'Stop'
            ./BuildAutoRest.ps1 -SDKName:('<< parameters.SDKName >>') -GitHubAccessToken:($env:GH_TOKEN) -ManualModuleVersion:('<< parameters.ManualModuleVersion >>') -BuildModuleOverride:($<< parameters.BuildModuleOverride >>) -RunApiTransform:($<< parameters.RunApiTransform >>)
      - when:
          condition:
            equal: [true, << parameters.TestModule >>]
          steps:
            - run:
                when: on_success
                name: Testing '<< parameters.SDKName >>'
                shell: pwsh.exe
                command: |
                  $ErrorActionPreference = 'Stop'
                  ./Test-Module.ps1 -JCApiKey:($env:JCApiKey) -JCOrgId:($env:JCOrgId) -testModulePath:("./SDKs/PowerShell/<< parameters.SDKName >>/test-module.ps1")
            - store_test_results:
                name: Uploading test results for '<< parameters.SDKName >>'
                path: ./SDKs/PowerShell/<< parameters.SDKName >>/test/results
  deploy-staging:
    steps:
      - run:
          when: on_success
          name: Publishing to AWS CodeArtifact
          shell: pwsh.exe
          command: ./PublishToCodeArtifact.ps1
  commit:
    steps:
      - run:
          when: on_success
          name: 'Commit PowerShell SDKs to << pipeline.git.branch >>'
          shell: pwsh.exe
          command: |
            $UserEmail = If ($env:CIRCLE_PROJECT_USERNAME) { $env:CIRCLE_PROJECT_USERNAME } Else { ($env:USERNAME).Replace(' ', '') + '@FakeEmail.com' }
            $UserName = If ($env:CIRCLE_PROJECT_USERNAME) { $env:CIRCLE_PROJECT_USERNAME } Else { $env:USERNAME }
            git config user.email "$UserEmail"
            git config user.name "$UserName"
            git add -A
            git status
            git commit -m "Updating PowerShell SDKs;[skip ci]"
            git push origin << pipeline.git.branch >>
