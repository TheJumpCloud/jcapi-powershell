name: PowerShell SDK CI

on:
  pull_request:
    branches:
      #- "master"
      - SDK-Release-Test

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  Filter-Branch:
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.labels.*.name, 'SDK')
    steps:
      - run: echo "Building SDKs"

  Check-PR-Labels:
    needs: ['Filter-Branch']
    runs-on: ubuntu-latest
    outputs:
      RELEASE_TYPE: ${{ steps.set_labels.outputs.RELEASE_TYPE }}
      V1: ${{ steps.set_labels.outputs.V1 }}
      V2: ${{ steps.set_labels.outputs.V2 }}
      DIRECTORYINSIGHTS: ${{ steps.set_labels.outputs.DIRECTORYINSIGHTS }}
    steps:
      - name: Set Environment Variables from PR Labels
        id: set_labels
        shell: pwsh
        run: |
          # Fetch and natively parse the JSON list of labels from the PR
          $jsonResponse = curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" `
            "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/labels"
          $PR_LABEL_LIST = ($jsonResponse | ConvertFrom-Json).name
          Write-Host "Found labels on PR: $($PR_LABEL_LIST -join ', ')"

          # --- Set Release Type Environment Variable using a loop ---
          $validReleaseTypes = @('major', 'minor', 'patch', 'manual')
          $foundReleaseType = ''
          $typeCount = 0

          # Loop through the labels found on the PR
          foreach ($label in $PR_LABEL_LIST) {
              # Check if the current label is a valid release type
              if ($label -in $validReleaseTypes) {
                  $typeCount++
                  $foundReleaseType = $label
              }
          }

          # Validate that exactly one release type was found
          if ($typeCount -eq 1) {
              Write-Host "Release Type set to: $foundReleaseType"
              echo "RELEASE_TYPE=$foundReleaseType" >> $env:GITHUB_OUTPUT
          } else {
              throw "Error: Expected exactly one release type label (major, minor, patch, manual), but found $typeCount."
          }

          # --- Set Module Environment Variables ---
          if ('v1' -in $PR_LABEL_LIST) {
            Write-Host "Module label 'v1' found"
            echo "v1=true" >> $env:GITHUB_OUTPUT
          }
          if ('v2' -in $PR_LABEL_LIST) {
            Write-Host "Module label 'v2' found"
            echo "v2=true" >> $env:GITHUB_OUTPUT
          }
          if ('DirectoryInsights' -in $PR_LABEL_LIST) {
            Write-Host "Module label 'DirectoryInsights' found"
            echo "directoryinsights=true" >> $env:GITHUB_OUTPUT
          }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  Setup-Build-Dependancies:
    needs: ['Filter-Branch']
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - name: Setup PowerShell Module Cache
        id: cacher
        uses: actions/cache@v3
        with:
          path: "/home/runner/.local/share/powershell/Modules/"
          key: PS-Dependancies
      - name: Install dependencies
        if: steps.cacher.outputs.cache-hit != 'true'
        shell: pwsh
        env:
          PESTER_APIKEY: ${{ secrets.PESTER_APIKEY }}
          PESTER_ORGID: ${{ secrets.PESTER_ORGID }}
          PESTER_MSP_APIKEY: ${{ secrets.PESTER_MSP_APIKEY }}
        run: |
          Set-PSRepository PSGallery -InstallationPolicy Trusted
          If (!(Get-PackageProvider -Name:('NuGet') -ListAvailable -ErrorAction:('SilentlyContinue'))) {
              Write-Host ('[status]Installing package provider NuGet');
              Install-PackageProvider -Name:('NuGet') -Scope:('CurrentUser') -Force
          }
          $PSDependencies = @{
              'AWS.Tools.CodeArtifact' = @{Repository = 'PSGallery'; RequiredVersion = '4.1.14.0' }
              'AWS.Tools.Common'       = @{Repository = 'PSGallery'; RequiredVersion = '4.1.14.0' }
              'BuildHelpers'           = @{Repository = 'PSGallery'; RequiredVersion = '2.0.15'}
              'Pester'                 = @{Repository = 'PSGallery'; RequiredVersion = '5.3.1'}
              'powershell-yaml'        = @{Repository = 'PSGallery'; RequiredVersion = '0.4.2'}
              'PowerShellGet'          = @{Repository = 'PSGallery'; RequiredVersion = '3.0.12-beta'}
              'PSScriptAnalyzer'       = @{Repository = 'PSGallery'; RequiredVersion = '1.19.1'}
          }
          foreach ($RequiredModule in $PSDependencies.Keys) {
              If ([System.String]::IsNullOrEmpty((Get-InstalledModule | Where-Object { $_.Name -eq $RequiredModule }))) {
                  Write-Host("[status]Installing module: '$RequiredModule'; version: $($PSDependencies[$RequiredModule].RequiredVersion) from $($PSDependencies[$RequiredModule].Repository)")
                  Install-Module -Name $RequiredModule -Repository:($($PSDependencies[$RequiredModule].Repository)) -RequiredVersion:($($PSDependencies[$RequiredModule].RequiredVersion)) -AllowPrerelease -Force
              }
          }

  Validate-SDK-Module:
    needs: ["Setup-Build-Dependancies", "Check-PR-Labels"]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/cache@v3
        with:
          path: "/home/runner/.local/share/powershell/Modules/"
          key: PS-Dependancies
      - uses: actions/checkout@v4
      - name: Validate SDK Module
        id: validate
        shell: pwsh
        env:
          v1: ${{ needs.Check-PR-Labels.outputs.v1 }}
          v2: ${{ needs.Check-PR-Labels.outputs.v2 }}
          directoryinsights: ${{ needs.Check-PR-Labels.outputs.directoryinsights }}
          RELEASE_TYPE: ${{ needs.Check-PR-Labels.outputs.RELEASE_TYPE }}
        run: |
          # Construct the PR_LABELS variable for the Pester test script
          $prLabels = @()
          if ($env:v1) { $prLabels += 'v1' }
          if ($env:v2) { $prLabels += 'v2' }
          if ($env:directoryinsights) { $prLabels += 'DirectoryInsights' }
          if ($env:RELEASE_TYPE) { $prLabels += $env:RELEASE_TYPE }
          $prLabels += 'sdk'
          $env:PR_LABELS = $prLabels -join ','

          Write-Host "Passing the following labels to Pester: $env:PR_LABELS"
          Install-Module -Name Pester
          Invoke-Pester -Path /home/runner/work/jcapi-powershell/jcapi-powershell/Tools/ModuleValidation.Tests.ps1

  ## ----------------------------------------------------------------
  ## Build Jobs
  ## ----------------------------------------------------------------

  Build-SDK-DI:
    needs: ["Setup-Build-Dependancies"]
    if: contains(github.event.pull_request.labels.*.name, 'DirectoryInsights')
    runs-on: ubuntu-latest
    timeout-minutes: 70
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v3
        with:
          path: "/home/runner/.local/share/powershell/Modules/"
          key: PS-Dependancies
      - name: Build JumpCloud.SDK.DirectoryInsights
        shell: pwsh
        run: |
          ./BuildAutoRest -SDKName:("JumpCloud.SDK.DirectoryInsights")
      - name: Pack JumpCloud.SDK.DirectoryInsights Module
        shell: pwsh
        run: |
          $ModuleName = "JumpCloud.SDK.DirectoryInsights"
          $Psd1 = Import-PowerShellDataFile -Path:("/home/runner/work/jcapi-powershell/jcapi-powershell/SDKs/PowerShell/$ModuleName/$ModuleName.psd1")
          $nupkgFilePath = "/home/runner/work/jcapi-powershell/jcapi-powershell/SDKs/PowerShell/$ModuleName/bin/nupkg"
          $csprojFilePath = "/home/runner/work/jcapi-powershell/jcapi-powershell/SDKs/PowerShell/$ModuleName/$ModuleName.csproj"
          $nuspecFilePath = "/home/runner/work/jcapi-powershell/jcapi-powershell/SDKs/PowerShell/$ModuleName/$ModuleName.nuspec"
          $BuildVersion = $Psd1.ModuleVersion
          $nuspecContent = [System.Xml.XmlDocument](Get-Content -Path:($nuspecFilePath))
          $nuspecContent.package.metadata.version = $BuildVersion
          $nuspecContent.save($nuspecFilePath)
          dotnet pack $csprojFilePath --output $nupkgFilePath --configuration=$ModuleName
      - name: Zip JumpCloud.SDK.DirectoryInsights Module
        shell: pwsh
        run: |
          Compress-Archive -Path /home/runner/work/jcapi-powershell/jcapi-powershell/SDKs/PowerShell/JumpCloud.SDK.DirectoryInsights -DestinationPath /home/runner/work/jcapi-powershell/jcapi-powershell/SDKs/PowerShell/JumpCloud.SDK.DirectoryInsights.zip -CompressionLevel Optimal -Force
      - uses: ./.github/actions/upload-secure-artifact
        with:
          name: build-JumpCloud.SDK.DirectoryInsights
          path: /home/runner/work/jcapi-powershell/jcapi-powershell/SDKs/PowerShell/JumpCloud.SDK.DirectoryInsights.zip
          retention-days: 1

  Build-SDK-V1:
    needs: ["Setup-Build-Dependancies"]
    if: contains(github.event.pull_request.labels.*.name, 'v1') || contains(github.event.pull_request.labels.*.name, 'v2')
    runs-on: ubuntu-latest
    timeout-minutes: 70
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v3
        with:
          path: "/home/runner/.local/share/powershell/Modules/"
          key: PS-Dependancies
      - name: Build JumpCloud.SDK.V1
        shell: pwsh
        run: |
          ./BuildAutoRest -SDKName:("JumpCloud.SDK.V1")
      - name: Pack JumpCloud.SDK.V1 Module
        shell: pwsh
        run: |
          $ModuleName = "JumpCloud.SDK.V1"
          $Psd1 = Import-PowerShellDataFile -Path:("/home/runner/work/jcapi-powershell/jcapi-powershell/SDKs/PowerShell/$ModuleName/$ModuleName.psd1")
          $nupkgFilePath = "/home/runner/work/jcapi-powershell/jcapi-powershell/SDKs/PowerShell/$ModuleName/bin/nupkg"
          $csprojFilePath = "/home/runner/work/jcapi-powershell/jcapi-powershell/SDKs/PowerShell/$ModuleName/$ModuleName.csproj"
          $nuspecFilePath = "/home/runner/work/jcapi-powershell/jcapi-powershell/SDKs/PowerShell/$ModuleName/$ModuleName.nuspec"
          $BuildVersion = $Psd1.ModuleVersion
          $nuspecContent = [System.Xml.XmlDocument](Get-Content -Path:($nuspecFilePath))
          $nuspecContent.package.metadata.version = $BuildVersion
          $nuspecContent.save($nuspecFilePath)
          dotnet pack $csprojFilePath --output $nupkgFilePath --configuration=$ModuleName
      - name: Zip JumpCloud.SDK.V1 Module
        shell: pwsh
        run: |
          Compress-Archive -Path /home/runner/work/jcapi-powershell/jcapi-powershell/SDKs/PowerShell/JumpCloud.SDK.V1 -DestinationPath /home/runner/work/jcapi-powershell/jcapi-powershell/SDKs/PowerShell/JumpCloud.SDK.V1.zip -CompressionLevel Optimal -Force
      - uses: ./.github/actions/upload-secure-artifact
        with:
          name: build-JumpCloud.SDK.V1
          path: /home/runner/work/jcapi-powershell/jcapi-powershell/SDKs/PowerShell/JumpCloud.SDK.V1.zip
          retention-days: 1

  Build-SDK-V2:
    needs: ["Setup-Build-Dependancies"]
    if: contains(github.event.pull_request.labels.*.name, 'v2')
    runs-on: ubuntu-latest
    timeout-minutes: 70
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v3
        with:
          path: "/home/runner/.local/share/powershell/Modules/"
          key: PS-Dependancies
      - name: Build JumpCloud.SDK.V2
        shell: pwsh
        run: |
          ./BuildAutoRest -SDKName:("JumpCloud.SDK.V2")
      - name: Pack JumpCloud.SDK.V2 Module
        shell: pwsh
        run: |
          $ModuleName = "JumpCloud.SDK.V2"
          $Psd1 = Import-PowerShellDataFile -Path:("/home/runner/work/jcapi-powershell/jcapi-powershell/SDKs/PowerShell/$ModuleName/$ModuleName.psd1")
          $nupkgFilePath = "/home/runner/work/jcapi-powershell/jcapi-powershell/SDKs/PowerShell/$ModuleName/bin/nupkg"
          $csprojFilePath = "/home/runner/work/jcapi-powershell/jcapi-powershell/SDKs/PowerShell/$ModuleName/$ModuleName.csproj"
          $nuspecFilePath = "/home/runner/work/jcapi-powershell/jcapi-powershell/SDKs/PowerShell/$ModuleName/$ModuleName.nuspec"
          $BuildVersion = $Psd1.ModuleVersion
          $nuspecContent = [System.Xml.XmlDocument](Get-Content -Path:($nuspecFilePath))
          $nuspecContent.package.metadata.version = $BuildVersion
          $nuspecContent.save($nuspecFilePath)
          dotnet pack $csprojFilePath --output $nupkgFilePath --configuration=$ModuleName
      - name: Zip JumpCloud.SDK.V2 Module
        shell: pwsh
        run: |
          Compress-Archive -Path /home/runner/work/jcapi-powershell/jcapi-powershell/SDKs/PowerShell/JumpCloud.SDK.V2 -DestinationPath /home/runner/work/jcapi-powershell/jcapi-powershell/SDKs/PowerShell/JumpCloud.SDK.V2.zip -CompressionLevel Optimal -Force
      - uses: ./.github/actions/upload-secure-artifact
        with:
          name: build-JumpCloud.SDK.V2
          path: /home/runner/work/jcapi-powershell/jcapi-powershell/SDKs/PowerShell/JumpCloud.SDK.V2.zip
          retention-days: 1

  ## ----------------------------------------------------------------
  ## Test Jobs
  ## ----------------------------------------------------------------

  Test-SDK-DI:
    needs: ["Build-SDK-DI", "Check-PR-Labels"]
    if: contains(github.event.pull_request.labels.*.name, 'DirectoryInsights')
    runs-on: ubuntu-latest
    timeout-minutes: 70
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v3
        with:
          path: "/home/runner/.local/share/powershell/Modules/"
          key: PS-Dependancies
      - uses: actions/download-artifact@v4
        with:
          name: build-JumpCloud.SDK.DirectoryInsights
          path: /home/runner/work/jcapi-powershell/jcapi-powershell/SDKs/PowerShell/
      - name: Unzip JumpCloud.SDK.DirectoryInsights module
        shell: pwsh
        run: |
          Expand-Archive -Path /home/runner/work/jcapi-powershell/jcapi-powershell/SDKs/PowerShell/JumpCloud.SDK.DirectoryInsights.zip -DestinationPath /home/runner/work/jcapi-powershell/jcapi-powershell/SDKs/PowerShell/ -Force
      - name: Test JumpCloud.SDK.DirectoryInsights
        shell: pwsh
        env:
          PESTER_APIKEY: ${{ secrets.PESTER_APIKEY }}
          PESTER_ORGID: ${{ secrets.PESTER_ORGID }}
          PESTER_MSP_APIKEY: ${{ secrets.PESTER_MSP_APIKEY }}
          PESTER_PROVIDERID: ${{ secrets.PESTER_PROVIDERID }}
        run: |
          $ErrorActionnPreference = 'Stop'
          ./Test-Module.ps1 -JCApiKey:($env:PESTER_APIKEY) -JCOrgId:($env:PESTER_ORGID) -JCApiKeyMTP:($env:PESTER_MSP_APIKEY) -JCProviderId:($env:PESTER_PROVIDERID) -ExcludeTagList:("MTP") -IncludeTagList:("*") -testModulePath:("./SDKs/PowerShell/JumpCloud.SDK.DirectoryInsights/test-module.ps1")

  Test-SDK-V1:
    needs: ["Build-SDK-V1", "Check-PR-Labels"]
    if: contains(github.event.pull_request.labels.*.name, 'v1')
    runs-on: ubuntu-latest
    timeout-minutes: 70
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v3
        with:
          path: "/home/runner/.local/share/powershell/Modules/"
          key: PS-Dependancies
      - uses: actions/download-artifact@v4
        with:
          name: build-JumpCloud.SDK.V1
          path: /home/runner/work/jcapi-powershell/jcapi-powershell/SDKs/PowerShell/
      - name: Unzip JumpCloud.SDK.V1 module
        shell: pwsh
        run: |
          Expand-Archive -Path /home/runner/work/jcapi-powershell/jcapi-powershell/SDKs/PowerShell/JumpCloud.SDK.V1.zip -DestinationPath /home/runner/work/jcapi-powershell/jcapi-powershell/SDKs/PowerShell/ -Force
      - name: Test JumpCloud.SDK.V1
        shell: pwsh
        env:
          PESTER_APIKEY: ${{ secrets.PESTER_APIKEY }}
          PESTER_ORGID: ${{ secrets.PESTER_ORGID }}
          PESTER_MSP_APIKEY: ${{ secrets.PESTER_MSP_APIKEY }}
          PESTER_PROVIDERID: ${{ secrets.PESTER_PROVIDERID }}
        run: |
          $ErrorActionnPreference = 'Stop'
          ./Test-Module.ps1 -JCApiKey:($env:PESTER_APIKEY) -JCOrgId:($env:PESTER_ORGID) -JCApiKeyMTP:($env:PESTER_MSP_APIKEY) -JCProviderId:($env:PESTER_PROVIDERID) -ExcludeTagList:("MTP") -IncludeTagList:("*") -testModulePath:("./SDKs/PowerShell/JumpCloud.SDK.V1/test-module.ps1")

  Test-SDK-V2:
    needs: ["Build-SDK-V1", "Build-SDK-V2", "Check-PR-Labels"]
    if: contains(github.event.pull_request.labels.*.name, 'v2')
    runs-on: ubuntu-latest
    timeout-minutes: 70
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v3
        with:
          path: "/home/runner/.local/share/powershell/Modules/"
          key: PS-Dependancies
      - uses: actions/download-artifact@v4
        with:
          name: build-JumpCloud.SDK.V2
          path: /home/runner/work/jcapi-powershell/jcapi-powershell/SDKs/PowerShell/
      - name: Unzip JumpCloud.SDK.V2 module
        shell: pwsh
        run: |
          Expand-Archive -Path /home/runner/work/jcapi-powershell/jcapi-powershell/SDKs/PowerShell/JumpCloud.SDK.V2.zip -DestinationPath /home/runner/work/jcapi-powershell/jcapi-powershell/SDKs/PowerShell/ -Force
      - uses: actions/download-artifact@v4
        with:
          name: build-JumpCloud.SDK.V1
          path: /home/runner/work/jcapi-powershell/jcapi-powershell/SDKs/PowerShell/
      - name: Unzip V1 module for V2 Tests
        shell: pwsh
        run: |
          Expand-Archive -Path /home/runner/work/jcapi-powershell/jcapi-powershell/SDKs/PowerShell/JumpCloud.SDK.V1.zip -DestinationPath /home/runner/work/jcapi-powershell/jcapi-powershell/SDKs/PowerShell/ -Force
      - name: Test JumpCloud.SDK.V2
        shell: pwsh
        env:
          PESTER_APIKEY: ${{ secrets.PESTER_APIKEY }}
          PESTER_ORGID: ${{ secrets.PESTER_ORGID }}
          PESTER_MSP_APIKEY: ${{ secrets.PESTER_MSP_APIKEY }}
          PESTER_PROVIDERID: ${{ secrets.PESTER_PROVIDERID }}
        run: |
          $ErrorActionnPreference = 'Stop'
          ./Test-Module.ps1 -JCApiKey:($env:PESTER_APIKEY) -JCOrgId:($env:PESTER_ORGID) -JCApiKeyMTP:($env:PESTER_MSP_APIKEY) -JCProviderId:($env:PESTER_PROVIDERID) -ExcludeTagList:("MTP") -IncludeTagList:("*") -testModulePath:("./SDKs/PowerShell/JumpCloud.SDK.V2/test-module.ps1")

  ## ----------------------------------------------------------------
  ## MTP Test Jobs
  ## ----------------------------------------------------------------

  Test-SDK-MTP-V1:
    needs: ["Build-SDK-V1", "Check-PR-Labels"]
    if: contains(github.event.pull_request.labels.*.name, 'v1')
    runs-on: ubuntu-latest
    timeout-minutes: 70
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v3
        with:
          path: "/home/runner/.local/share/powershell/Modules/"
          key: PS-Dependancies
      - uses: actions/download-artifact@v4
        with:
          name: build-JumpCloud.SDK.V1
          path: /home/runner/work/jcapi-powershell/jcapi-powershell/SDKs/PowerShell/
      - name: Unzip JumpCloud.SDK.V1 module
        shell: pwsh
        run: |
          Expand-Archive -Path /home/runner/work/jcapi-powershell/jcapi-powershell/SDKs/PowerShell/JumpCloud.SDK.V1.zip -DestinationPath /home/runner/work/jcapi-powershell/jcapi-powershell/SDKs/PowerShell/ -Force
      - name: Test MTP JumpCloud.SDK.V1
        shell: pwsh
        env:
          PESTER_APIKEY: ${{ secrets.PESTER_APIKEY }}
          PESTER_ORGID: ${{ secrets.PESTER_ORGID }}
          PESTER_MSP_APIKEY: ${{ secrets.PESTER_MSP_APIKEY }}
          PESTER_PROVIDERID: ${{ secrets.PESTER_PROVIDERID }}
        run: |
          $ErrorActionnPreference = 'Stop'
          ./Test-Module.ps1 -JCApiKey:($env:PESTER_APIKEY) -JCOrgId:($env:PESTER_ORGID) -JCApiKeyMTP:($env:PESTER_MSP_APIKEY) -JCProviderId:($env:PESTER_PROVIDERID) -ExcludeTagList:("None") -IncludeTagList:("MTP") -testModulePath:("./SDKs/PowerShell/JumpCloud.SDK.V1/test-module.ps1")

  Test-SDK-MTP-V2:
    needs: ["Build-SDK-V1", "Build-SDK-V2", "Check-PR-Labels"]
    if: contains(github.event.pull_request.labels.*.name, 'v2')
    runs-on: ubuntu-latest
    timeout-minutes: 70
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v3
        with:
          path: "/home/runner/.local/share/powershell/Modules/"
          key: PS-Dependancies
      - uses: actions/download-artifact@v4
        with:
          name: build-JumpCloud.SDK.V2
          path: /home/runner/work/jcapi-powershell/jcapi-powershell/SDKs/PowerShell/
      - name: Unzip JumpCloud.SDK.V2 module
        shell: pwsh
        run: |
          Expand-Archive -Path /home/runner/work/jcapi-powershell/jcapi-powershell/SDKs/PowerShell/JumpCloud.SDK.V2.zip -DestinationPath /home/runner/work/jcapi-powershell/jcapi-powershell/SDKs/PowerShell/ -Force
      - uses: actions/download-artifact@v4
        with:
          name: build-JumpCloud.SDK.V1
          path: /home/runner/work/jcapi-powershell/jcapi-powershell/SDKs/PowerShell/
      - name: Unzip V1 module for V2 Tests
        shell: pwsh
        run: |
          Expand-Archive -Path /home/runner/work/jcapi-powershell/jcapi-powershell/SDKs/PowerShell/JumpCloud.SDK.V1.zip -DestinationPath /home/runner/work/jcapi-powershell/jcapi-powershell/SDKs/PowerShell/ -Force
      - name: Test MTP JumpCloud.SDK.V2
        shell: pwsh
        env:
          PESTER_APIKEY: ${{ secrets.PESTER_APIKEY }}
          PESTER_ORGID: ${{ secrets.PESTER_ORGID }}
          PESTER_MSP_APIKEY: ${{ secrets.PESTER_MSP_APIKEY }}
          PESTER_PROVIDERID: ${{ secrets.PESTER_PROVIDERID }}
        run: |
          $ErrorActionnPreference = 'Stop'
          ./Test-Module.ps1 -JCApiKey:($env:PESTER_APIKEY) -JCOrgId:($env:PESTER_ORGID) -JCApiKeyMTP:($env:PESTER_MSP_APIKEY) -JCProviderId:($env:PESTER_PROVIDERID) -ExcludeTagList:("None") -IncludeTagList:("MTP") -testModulePath:("./SDKs/PowerShell/JumpCloud.SDK.V2/test-module.ps1")