name: Release and Publish SDKs

on:
  pull_request:
    branches:
      - SDK-Release-Test

jobs:
  Filter-Branch:
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.labels.*.name, 'SDK')
    steps:
      - run: echo "SDK label found. Continuing."

  # Check-If-Merged:
  #   needs: ['Filter-Branch']
  #   if: github.event.pull_request.merged == true
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Check if Merged
  #       run: echo "PR #${{ github.event.pull_request.number }} was merged. Starting release process."

  Check-PR-Labels:
    #needs: ['Check-If-Merged']
    runs-on: ubuntu-latest
    outputs:
      RELEASE_TYPE: ${{ steps.set_labels.outputs.RELEASE_TYPE }}
      V1: ${{ steps.set_labels.outputs.V1 }}
      V2: ${{ steps.set_labels.outputs.V2 }}
      DIRECTORYINSIGHTS: ${{ steps.set_labels.outputs.DIRECTORYINSIGHTS }}
    steps:
      - name: Set Environment Variables from PR Labels
        id: set_labels
        shell: pwsh
        run: |
          # Fetch and natively parse the JSON list of labels from the PR
          $jsonResponse = curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" `
            "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/labels"
          $PR_LABEL_LIST = ($jsonResponse | ConvertFrom-Json).name
          Write-Host "Found labels on PR: $($PR_LABEL_LIST -join ', ')"

          # --- Set Release Type Environment Variable ---
          $validReleaseTypes = @('major', 'minor', 'patch', 'manual')
          $foundReleaseType = ''
          $typeCount = 0
          foreach ($label in $PR_LABEL_LIST) {
              if ($label -in $validReleaseTypes) {
                  $typeCount++; $foundReleaseType = $label
              }
          }
          if ($typeCount -ne 1) {
              throw "Error: Expected exactly one release type label, but found $typeCount."
          }
          Write-Host "Release Type set to: $foundReleaseType"
          echo "RELEASE_TYPE=$foundReleaseType" >> $env:GITHUB_OUTPUT

          # --- Set Module Environment Variables ---
          if ('v1' -in $PR_LABEL_LIST) { echo "V1=true" >> $env:GITHUB_OUTPUT }
          if ('v2' -in $PR_LABEL_LIST) { echo "V2=true" >> $env:GITHUB_OUTPUT }
          if ('DirectoryInsights' -in $PR_LABEL_LIST) { echo "DIRECTORYINSIGHTS=true" >> $env:GITHUB_OUTPUT }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # =================================================================
  # == DRAFT GITHUB RELEASE JOBS
  # =================================================================

  Draft-Release-V1:
    needs: ['Check-PR-Labels']
    if: needs.Check-PR-Labels.outputs.V1 == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.merge_commit_sha }}
      - name: Zip SDK Directory
        run: |
          cd ${{ github.workspace }}/SDKs/PowerShell/JumpCloud.SDK.V1/
          zip -r ${{ github.workspace }}/SDKs/PowerShell/JumpCloud.SDK.V1.zip ./*
      - name: Build and Draft Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          SDK_NAME="JumpCloud.SDK.V1"
          MODULE_CAPTURE=$(grep -Po "ModuleVersion = '(\d+\.\d+\.\d+)'" "${{ github.workspace }}/SDKs/PowerShell/${SDK_NAME}/${SDK_NAME}.psd1")
          VERSION=$(echo "$MODULE_CAPTURE" | grep -Po "(\d+\.\d+\.\d+)")
          TITLE="${SDK_NAME}-${VERSION}"
          TAG="${SDK_NAME}-${VERSION}"
          CHANGELOG=$(cat "${{ github.workspace }}/${SDK_NAME}.md" | awk "/^## ${SDK_NAME}-${VERSION}/{f=1; next} /^## ${SDK_NAME}-[0-9]+.[0-9]+.[0-9]+/{f=0} f")
          gh release create "$TAG" --title "$TITLE" --notes "$CHANGELOG" --draft "${{ github.workspace }}/SDKs/PowerShell/${SDK_NAME}.zip"

  Draft-Release-V2:
    needs: ['Check-PR-Labels']
    if: needs.Check-PR-Labels.outputs.V2 == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.merge_commit_sha }}
      - name: Zip SDK Directory
        run: |
          cd ${{ github.workspace }}/SDKs/PowerShell/JumpCloud.SDK.V2/
          zip -r ${{ github.workspace }}/SDKs/PowerShell/JumpCloud.SDK.V2.zip ./*
      - name: Build and Draft Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          SDK_NAME="JumpCloud.SDK.V2"
          MODULE_CAPTURE=$(grep -Po "ModuleVersion = '(\d+\.\d+\.\d+)'" "${{ github.workspace }}/SDKs/PowerShell/${SDK_NAME}/${SDK_NAME}.psd1")
          VERSION=$(echo "$MODULE_CAPTURE" | grep -Po "(\d+\.\d+\.\d+)")
          TITLE="${SDK_NAME}-${VERSION}"
          TAG="${SDK_NAME}-${VERSION}"
          CHANGELOG=$(cat "${{ github.workspace }}/${SDK_NAME}.md" | awk "/^## ${SDK_NAME}-${VERSION}/{f=1; next} /^## ${SDK_NAME}-[0-9]+.[0-9]+.[0-9]+/{f=0} f")
          gh release create "$TAG" --title "$TITLE" --notes "$CHANGELOG" --draft "${{ github.workspace }}/SDKs/PowerShell/${SDK_NAME}.zip"

  Draft-Release-DI:
    needs: ['Check-PR-Labels']
    if: needs.Check-PR-Labels.outputs.DIRECTORYINSIGHTS == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.merge_commit_sha }}
      - name: Zip SDK Directory
        run: |
          cd ${{ github.workspace }}/SDKs/PowerShell/JumpCloud.SDK.DirectoryInsights/
          zip -r ${{ github.workspace }}/SDKs/PowerShell/JumpCloud.SDK.DirectoryInsights.zip ./*
      - name: Build and Draft Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          SDK_NAME="JumpCloud.SDK.DirectoryInsights"
          MODULE_CAPTURE=$(grep -Po "ModuleVersion = '(\d+\.\d+\.\d+)'" "${{ github.workspace }}/SDKs/PowerShell/${SDK_NAME}/${SDK_NAME}.psd1")
          VERSION=$(echo "$MODULE_CAPTURE" | grep -Po "(\d+\.\d+\.\d+)")
          TITLE="${SDK_NAME}-${VERSION}"
          TAG="${SDK_NAME}-${VERSION}"
          CHANGELOG=$(cat "${{ github.workspace }}/${SDK_NAME}.md" | awk "/^## ${SDK_NAME}-${VERSION}/{f=1; next} /^## ${SDK_NAME}-[0-g]+.[0-9]+.[0-9]+/{f=0} f")
          gh release create "$TAG" --title "$TITLE" --notes "$CHANGELOG" --draft "${{ github.workspace }}/SDKs/PowerShell/${SDK_NAME}.zip"

  # =================================================================
  # == MANUAL APPROVAL GATE
  # =================================================================

  Manual-Approval-Release:
    needs: [Draft-Release-V1, Draft-Release-V2, Draft-Release-DI]
    if: always() && (needs.Draft-Release-V1.result == 'success' || needs.Draft-Release-V2.result == 'success' || needs.Draft-Release-DI.result == 'success')
    environment: PublishToPSGallery
    runs-on: ubuntu-latest
    steps:
      - name: Manual Approval for Release
        run: echo "Awaiting approval from required reviewers before continuing to publish."

  # =================================================================
  # == DEPLOY NUPKG JOBS
  # =================================================================

  Deploy-V1:
    needs: [Draft-Release-V1, Manual-Approval-Release]
    if: always() && needs.Draft-Release-V1.result == 'success' && needs.Manual-Approval-Release.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Download SDK Artifact
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          SDK_NAME="JumpCloud.SDK.V1"
          ARTIFACT_NAME="build-$SDK_NAME"
          COMMIT_SHA="${{ github.event.pull_request.head.sha }}"
          RUN_ID=$(gh run list --repo ${{ github.repository }} --workflow "PowerShell SDK CI" --commit "$COMMIT_SHA" --json databaseId --jq '.[0].databaseId')
          if [ -z "$RUN_ID" ]; then echo "::error::Could not find CI workflow run for commit $COMMIT_SHA"; exit 1; fi
          gh run download $RUN_ID --repo ${{ github.repository }} -n "$ARTIFACT_NAME"
          unzip "$SDK_NAME.zip" -d "$SDK_NAME"
      - name: Publish SDK to PSGallery
        shell: pwsh
        env:
          NuGetApiKey: ${{ secrets.NUGETAPIKEY }}
        run: |
          $SDK_NAME = "JumpCloud.SDK.V1"
          dotnet nuget add source "https://www.powershellgallery.com/api/v2/package" --name PSGallery
          $nupkgPath = (Get-ChildItem -Path "./$SDK_NAME/bin/nupkg/$($SDK_NAME)*.nupkg").FullName
          Write-Host "Nupkg Path: $nupkgPath"
          # TODO: Uncomment the following lines when ready to deploy
          # if (-not (Test-Path $nupkgPath)) { throw "Nupkg file not found for $SDK_NAME." }
          # dotnet nuget push $nupkgPath --source PSGallery --api-key $env:NuGetApiKey

  Deploy-V2:
    needs: [Draft-Release-V2, Manual-Approval-Release]
    if: always() && needs.Draft-Release-V2.result == 'success' && needs.Manual-Approval-Release.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Download SDK Artifact
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          SDK_NAME="JumpCloud.SDK.V2"
          ARTIFACT_NAME="build-$SDK_NAME"
          COMMIT_SHA="${{ github.event.pull_request.head.sha }}"
          RUN_ID=$(gh run list --repo ${{ github.repository }} --workflow "PowerShell SDK CI" --commit "$COMMIT_SHA" --json databaseId --jq '.[0].databaseId')
          if [ -z "$RUN_ID" ]; then echo "::error::Could not find CI workflow run for commit $COMMIT_SHA"; exit 1; fi
          gh run download $RUN_ID --repo ${{ github.repository }} -n "$ARTIFACT_NAME"
          unzip "$SDK_NAME.zip" -d "$SDK_NAME"
      - name: Publish SDK to PSGallery
        shell: pwsh
        env:
          NuGetApiKey: ${{ secrets.NUGETAPIKEY }}
        run: |
          $SDK_NAME = "JumpCloud.SDK.V2"
          dotnet nuget add source "https://www.powershellgallery.com/api/v2/package" --name PSGallery
          $nupkgPath = (Get-ChildItem -Path "./$SDK_NAME/bin/nupkg/$($SDK_NAME)*.nupkg").FullName
          Write-Host "Nupkg Path: $nupkgPath"
          # TODO: Uncomment the following lines when ready to deploy
          # if (-not (Test-Path $nupkgPath)) { throw "Nupkg file not found for $SDK_NAME." }
          # dotnet nuget push $nupkgPath --source PSGallery --api-key $env:NuGetApiKey

  Deploy-DI:
    needs: [Draft-Release-DI, Manual-Approval-Release]
    if: always() && needs.Draft-Release-DI.result == 'success' && needs.Manual-Approval-Release.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Download SDK Artifact
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          SDK_NAME="JumpCloud.SDK.DirectoryInsights"
          ARTIFACT_NAME="build-$SDK_NAME"
          COMMIT_SHA="${{ github.event.pull_request.head.sha }}"
          RUN_ID=$(gh run list --repo ${{ github.repository }} --workflow "PowerShell SDK CI" --commit "$COMMIT_SHA" --json databaseId --jq '.[0].databaseId')
          if [ -z "$RUN_ID" ]; then echo "::error::Could not find CI workflow run for commit $COMMIT_SHA"; exit 1; fi
          gh run download $RUN_ID --repo ${{ github.repository }} -n "$ARTIFACT_NAME"
          unzip "$SDK_NAME.zip" -d "$SDK_NAME"
      - name: Publish SDK to PSGallery
        shell: pwsh
        env:
          NuGetApiKey: ${{ secrets.NUGETAPIKEY }}
        run: |
          $SDK_NAME = "JumpCloud.SDK.DirectoryInsights"
          dotnet nuget add source "https://www.powershellgallery.com/api/v2/package" --name PSGallery
          $nupkgPath = (Get-ChildItem -Path "./$SDK_NAME/bin/nupkg/$($SDK_NAME)*.nupkg").FullName
          Write-Host "Nupkg Path: $nupkgPath"
          # TODO: Uncomment the following lines when ready to deploy
          # if (-not (Test-Path $nupkgPath)) { throw "Nupkg file not found for $SDK_NAME." }
          # dotnet nuget push $nupkgPath --source PSGallery --api-key $env:NuGetApiKey
