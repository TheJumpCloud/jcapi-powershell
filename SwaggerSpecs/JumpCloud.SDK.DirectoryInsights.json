{
  "swagger": "2.0",
  "info": {
    "version": "1.0",
    "title": "Directory Insights API (Force Refresh)",
    "description": "The purpose of this API is to query Jumpcloud Directory Insights events"
  },
  "host": "api.jumpcloud.com",
  "basePath": "/insights/directory/v1/",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "securityDefinitions": {
    "x-api-key": {
      "name": "x-api-key",
      "type": "apiKey",
      "in": "header"
    },
    "x-org-id": {
      "name": "x-org-id",
      "type": "apiKey",
      "in": "header"
    }
  },
  "paths": {
    "/events": {
      "post": {
        "operationId": "Get-Event",
        "summary": "Query Events",
        "description": "Query the API for Directory Insights events",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/EventQuery"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Array of Directory Insights events JSON objects",
            "schema": {
              "items": {
                "additionalProperties": true,
                "type": "object"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Invalid/unknown query JSON body",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized (Invalid API Key)",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "402": {
            "description": "Directory Insights is not enabled for your organization",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Technical difficulties processing your request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "x-api-key": []
          },
          {
            "x-org-id": []
          }
        ]
      }
    },
    "/events/count": {
      "post": {
        "operationId": "Get-EventCount",
        "summary": "Count Events",
        "description": "Query the API for a count of matching events",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/EventQuery"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Count of matching event rows",
            "schema": {
              "$ref": "#/definitions/EventCount"
            }
          },
          "400": {
            "description": "Invalid/unknown query JSON body",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized (Invalid API Key)",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "402": {
            "description": "Directory Insights is not enabled for your organization",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Technical difficulties processing your request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "x-api-key": []
          },
          {
            "x-org-id": []
          }
        ]
      }
    },
    "/events/distinct": {
      "post": {
        "operationId": "Get-EventDistinct",
        "summary": "Query event distinct field values",
        "tags": [
          "EventDistinctQuery"
        ],
        "description": "Query the API for a list of distinct values for a field",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/EventDistinctQuery"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of distinct field values",
            "schema": {
              "$ref": "#/definitions/EventCount"
            }
          },
          "400": {
            "description": "Invalid/unknown query JSON body",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized (Invalid API Key)",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "402": {
            "description": "Directory Insights is not enabled for your organization",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Technical difficulties processing your request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "x-api-key": []
          },
          {
            "x-org-id": []
          }
        ]
      }
    },
    "/events/interval": {
      "post": {
        "operationId": "Get-EventInterval",
        "summary": "Query event counts by bucketed by a time interval",
        "tags": [
          "EventIntervalQuery"
        ],
        "description": "Query the API for a list of counts by time interval",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/EventIntervalQuery"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of bucketed event counts",
            "schema": {
              "items": {
                "additionalProperties": true,
                "type": "object"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Invalid/unknown query JSON body",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized (Invalid API Key)",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "402": {
            "description": "Directory Insights is not enabled for your organization",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Technical difficulties processing your request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "x-api-key": []
          },
          {
            "x-org-id": []
          }
        ]
      }
    }
  },
  "responses": {
    "trait:standardErrors:400": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/errorresponse"
      }
    },
    "trait:standardErrors:401": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/errorresponse"
      }
    },
    "trait:standardErrors:403": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/errorresponse"
      }
    },
    "trait:standardErrors:404": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/errorresponse"
      }
    },
    "trait:standardErrors:409": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/errorresponse"
      }
    },
    "trait:standardErrors:500": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/errorresponse"
      }
    }
  },
  "definitions": {
    "ErrorMessage": {
      "title": "ErrorMessage",
      "properties": {
        "message": {
          "description": "Text detailed error message returned by the service",
          "type": "string"
        }
      },
      "type": "object"
    },
    "errorresponse": {
      "title": "ErrorResponse",
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "EventCount": {
      "title": "EventCount",
      "description": "EventCount JSON struct with count of matching events",
      "properties": {
        "count": {
          "format": "int64",
          "type": "integer",
          "x-go-name": "Count"
        }
      },
      "type": "object"
    },
    "EventDistinctQuery": {
      "title": "EventDistinctQuery",
      "description": "EventDistinctQuery is the users' command to search our auth logs for distinct values of the specified field",
      "properties": {
        "end_time": {
          "description": "optional query end time, UTC in RFC3339 format",
          "format": "date-time",
          "type": "string"
        },
        "field": {
          "description": "field is what they wish to query on",
          "type": "string",
          "x-go-name": "Field"
        },
        "service": {
          "description": "service name to query. Known services: systems,radius,sso,directory,ldap,all",
          "example": "[systems,radius,sso,directory,ldap,mdm,all]",
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-go-name": "Service"
        },
        "start_time": {
          "description": "query start time, UTC in RFC3339 format",
          "format": "date-time",
          "type": "string"
        }
      },
      "required": [
        "service",
        "start_time"
      ],
      "type": "object"
    },
    "EventIntervalQuery": {
      "title": "EventIntervalQuery",
      "description": "EventIntervalQuery is the users' command to search our auth logs for bucketed counts of values of the specified field",
      "properties": {
        "end_time": {
          "description": "optional query end time, UTC in RFC3339 format",
          "format": "date-time",
          "type": "string"
        },
        "interval_unit": {
          "type": "string",
          "x-go-name": "IntervalUnit"
        },
        "interval_value": {
          "description": "Interval Value. This specifies how many units you want to bucket the event counts by\noptional",
          "type": "string",
          "x-go-name": "IntervalValue"
        },
        "search_term": {
          "$ref": "#/definitions/SearchTerm"
        },
        "service": {
          "description": "service name to query. Known services: systems,radius,sso,directory,ldap,all",
          "example": "[systems,radius,sso,directory,ldap,mdm,all]",
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-go-name": "Service"
        },
        "start_time": {
          "description": "query start time, UTC in RFC3339 format",
          "format": "date-time",
          "type": "string"
        },
        "timezone": {
          "description": "TimeZone. Specify the timezone in which the user is in\noptional",
          "type": "string"
        }
      },
      "required": [
        "service",
        "start_time",
        "interval_unit"
      ],
      "type": "object"
    },
    "EventQuery": {
      "title": "EventQuery",
      "description": "EventQuery is the users' command to search our auth logs",
      "properties": {
        "end_time": {
          "description": "optional query end time, UTC in RFC3339 format",
          "format": "date-time",
          "type": "string"
        },
        "fields": {
          "description": "optional list of fields to return from query",
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-go-name": "Projection"
        },
        "limit": {
          "description": "Max number of rows to return",
          "format": "int64",
          "type": "integer",
          "x-go-name": "Limit"
        },
        "search_after": {
          "description": "Specific query to search after, see x-* response headers for next values",
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-go-name": "SearchAfter"
        },
        "search_term": {
          "$ref": "#/definitions/SearchTerm"
        },
        "service": {
          "description": "service name to query. Known services: systems,radius,sso,directory,ldap,all",
          "example": "[systems,radius,sso,directory,ldap,mdm,all]",
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-go-name": "Service"
        },
        "sort": {
          "description": "ASC or DESC order for timestamp",
          "type": "string",
          "x-go-name": "Sort"
        },
        "start_time": {
          "description": "query start time, UTC in RFC3339 format",
          "format": "date-time",
          "type": "string"
        }
      },
      "required": [
        "service",
        "start_time"
      ],
      "type": "object"
    },
    "EventServiceTimeQuery": {
      "title": "EventServiceTimeQuery",
      "description": "EventServiceTimeQuery is the base struct for most event queries\nit includes the minimum-required fields of service and start/end times",
      "properties": {
        "end_time": {
          "description": "optional query end time, UTC in RFC3339 format",
          "format": "date-time",
          "type": "string"
        },
        "service": {
          "description": "service name to query. Known services: systems,radius,sso,directory,ldap,all",
          "example": "[systems,radius,sso,directory,ldap,mdm,all]",
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-go-name": "Service"
        },
        "start_time": {
          "description": "query start time, UTC in RFC3339 format",
          "format": "date-time",
          "type": "string"
        }
      },
      "required": [
        "service",
        "start_time"
      ],
      "type": "object"
    },
    "mfa": {
      "title": "mfa",
      "type": "object",
      "properties": {
        "exclusion": {
          "type": "boolean"
        },
        "exclusionUntil": {
          "type": "string",
          "format": "date-time"
        },
        "configured": {
          "type": "boolean"
        }
      }
    },
    "SearchTerm": {
      "title": "SearchTerm",
      "description": "SearchTerm is the filter portion of the query\nit contains only one of 'and' or 'or' conjunction maps",
      "properties": {
        "and": {
          "$ref": "#/definitions/TermConjunction"
        },
        "or": {
          "$ref": "#/definitions/TermConjunction"
        }
      },
      "type": "object"
    },
    "sshkeylist": {
      "title": "SSHKeyList",
      "type": "object",
      "properties": {
        "create_date": {
          "type": "string",
          "description": "The date the SSH key was created."
        },
        "_id": {
          "type": "string",
          "description": "The ID of the SSH key."
        },
        "public_key": {
          "type": "string",
          "description": "The Public SSH key."
        },
        "name": {
          "type": "string",
          "description": "The name of the SSH key."
        }
      }
    },
    "systemuser": {
      "title": "SystemUser",
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "maxLength": 1024
        },
        "username": {
          "type": "string",
          "maxLength": 1024
        },
        "allow_public_key": {
          "type": "boolean"
        },
        "public_key": {
          "type": "string"
        },
        "ssh_keys": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/sshkeylist"
          }
        },
        "sudo": {
          "type": "boolean"
        },
        "enable_managed_uid": {
          "type": "boolean"
        },
        "unix_uid": {
          "type": "integer",
          "minimum": 1
        },
        "unix_guid": {
          "type": "integer",
          "minimum": 1
        },
        "activated": {
          "type": "boolean"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "password_expired": {
          "type": "boolean"
        },
        "account_locked": {
          "type": "boolean"
        },
        "passwordless_sudo": {
          "type": "boolean"
        },
        "externally_managed": {
          "type": "boolean"
        },
        "external_dn": {
          "type": "string"
        },
        "external_source_type": {
          "type": "string"
        },
        "firstname": {
          "type": "string",
          "maxLength": 1024
        },
        "lastname": {
          "type": "string",
          "maxLength": 1024
        },
        "ldap_binding_user": {
          "type": "boolean"
        },
        "enable_user_portal_multifactor": {
          "type": "boolean"
        },
        "associatedTagCount": {
          "type": "integer",
          "minimum": 0
        },
        "totp_enabled": {
          "type": "boolean"
        },
        "password_expiration_date": {
          "type": "string"
        },
        "attributes": {
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "created": {
          "type": "string"
        },
        "samba_service_user": {
          "type": "boolean"
        },
        "password_never_expires": {
          "type": "boolean"
        },
        "_id": {
          "type": "string"
        },
        "middlename": {
          "type": "string",
          "maxLength": 1024
        },
        "displayname": {
          "type": "string",
          "maxLength": 1024
        },
        "description": {
          "type": "string",
          "maxLength": 1024
        },
        "location": {
          "type": "string",
          "maxLength": 1024
        },
        "costCenter": {
          "type": "string",
          "maxLength": 1024
        },
        "employeeType": {
          "type": "string",
          "maxLength": 1024
        },
        "company": {
          "type": "string",
          "maxLength": 1024
        },
        "employeeIdentifier": {
          "type": "string",
          "maxLength": 256,
          "description": "Must be unique per user. "
        },
        "jobTitle": {
          "type": "string",
          "maxLength": 1024
        },
        "department": {
          "type": "string",
          "maxLength": 1024
        },
        "mfa": {
          "$ref": "#/definitions/mfa"
        },
        "suspended": {
          "type": "boolean"
        },
        "external_password_expiration_date": {
          "type": "string"
        }
      }
    },
    "systemuserputpost": {
      "title": "SystemUserPost",
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "maxLength": 1024
        },
        "username": {
          "type": "string"
        },
        "allow_public_key": {
          "type": "boolean"
        },
        "public_key": {
          "type": "string"
        },
        "sudo": {
          "type": "boolean"
        },
        "enable_managed_uid": {
          "type": "boolean"
        },
        "unix_uid": {
          "type": "integer",
          "minimum": 1
        },
        "unix_guid": {
          "type": "integer",
          "minimum": 1
        },
        "activated": {
          "type": "boolean"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "account_locked": {
          "type": "boolean"
        },
        "passwordless_sudo": {
          "type": "boolean"
        },
        "externally_managed": {
          "type": "boolean"
        },
        "external_dn": {
          "type": "string"
        },
        "external_source_type": {
          "type": "string"
        },
        "firstname": {
          "type": "string"
        },
        "lastname": {
          "type": "string"
        },
        "ldap_binding_user": {
          "type": "boolean"
        },
        "enable_user_portal_multifactor": {
          "type": "boolean"
        },
        "attributes": {
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "samba_service_user": {
          "type": "boolean"
        },
        "addresses": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "poBox": {
                "type": "string"
              },
              "extendedAddress": {
                "type": "string"
              },
              "streetAddress": {
                "type": "string"
              },
              "locality": {
                "type": "string"
              },
              "region": {
                "type": "string"
              },
              "postalCode": {
                "type": "string"
              },
              "country": {
                "type": "string"
              }
            }
          }
        },
        "jobTitle": {
          "type": "string"
        },
        "department": {
          "type": "string"
        },
        "phoneNumbers": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "number": {
                "type": "string"
              }
            }
          }
        },
        "relationships": {
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "password": {
          "type": "string"
        },
        "password_never_expires": {
          "type": "boolean"
        },
        "middlename": {
          "type": "string"
        },
        "displayname": {
          "type": "string"
        },
        "description": {
          "type": "string",
          "maxLength": 1024
        },
        "location": {
          "type": "string"
        },
        "costCenter": {
          "type": "string"
        },
        "employeeType": {
          "type": "string"
        },
        "company": {
          "type": "string"
        },
        "employeeIdentifier": {
          "type": "string",
          "maxLength": 256,
          "description": "Must be unique per user. "
        },
        "mfa": {
          "$ref": "#/definitions/mfa"
        },
        "suspended": {
          "type": "boolean"
        },
        "external_password_expiration_date": {
          "type": "string",
          "format": "date-time"
        }
      },
      "required": [
        "email",
        "username"
      ]
    },
    "TermConjunction": {
      "title": "TermConjunction",
      "type": "object",
      "additionalProperties": true
    }
  }
}