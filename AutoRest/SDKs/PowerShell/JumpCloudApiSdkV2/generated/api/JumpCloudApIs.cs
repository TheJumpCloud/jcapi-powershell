namespace JumpCloudApiSdkV2
{
    using static JumpCloudApiSdkV2.Runtime.Extensions;

    /// <summary>
    /// Low-level API implementation for the JumpCloud APIs service.
    /// </summary>
    public partial class JumpCloudApIs
    {

        /// <summary>
        /// The endpoint allows you to create a bulk job to asynchronously create users. See [Create a System User](https://docs.jumpcloud.com/1.0/systemusers/create-a-system-user)
        /// for full list of attributes.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/bulk/users \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '[
        /// {
        /// "email":"{email}",
        /// "firstname":"{firstname}",
        /// "lastname":"{firstname}",
        /// "username":"{username}",
        /// "attributes":[
        /// {"name":"EmployeeID","value":"0000"},
        /// {"name":"Custom","value":"attribute"}
        /// ]
        /// }
        /// ]
        /// ```
        /// </summary>
        /// <param name="body"></param>
        /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task CreateBulkUserJob(JumpCloudApiSdkV2.Models.IBulkUserCreate[] body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IJobId>, global::System.Threading.Tasks.Task> onCreated, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/bulk/users"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? new JumpCloudApiSdkV2.Runtime.Json.XNodeArray(null != body ? new JumpCloudApiSdkV2.Runtime.Json.XNodeArray(global::System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Select(body, (__x) => __x?.ToJson(null, JumpCloudApiSdkV2.Runtime.SerializationMode.None)))) : null).ToString() : global::System.String.Empty, global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.CreateBulkUserJob_Call(request,onCreated,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return the results of particular user import or update job request.
        /// #### Sample Request
        /// ```
        /// curl -X GET \
        /// https://console.jumpcloud.com/api/v2/bulk/users/{ImportJobID}/results \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="jobId"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task CreateBulkUserJobResults(string jobId, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IJobWorkresult[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/bulk/users/"
                        + global::System.Uri.EscapeDataString(jobId)
                        + "/results"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.CreateBulkUserJobResults_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return the results of particular user import or update job request.
        /// #### Sample Request
        /// ```
        /// curl -X GET \
        /// https://console.jumpcloud.com/api/v2/bulk/users/{ImportJobID}/results \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task CreateBulkUserJobResultsViaIdentity(global::System.String viaIdentity, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IJobWorkresult[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/bulk/users/(?<job_id>[^/]+)/results$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/bulk/users/{job_id}/results'");
                }

                // replace URI parameters with values from identity
                var jobId = _match.Groups["job_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/bulk/users/"
                        + jobId
                        + "/results"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.CreateBulkUserJobResults_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="CreateBulkUserJobResults" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task CreateBulkUserJobResults_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IJobWorkresult[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IJobWorkresult[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IJobWorkresult) (JumpCloudApiSdkV2.Models.JobWorkresult.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="CreateBulkUserJobResults" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="jobId"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task CreateBulkUserJobResults_Validate(string jobId, int? limit, int? skip, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(jobId),jobId);
            }
        }

        /// <summary>Actual wire call for <see cref="CreateBulkUserJob" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task CreateBulkUserJob_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IJobId>, global::System.Threading.Tasks.Task> onCreated, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.Created:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onCreated(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.JobId.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="CreateBulkUserJob" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="body"></param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task CreateBulkUserJob_Validate(JumpCloudApiSdkV2.Models.IBulkUserCreate[] body, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                if (body != null ) {
                        for (int __i = 0; __i < body.Length; __i++) {
                          await eventListener.AssertObjectIsValid($"body[{__i}]", body[__i]);
                        }
                      }
            }
        }

        /// <summary>
        /// This endpoint allows you to create a new System Group.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/systemgroups \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "name": "{Group_Name}"
        /// }'
        /// ```
        /// </summary>
        /// <param name="body">SystemGroupData</param>
        /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task CreateGroupSystem(JumpCloudApiSdkV2.Models.ISystemGroupData body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemGroup>, global::System.Threading.Tasks.Task> onCreated, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systemgroups"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.CreateGroupSystem_Call(request,onCreated,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="CreateGroupSystem" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task CreateGroupSystem_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemGroup>, global::System.Threading.Tasks.Task> onCreated, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.Created:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onCreated(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.SystemGroup.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="CreateGroupSystem" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="body">SystemGroupData</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task CreateGroupSystem_Validate(JumpCloudApiSdkV2.Models.ISystemGroupData body, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(body), body);
                await eventListener.AssertObjectIsValid(nameof(body), body);
            }
        }

        /// <summary>
        /// This endpoint allows you to create a new User Group.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/usergroups \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "name": "{Group_Name}"
        /// }'
        /// ```
        /// </summary>
        /// <param name="body">UserGroupPost</param>
        /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task CreateGroupUser(JumpCloudApiSdkV2.Models.IUserGroupPost body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IUserGroup>, global::System.Threading.Tasks.Task> onCreated, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/usergroups"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.CreateGroupUser_Call(request,onCreated,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="CreateGroupUser" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task CreateGroupUser_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IUserGroup>, global::System.Threading.Tasks.Task> onCreated, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.Created:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onCreated(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.UserGroup.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="CreateGroupUser" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="body">UserGroupPost</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task CreateGroupUser_Validate(JumpCloudApiSdkV2.Models.IUserGroupPost body, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(body), body);
                await eventListener.AssertObjectIsValid(nameof(body), body);
            }
        }

        /// <summary>
        /// This endpoint allows you to create a samba domain for an LDAP server.
        /// ##### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/ldapservers/{LDAP_ID}/sambadomains \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "sid":"{SID_ID}",
        /// "name":"{WORKGROUP_NAME}"
        /// }'
        /// ```
        /// </summary>
        /// <param name="ldapserverId">Unique identifier of the LDAP server.</param>
        /// <param name="contentType"></param>
        /// <param name="accept"></param>
        /// <param name="body">Samba Domain Input</param>
        /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task CreateLdapServerSambaDomain(string ldapserverId, string contentType, string accept, JumpCloudApiSdkV2.Models.ISambaDomainInput body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISambaDomainOutput>, global::System.Threading.Tasks.Task> onCreated, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/ldapservers/"
                        + global::System.Uri.EscapeDataString(ldapserverId)
                        + "/sambadomains"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // add headers parameters
                if (null != contentType)
                {
                    request.Headers.Add("Content-Type",contentType);
                }
                if (null != accept)
                {
                    request.Headers.Add("Accept",accept);
                }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.CreateLdapServerSambaDomain_Call(request,onCreated,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint allows you to create a samba domain for an LDAP server.
        /// ##### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/ldapservers/{LDAP_ID}/sambadomains \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "sid":"{SID_ID}",
        /// "name":"{WORKGROUP_NAME}"
        /// }'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="contentType"></param>
        /// <param name="accept"></param>
        /// <param name="body">Samba Domain Input</param>
        /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task CreateLdapServerSambaDomainViaIdentity(global::System.String viaIdentity, string contentType, string accept, JumpCloudApiSdkV2.Models.ISambaDomainInput body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISambaDomainOutput>, global::System.Threading.Tasks.Task> onCreated, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/ldapservers/(?<ldapserver_id>[^/]+)/sambadomains$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/ldapservers/{ldapserver_id}/sambadomains'");
                }

                // replace URI parameters with values from identity
                var ldapserverId = _match.Groups["ldapserver_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/ldapservers/"
                        + ldapserverId
                        + "/sambadomains"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // add headers parameters
                if (null != contentType)
                {
                    request.Headers.Add("Content-Type",contentType);
                }
                if (null != accept)
                {
                    request.Headers.Add("Accept",accept);
                }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.CreateLdapServerSambaDomain_Call(request,onCreated,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="CreateLdapServerSambaDomain" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task CreateLdapServerSambaDomain_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISambaDomainOutput>, global::System.Threading.Tasks.Task> onCreated, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.Created:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onCreated(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.SambaDomainOutput.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="CreateLdapServerSambaDomain" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="ldapserverId">Unique identifier of the LDAP server.</param>
        /// <param name="contentType"></param>
        /// <param name="accept"></param>
        /// <param name="body">Samba Domain Input</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task CreateLdapServerSambaDomain_Validate(string ldapserverId, string contentType, string accept, JumpCloudApiSdkV2.Models.ISambaDomainInput body, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(ldapserverId),ldapserverId);
                await eventListener.AssertNotNull(nameof(contentType),contentType);
                await eventListener.AssertNotNull(nameof(accept),accept);
                await eventListener.AssertNotNull(nameof(body), body);
                await eventListener.AssertObjectIsValid(nameof(body), body);
            }
        }

        /// <summary>
        /// This endpoint allows you to create a policy. Given the amount of configurable parameters required to create a Policy,
        /// we suggest you use the JumpCloud Admin Console to create new policies.
        /// ##### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/policies \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// {Policy_Parameters}
        /// }'
        /// ```
        /// </summary>
        /// <param name="body">An instance of a policy template.</param>
        /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task CreatePolicy(JumpCloudApiSdkV2.Models.IPolicyRequest body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IPolicyWithDetails>, global::System.Threading.Tasks.Task> onCreated, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/policies"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.CreatePolicy_Call(request,onCreated,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="CreatePolicy" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task CreatePolicy_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IPolicyWithDetails>, global::System.Threading.Tasks.Task> onCreated, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.Created:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onCreated(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.PolicyWithDetails.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="CreatePolicy" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="body">An instance of a policy template.</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task CreatePolicy_Validate(JumpCloudApiSdkV2.Models.IPolicyRequest body, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(body), body);
                await eventListener.AssertObjectIsValid(nameof(body), body);
            }
        }

        /// <summary>
        /// This endpoint allows you to create a provider administrator. You must be associated to the provider to use this route.
        /// **Sample Request**
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/providers/{ProviderID}/administrators \
        /// -H 'Accept: application/json' \
        /// -H 'Context-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "email":"{ADMIN_EMAIL}"
        /// }'
        /// ```
        /// </summary>
        /// <param name="providerId"></param>
        /// <param name="body">ProviderAdminReq</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onUnauthorized">a delegate that is called when the remote service returns 401 (Unauthorized).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task CreateProviderAdmin(string providerId, JumpCloudApiSdkV2.Models.IProviderAdminReq body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IAdministrator>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IPathsProvidersProviderIdAdministratorsPostResponses401ContentApplicationJsonSchema>, global::System.Threading.Tasks.Task> onUnauthorized, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/providers/"
                        + global::System.Uri.EscapeDataString(providerId)
                        + "/administrators"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.CreateProviderAdmin_Call(request,onOk,onUnauthorized,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint allows you to create a provider administrator. You must be associated to the provider to use this route.
        /// **Sample Request**
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/providers/{ProviderID}/administrators \
        /// -H 'Accept: application/json' \
        /// -H 'Context-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "email":"{ADMIN_EMAIL}"
        /// }'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="body">ProviderAdminReq</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onUnauthorized">a delegate that is called when the remote service returns 401 (Unauthorized).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task CreateProviderAdminViaIdentity(global::System.String viaIdentity, JumpCloudApiSdkV2.Models.IProviderAdminReq body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IAdministrator>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IPathsProvidersProviderIdAdministratorsPostResponses401ContentApplicationJsonSchema>, global::System.Threading.Tasks.Task> onUnauthorized, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/providers/(?<provider_id>[^/]+)/administrators$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/providers/{provider_id}/administrators'");
                }

                // replace URI parameters with values from identity
                var providerId = _match.Groups["provider_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/providers/"
                        + providerId
                        + "/administrators"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.CreateProviderAdmin_Call(request,onOk,onUnauthorized,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="CreateProviderAdmin" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onUnauthorized">a delegate that is called when the remote service returns 401 (Unauthorized).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task CreateProviderAdmin_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IAdministrator>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IPathsProvidersProviderIdAdministratorsPostResponses401ContentApplicationJsonSchema>, global::System.Threading.Tasks.Task> onUnauthorized, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.Administrator.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.Unauthorized:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onUnauthorized(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.PathsProvidersProviderIdAdministratorsPostResponses401ContentApplicationJsonSchema.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="CreateProviderAdmin" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="providerId"></param>
        /// <param name="body">ProviderAdminReq</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task CreateProviderAdmin_Validate(string providerId, JumpCloudApiSdkV2.Models.IProviderAdminReq body, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(providerId),providerId);
                await eventListener.AssertNotNull(nameof(body), body);
                await eventListener.AssertObjectIsValid(nameof(body), body);
            }
        }

        /// <summary>
        /// This endpoint allows you to create a translation rule for a specific G Suite instance. These rules specify how JumpCloud
        /// attributes translate to [G Suite Admin SDK](https://developers.google.com/admin-sdk/directory/) attributes.
        /// ##### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/gsuites/{gsuite_id}/translationrules \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// {Translation Rule Parameters}
        /// }'
        /// ```
        /// </summary>
        /// <param name="gsuiteId"></param>
        /// <param name="body">G Suite Translation Rule Request</param>
        /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task CreateTranslationRuleGSuite(string gsuiteId, JumpCloudApiSdkV2.Models.IGSuiteTranslationRuleRequest body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGSuiteTranslationRule>, global::System.Threading.Tasks.Task> onCreated, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/gsuites/"
                        + global::System.Uri.EscapeDataString(gsuiteId)
                        + "/translationrules"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.CreateTranslationRuleGSuite_Call(request,onCreated,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint allows you to create a translation rule for a specific G Suite instance. These rules specify how JumpCloud
        /// attributes translate to [G Suite Admin SDK](https://developers.google.com/admin-sdk/directory/) attributes.
        /// ##### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/gsuites/{gsuite_id}/translationrules \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// {Translation Rule Parameters}
        /// }'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="body">G Suite Translation Rule Request</param>
        /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task CreateTranslationRuleGSuiteViaIdentity(global::System.String viaIdentity, JumpCloudApiSdkV2.Models.IGSuiteTranslationRuleRequest body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGSuiteTranslationRule>, global::System.Threading.Tasks.Task> onCreated, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/gsuites/(?<gsuite_id>[^/]+)/translationrules$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/gsuites/{gsuite_id}/translationrules'");
                }

                // replace URI parameters with values from identity
                var gsuiteId = _match.Groups["gsuite_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/gsuites/"
                        + gsuiteId
                        + "/translationrules"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.CreateTranslationRuleGSuite_Call(request,onCreated,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="CreateTranslationRuleGSuite" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task CreateTranslationRuleGSuite_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGSuiteTranslationRule>, global::System.Threading.Tasks.Task> onCreated, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.Created:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onCreated(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.GSuiteTranslationRule.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="CreateTranslationRuleGSuite" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="gsuiteId"></param>
        /// <param name="body">G Suite Translation Rule Request</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task CreateTranslationRuleGSuite_Validate(string gsuiteId, JumpCloudApiSdkV2.Models.IGSuiteTranslationRuleRequest body, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(gsuiteId),gsuiteId);
                await eventListener.AssertNotNull(nameof(body), body);
                await eventListener.AssertObjectIsValid(nameof(body), body);
            }
        }

        /// <summary>
        /// This endpoint allows you to create a translation rule for a specific Office 365 instance. These rules specify how JumpCloud
        /// attributes translate to [Microsoft Graph](https://developer.microsoft.com/en-us/graph) attributes.
        /// ##### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/office365s/{office365_id}/translationrules \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// {Translation Rule Parameters}
        /// }'
        /// ```
        /// </summary>
        /// <param name="office365Id"></param>
        /// <param name="body">Office 365 Translation Rule Request</param>
        /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task CreateTranslationRuleOffice365(string office365Id, JumpCloudApiSdkV2.Models.IOffice365TranslationRuleRequest body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IOffice365TranslationRule>, global::System.Threading.Tasks.Task> onCreated, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/office365s/"
                        + global::System.Uri.EscapeDataString(office365Id)
                        + "/translationrules"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.CreateTranslationRuleOffice365_Call(request,onCreated,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint allows you to create a translation rule for a specific Office 365 instance. These rules specify how JumpCloud
        /// attributes translate to [Microsoft Graph](https://developer.microsoft.com/en-us/graph) attributes.
        /// ##### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/office365s/{office365_id}/translationrules \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// {Translation Rule Parameters}
        /// }'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="body">Office 365 Translation Rule Request</param>
        /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task CreateTranslationRuleOffice365ViaIdentity(global::System.String viaIdentity, JumpCloudApiSdkV2.Models.IOffice365TranslationRuleRequest body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IOffice365TranslationRule>, global::System.Threading.Tasks.Task> onCreated, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/office365s/(?<office365_id>[^/]+)/translationrules$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/office365s/{office365_id}/translationrules'");
                }

                // replace URI parameters with values from identity
                var office365Id = _match.Groups["office365_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/office365s/"
                        + office365Id
                        + "/translationrules"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.CreateTranslationRuleOffice365_Call(request,onCreated,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="CreateTranslationRuleOffice365" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task CreateTranslationRuleOffice365_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IOffice365TranslationRule>, global::System.Threading.Tasks.Task> onCreated, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.Created:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onCreated(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.Office365TranslationRule.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="CreateTranslationRuleOffice365" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="office365Id"></param>
        /// <param name="body">Office 365 Translation Rule Request</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task CreateTranslationRuleOffice365_Validate(string office365Id, JumpCloudApiSdkV2.Models.IOffice365TranslationRuleRequest body, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(office365Id),office365Id);
                await eventListener.AssertNotNull(nameof(body), body);
                await eventListener.AssertObjectIsValid(nameof(body), body);
            }
        }

        /// <summary>
        /// This endpoint allows you to create a new workday instance.
        /// You must supply a username and password for `Basic Authentication` that is the same as your WorkDay Integrator System
        /// User. Failure to provide these credentials will result in the request being rejected.
        /// Currently `O-Auth` isn't a supported authentication protocol for WorkDay, but will be in the future.
        /// Currently, only one instance is allowed and it must be `Workday Import`.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/workdays/ \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "name": "Workday2",
        /// "reportUrl":"https://workday.com/ccx/service/customreport2/gms/user/reportname?format=json",
        /// "auth": {
        /// "basic": {
        /// "username": "someDeveloper",
        /// "password": "notTheRealPassword"
        /// }
        /// }
        /// }'
        /// ```
        /// </summary>
        /// <param name="body">Workday Input</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task CreateWorkday(JumpCloudApiSdkV2.Models.IWorkdayInput body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IWorkdayOutput>, global::System.Threading.Tasks.Task> onCreated, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/workdays"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.CreateWorkday_Call(request,onOk,onCreated,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint adds an authorization method to a workday instance.
        /// You must supply a username and password for `Basic Authentication` that is the same as your WorkDay Integrator System
        /// User. Failure to provide these credentials will result in the request being rejected.
        /// Currently `O-Auth` isn't a supported authentication protocol for WorkDay, but will be in the future.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/workdays/{WorkDayID}/auth \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "auth":{
        /// "basic": {
        /// "username": "someDeveloper",
        /// "password": "notTheRealPassword"
        /// }
        /// }
        /// }'
        /// ```
        /// </summary>
        /// <param name="workdayId"></param>
        /// <param name="body">Auth Input Object</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task CreateWorkdayAuthorization(string workdayId, JumpCloudApiSdkV2.Models.IAuthInputObject body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/workdays/"
                        + global::System.Uri.EscapeDataString(workdayId)
                        + "/auth"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.CreateWorkdayAuthorization_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint adds an authorization method to a workday instance.
        /// You must supply a username and password for `Basic Authentication` that is the same as your WorkDay Integrator System
        /// User. Failure to provide these credentials will result in the request being rejected.
        /// Currently `O-Auth` isn't a supported authentication protocol for WorkDay, but will be in the future.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/workdays/{WorkDayID}/auth \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "auth":{
        /// "basic": {
        /// "username": "someDeveloper",
        /// "password": "notTheRealPassword"
        /// }
        /// }
        /// }'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="body">Auth Input Object</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task CreateWorkdayAuthorizationViaIdentity(global::System.String viaIdentity, JumpCloudApiSdkV2.Models.IAuthInputObject body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/workdays/(?<workday_id>[^/]+)/auth$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/workdays/{workday_id}/auth'");
                }

                // replace URI parameters with values from identity
                var workdayId = _match.Groups["workday_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/workdays/"
                        + workdayId
                        + "/auth"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.CreateWorkdayAuthorization_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="CreateWorkdayAuthorization" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task CreateWorkdayAuthorization_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.NoContent:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onNoContent(_response);
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="CreateWorkdayAuthorization" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="workdayId"></param>
        /// <param name="body">Auth Input Object</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task CreateWorkdayAuthorization_Validate(string workdayId, JumpCloudApiSdkV2.Models.IAuthInputObject body, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(workdayId),workdayId);
                await eventListener.AssertNotNull(nameof(body), body);
                await eventListener.AssertObjectIsValid(nameof(body), body);
            }
        }

        /// <summary>Actual wire call for <see cref="CreateWorkday" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task CreateWorkday_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IWorkdayOutput>, global::System.Threading.Tasks.Task> onCreated, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response);
                            break;
                        }
                        case global::System.Net.HttpStatusCode.Created:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onCreated(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.WorkdayOutput.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="CreateWorkday" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="body">Workday Input</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task CreateWorkday_Validate(JumpCloudApiSdkV2.Models.IWorkdayInput body, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(body), body);
                await eventListener.AssertObjectIsValid(nameof(body), body);
            }
        }

        /// <summary>
        /// This endpoint allows you to delete a samba domain from an LDAP server.
        /// ##### Sample Request
        /// ```
        /// curl -X DELETE https://console.jumpcloud.com/api/v2/ldapservers/{LDAP_ID}/sambadomains/{SAMBA_ID} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="ldapserverId">Unique identifier of the LDAP server.</param>
        /// <param name="id">Unique identifier of the samba domain.</param>
        /// <param name="contentType"></param>
        /// <param name="accept"></param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task DeleteLdapServerSambaDomain(string ldapserverId, string id, string contentType, string accept, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<string>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/ldapservers/"
                        + global::System.Uri.EscapeDataString(ldapserverId)
                        + "/sambadomains/"
                        + global::System.Uri.EscapeDataString(id)

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Delete, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // add headers parameters
                if (null != contentType)
                {
                    request.Headers.Add("Content-Type",contentType);
                }
                if (null != accept)
                {
                    request.Headers.Add("Accept",accept);
                }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.DeleteLdapServerSambaDomain_Call(request,onOk,onNoContent,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint allows you to delete a samba domain from an LDAP server.
        /// ##### Sample Request
        /// ```
        /// curl -X DELETE https://console.jumpcloud.com/api/v2/ldapservers/{LDAP_ID}/sambadomains/{SAMBA_ID} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="contentType"></param>
        /// <param name="accept"></param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task DeleteLdapServerSambaDomainViaIdentity(global::System.String viaIdentity, string contentType, string accept, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<string>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/ldapservers/(?<ldapserver_id>[^/]+)/sambadomains/(?<id>[^/]+)$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/ldapservers/{ldapserver_id}/sambadomains/{id}'");
                }

                // replace URI parameters with values from identity
                var ldapserverId = _match.Groups["ldapserver_id"].Value;
                var id = _match.Groups["id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/ldapservers/"
                        + ldapserverId
                        + "/sambadomains/"
                        + id

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Delete, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // add headers parameters
                if (null != contentType)
                {
                    request.Headers.Add("Content-Type",contentType);
                }
                if (null != accept)
                {
                    request.Headers.Add("Accept",accept);
                }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.DeleteLdapServerSambaDomain_Call(request,onOk,onNoContent,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="DeleteLdapServerSambaDomain" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task DeleteLdapServerSambaDomain_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<string>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result) is JumpCloudApiSdkV2.Runtime.Json.JsonString __y ? (string)(__y.ToString()) : null));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.NoContent:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onNoContent(_response);
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="DeleteLdapServerSambaDomain" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="ldapserverId">Unique identifier of the LDAP server.</param>
        /// <param name="id">Unique identifier of the samba domain.</param>
        /// <param name="contentType"></param>
        /// <param name="accept"></param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task DeleteLdapServerSambaDomain_Validate(string ldapserverId, string id, string contentType, string accept, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(ldapserverId),ldapserverId);
                await eventListener.AssertNotNull(nameof(id),id);
                await eventListener.AssertNotNull(nameof(contentType),contentType);
                await eventListener.AssertNotNull(nameof(accept),accept);
            }
        }

        /// <summary>
        /// This endpoint allows you to delete a policy.
        /// #### Sample Request
        /// ```
        /// curl -X DELETE https://console.jumpcloud.com/api/v2/policies/5a837ecd232e110d4291e6b9 \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="id">ObjectID of the Policy object.</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task DeletePolicy(string id, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/policies/"
                        + global::System.Uri.EscapeDataString(id)

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Delete, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.DeletePolicy_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint allows you to delete a policy.
        /// #### Sample Request
        /// ```
        /// curl -X DELETE https://console.jumpcloud.com/api/v2/policies/5a837ecd232e110d4291e6b9 \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task DeletePolicyViaIdentity(global::System.String viaIdentity, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/policies/(?<id>[^/]+)$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/policies/{id}'");
                }

                // replace URI parameters with values from identity
                var id = _match.Groups["id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/policies/"
                        + id

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Delete, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.DeletePolicy_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="DeletePolicy" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task DeletePolicy_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.NoContent:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onNoContent(_response);
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="DeletePolicy" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="id">ObjectID of the Policy object.</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task DeletePolicy_Validate(string id, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(id),id);
            }
        }

        /// <summary>
        /// This endpoint allows you to delete a translation rule for a specific G Suite instance. These rules specify how JumpCloud
        /// attributes translate to [G Suite Admin SDK](https://developers.google.com/admin-sdk/directory/) attributes.
        /// #### Sample Request
        /// ```
        /// curl -X DELETE https://console.jumpcloud.com/api/v2/gsuites/{gsuite_id}/translationrules/{id} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="gsuiteId"></param>
        /// <param name="id"></param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task DeleteTranslationRuleGSuite(string gsuiteId, string id, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/gsuites/"
                        + global::System.Uri.EscapeDataString(gsuiteId)
                        + "/translationrules/"
                        + global::System.Uri.EscapeDataString(id)

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Delete, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.DeleteTranslationRuleGSuite_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint allows you to delete a translation rule for a specific G Suite instance. These rules specify how JumpCloud
        /// attributes translate to [G Suite Admin SDK](https://developers.google.com/admin-sdk/directory/) attributes.
        /// #### Sample Request
        /// ```
        /// curl -X DELETE https://console.jumpcloud.com/api/v2/gsuites/{gsuite_id}/translationrules/{id} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task DeleteTranslationRuleGSuiteViaIdentity(global::System.String viaIdentity, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/gsuites/(?<gsuite_id>[^/]+)/translationrules/(?<id>[^/]+)$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/gsuites/{gsuite_id}/translationrules/{id}'");
                }

                // replace URI parameters with values from identity
                var gsuiteId = _match.Groups["gsuite_id"].Value;
                var id = _match.Groups["id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/gsuites/"
                        + gsuiteId
                        + "/translationrules/"
                        + id

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Delete, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.DeleteTranslationRuleGSuite_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="DeleteTranslationRuleGSuite" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task DeleteTranslationRuleGSuite_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.NoContent:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onNoContent(_response);
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="DeleteTranslationRuleGSuite" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="gsuiteId"></param>
        /// <param name="id"></param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task DeleteTranslationRuleGSuite_Validate(string gsuiteId, string id, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(gsuiteId),gsuiteId);
                await eventListener.AssertNotNull(nameof(id),id);
            }
        }

        /// <summary>
        /// This endpoint allows you to delete a translation rule for a specific Office 365 instance. These rules specify how JumpCloud
        /// attributes translate to [Microsoft Graph](https://developer.microsoft.com/en-us/graph) attributes.
        /// #### Sample Request
        /// ```
        /// curl -X DELETE https://console.jumpcloud.com/api/v2/office365s/{office365_id}/translationrules/{id} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="office365Id"></param>
        /// <param name="id"></param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task DeleteTranslationRuleOffice365(string office365Id, string id, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/office365s/"
                        + global::System.Uri.EscapeDataString(office365Id)
                        + "/translationrules/"
                        + global::System.Uri.EscapeDataString(id)

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Delete, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.DeleteTranslationRuleOffice365_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint allows you to delete a translation rule for a specific Office 365 instance. These rules specify how JumpCloud
        /// attributes translate to [Microsoft Graph](https://developer.microsoft.com/en-us/graph) attributes.
        /// #### Sample Request
        /// ```
        /// curl -X DELETE https://console.jumpcloud.com/api/v2/office365s/{office365_id}/translationrules/{id} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task DeleteTranslationRuleOffice365ViaIdentity(global::System.String viaIdentity, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/office365s/(?<office365_id>[^/]+)/translationrules/(?<id>[^/]+)$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/office365s/{office365_id}/translationrules/{id}'");
                }

                // replace URI parameters with values from identity
                var office365Id = _match.Groups["office365_id"].Value;
                var id = _match.Groups["id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/office365s/"
                        + office365Id
                        + "/translationrules/"
                        + id

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Delete, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.DeleteTranslationRuleOffice365_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="DeleteTranslationRuleOffice365" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task DeleteTranslationRuleOffice365_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.NoContent:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onNoContent(_response);
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="DeleteTranslationRuleOffice365" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="office365Id"></param>
        /// <param name="id"></param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task DeleteTranslationRuleOffice365_Validate(string office365Id, string id, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(office365Id),office365Id);
                await eventListener.AssertNotNull(nameof(id),id);
            }
        }

        /// <summary>
        /// This endpoint returns a specific G Suite.
        /// ##### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/gsuites/{GSUITE_ID} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="id">Unique identifier of the GSuite.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task GetGSuite(string id, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGsuiteOutput>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/gsuites/"
                        + global::System.Uri.EscapeDataString(id)

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.GetGSuite_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns a specific G Suite.
        /// ##### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/gsuites/{GSUITE_ID} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task GetGSuiteViaIdentity(global::System.String viaIdentity, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGsuiteOutput>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/gsuites/(?<id>[^/]+)$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/gsuites/{id}'");
                }

                // replace URI parameters with values from identity
                var id = _match.Groups["id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/gsuites/"
                        + id

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.GetGSuite_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="GetGSuite" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task GetGSuite_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGsuiteOutput>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.GsuiteOutput.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="GetGSuite" /> method. Call this like the actual call, but you will get validation events
        /// back.
        /// </summary>
        /// <param name="id">Unique identifier of the GSuite.</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task GetGSuite_Validate(string id, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(id),id);
            }
        }

        /// <summary>
        /// This endpoint returns a specific LDAP server.
        /// ##### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/ldapservers/{LDAP_ID} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="id">Unique identifier of the LDAP server.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task GetLdapServer(string id, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ILdapServerOutput>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/ldapservers/"
                        + global::System.Uri.EscapeDataString(id)

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.GetLdapServer_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns a specific samba domain for an LDAP server.
        /// ##### Sample Request
        /// ```
        /// curl -X GET \
        /// https://console.jumpcloud.com/api/v2/ldapservers/ldapservers/{LDAP_ID}/sambadomains/{SAMBA_ID} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="ldapserverId">Unique identifier of the LDAP server.</param>
        /// <param name="id">Unique identifier of the samba domain.</param>
        /// <param name="contentType"></param>
        /// <param name="accept"></param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task GetLdapServerSambaDomain(string ldapserverId, string id, string contentType, string accept, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISambaDomainOutput>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/ldapservers/"
                        + global::System.Uri.EscapeDataString(ldapserverId)
                        + "/sambadomains/"
                        + global::System.Uri.EscapeDataString(id)

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // add headers parameters
                if (null != contentType)
                {
                    request.Headers.Add("Content-Type",contentType);
                }
                if (null != accept)
                {
                    request.Headers.Add("Accept",accept);
                }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.GetLdapServerSambaDomain_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns a specific samba domain for an LDAP server.
        /// ##### Sample Request
        /// ```
        /// curl -X GET \
        /// https://console.jumpcloud.com/api/v2/ldapservers/ldapservers/{LDAP_ID}/sambadomains/{SAMBA_ID} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="contentType"></param>
        /// <param name="accept"></param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task GetLdapServerSambaDomainViaIdentity(global::System.String viaIdentity, string contentType, string accept, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISambaDomainOutput>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/ldapservers/(?<ldapserver_id>[^/]+)/sambadomains/(?<id>[^/]+)$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/ldapservers/{ldapserver_id}/sambadomains/{id}'");
                }

                // replace URI parameters with values from identity
                var ldapserverId = _match.Groups["ldapserver_id"].Value;
                var id = _match.Groups["id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/ldapservers/"
                        + ldapserverId
                        + "/sambadomains/"
                        + id

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // add headers parameters
                if (null != contentType)
                {
                    request.Headers.Add("Content-Type",contentType);
                }
                if (null != accept)
                {
                    request.Headers.Add("Accept",accept);
                }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.GetLdapServerSambaDomain_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="GetLdapServerSambaDomain" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task GetLdapServerSambaDomain_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISambaDomainOutput>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.SambaDomainOutput.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="GetLdapServerSambaDomain" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="ldapserverId">Unique identifier of the LDAP server.</param>
        /// <param name="id">Unique identifier of the samba domain.</param>
        /// <param name="contentType"></param>
        /// <param name="accept"></param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task GetLdapServerSambaDomain_Validate(string ldapserverId, string id, string contentType, string accept, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(ldapserverId),ldapserverId);
                await eventListener.AssertNotNull(nameof(id),id);
                await eventListener.AssertNotNull(nameof(contentType),contentType);
                await eventListener.AssertNotNull(nameof(accept),accept);
            }
        }

        /// <summary>
        /// This endpoint returns a specific LDAP server.
        /// ##### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/ldapservers/{LDAP_ID} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task GetLdapServerViaIdentity(global::System.String viaIdentity, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ILdapServerOutput>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/ldapservers/(?<id>[^/]+)$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/ldapservers/{id}'");
                }

                // replace URI parameters with values from identity
                var id = _match.Groups["id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/ldapservers/"
                        + id

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.GetLdapServer_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="GetLdapServer" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task GetLdapServer_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ILdapServerOutput>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.LdapServerOutput.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="GetLdapServer" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="id">Unique identifier of the LDAP server.</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task GetLdapServer_Validate(string id, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(id),id);
            }
        }

        /// <summary>
        /// This endpoint returns a specific policy.
        /// ###### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/policies/{PolicyID} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="id">ObjectID of the Policy object.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task GetPolicy(string id, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IPolicyWithDetails>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/policies/"
                        + global::System.Uri.EscapeDataString(id)

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.GetPolicy_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return the policy results for a specific policy.
        /// ##### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/policyresults/{Policy_ID} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="id">ObjectID of the Policy Result.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task GetPolicyResult(string id, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IPolicyResult>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/policyresults/"
                        + global::System.Uri.EscapeDataString(id)

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.GetPolicyResult_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return the policy results for a specific policy.
        /// ##### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/policyresults/{Policy_ID} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task GetPolicyResultViaIdentity(global::System.String viaIdentity, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IPolicyResult>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/policyresults/(?<id>[^/]+)$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/policyresults/{id}'");
                }

                // replace URI parameters with values from identity
                var id = _match.Groups["id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/policyresults/"
                        + id

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.GetPolicyResult_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="GetPolicyResult" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task GetPolicyResult_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IPolicyResult>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.PolicyResult.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="GetPolicyResult" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="id">ObjectID of the Policy Result.</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task GetPolicyResult_Validate(string id, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(id),id);
            }
        }

        /// <summary>
        /// This endpoint returns a specific policy template.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/policies/{Policy_ID}\
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="id">ObjectID of the Policy Template.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task GetPolicyTemplate(string id, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IPolicyTemplateWithDetails>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/policytemplates/"
                        + global::System.Uri.EscapeDataString(id)

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.GetPolicyTemplate_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns a specific policy template.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/policies/{Policy_ID}\
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task GetPolicyTemplateViaIdentity(global::System.String viaIdentity, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IPolicyTemplateWithDetails>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/policytemplates/(?<id>[^/]+)$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/policytemplates/{id}'");
                }

                // replace URI parameters with values from identity
                var id = _match.Groups["id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/policytemplates/"
                        + id

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.GetPolicyTemplate_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="GetPolicyTemplate" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task GetPolicyTemplate_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IPolicyTemplateWithDetails>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.PolicyTemplateWithDetails.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="GetPolicyTemplate" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="id">ObjectID of the Policy Template.</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task GetPolicyTemplate_Validate(string id, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(id),id);
            }
        }

        /// <summary>
        /// This endpoint returns a specific policy.
        /// ###### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/policies/{PolicyID} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task GetPolicyViaIdentity(global::System.String viaIdentity, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IPolicyWithDetails>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/policies/(?<id>[^/]+)$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/policies/{id}'");
                }

                // replace URI parameters with values from identity
                var id = _match.Groups["id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/policies/"
                        + id

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.GetPolicy_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="GetPolicy" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task GetPolicy_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IPolicyWithDetails>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.PolicyWithDetails.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="GetPolicy" /> method. Call this like the actual call, but you will get validation events
        /// back.
        /// </summary>
        /// <param name="id">ObjectID of the Policy object.</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task GetPolicy_Validate(string id, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(id),id);
            }
        }

        /// <summary>This endpoint will return the current (latest) fde key saved for a system.</summary>
        /// <param name="systemId"></param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onBadRequest">a delegate that is called when the remote service returns 400 (BadRequest).</param>
        /// <param name="onUnauthorized">a delegate that is called when the remote service returns 401 (Unauthorized).</param>
        /// <param name="onForbidden">a delegate that is called when the remote service returns 403 (Forbidden).</param>
        /// <param name="onNotFound">a delegate that is called when the remote service returns 404 (NotFound).</param>
        /// <param name="onConflict">a delegate that is called when the remote service returns 409 (Conflict).</param>
        /// <param name="onInternalServerError">a delegate that is called when the remote service returns 500 (InternalServerError).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task GetSystemFdeKey(string systemId, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemfdekey>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onBadRequest, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onUnauthorized, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onForbidden, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onNotFound, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onConflict, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onInternalServerError, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systems/"
                        + global::System.Uri.EscapeDataString(systemId)
                        + "/fdekey"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.GetSystemFdeKey_Call(request,onOk,onBadRequest,onUnauthorized,onForbidden,onNotFound,onConflict,onInternalServerError,eventListener,sender);
            }
        }

        /// <summary>This endpoint will return the current (latest) fde key saved for a system.</summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onBadRequest">a delegate that is called when the remote service returns 400 (BadRequest).</param>
        /// <param name="onUnauthorized">a delegate that is called when the remote service returns 401 (Unauthorized).</param>
        /// <param name="onForbidden">a delegate that is called when the remote service returns 403 (Forbidden).</param>
        /// <param name="onNotFound">a delegate that is called when the remote service returns 404 (NotFound).</param>
        /// <param name="onConflict">a delegate that is called when the remote service returns 409 (Conflict).</param>
        /// <param name="onInternalServerError">a delegate that is called when the remote service returns 500 (InternalServerError).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task GetSystemFdeKeyViaIdentity(global::System.String viaIdentity, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemfdekey>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onBadRequest, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onUnauthorized, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onForbidden, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onNotFound, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onConflict, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onInternalServerError, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systems/(?<system_id>[^/]+)/fdekey$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systems/{system_id}/fdekey'");
                }

                // replace URI parameters with values from identity
                var systemId = _match.Groups["system_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systems/"
                        + systemId
                        + "/fdekey"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.GetSystemFdeKey_Call(request,onOk,onBadRequest,onUnauthorized,onForbidden,onNotFound,onConflict,onInternalServerError,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="GetSystemFdeKey" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onBadRequest">a delegate that is called when the remote service returns 400 (BadRequest).</param>
        /// <param name="onUnauthorized">a delegate that is called when the remote service returns 401 (Unauthorized).</param>
        /// <param name="onForbidden">a delegate that is called when the remote service returns 403 (Forbidden).</param>
        /// <param name="onNotFound">a delegate that is called when the remote service returns 404 (NotFound).</param>
        /// <param name="onConflict">a delegate that is called when the remote service returns 409 (Conflict).</param>
        /// <param name="onInternalServerError">a delegate that is called when the remote service returns 500 (InternalServerError).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task GetSystemFdeKey_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemfdekey>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onBadRequest, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onUnauthorized, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onForbidden, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onNotFound, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onConflict, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onInternalServerError, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.Systemfdekey.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.BadRequest:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onBadRequest(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.Errorresponse.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.Unauthorized:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onUnauthorized(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.Errorresponse.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.Forbidden:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onForbidden(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.Errorresponse.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.NotFound:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onNotFound(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.Errorresponse.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.Conflict:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onConflict(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.Errorresponse.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.InternalServerError:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onInternalServerError(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.Errorresponse.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="GetSystemFdeKey" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="systemId"></param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task GetSystemFdeKey_Validate(string systemId, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(systemId),systemId);
            }
        }

        /// <summary>
        /// This endpoint returns a specific translation rule for a specific G Suite instance. These rules specify how JumpCloud attributes
        /// translate to [G Suite Admin SDK](https://developers.google.com/admin-sdk/directory/) attributes.
        /// ###### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/gsuites/{gsuite_id}/translationrules/{id} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="gsuiteId"></param>
        /// <param name="id"></param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task GetTranslationRuleGSuite(string gsuiteId, string id, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGSuiteTranslationRule>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/gsuites/"
                        + global::System.Uri.EscapeDataString(gsuiteId)
                        + "/translationrules/"
                        + global::System.Uri.EscapeDataString(id)

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.GetTranslationRuleGSuite_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns a specific translation rule for a specific G Suite instance. These rules specify how JumpCloud attributes
        /// translate to [G Suite Admin SDK](https://developers.google.com/admin-sdk/directory/) attributes.
        /// ###### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/gsuites/{gsuite_id}/translationrules/{id} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task GetTranslationRuleGSuiteViaIdentity(global::System.String viaIdentity, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGSuiteTranslationRule>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/gsuites/(?<gsuite_id>[^/]+)/translationrules/(?<id>[^/]+)$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/gsuites/{gsuite_id}/translationrules/{id}'");
                }

                // replace URI parameters with values from identity
                var gsuiteId = _match.Groups["gsuite_id"].Value;
                var id = _match.Groups["id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/gsuites/"
                        + gsuiteId
                        + "/translationrules/"
                        + id

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.GetTranslationRuleGSuite_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="GetTranslationRuleGSuite" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task GetTranslationRuleGSuite_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGSuiteTranslationRule>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.GSuiteTranslationRule.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="GetTranslationRuleGSuite" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="gsuiteId"></param>
        /// <param name="id"></param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task GetTranslationRuleGSuite_Validate(string gsuiteId, string id, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(gsuiteId),gsuiteId);
                await eventListener.AssertNotNull(nameof(id),id);
            }
        }

        /// <summary>
        /// This endpoint returns a specific translation rule for a specific Office 365 instance. These rules specify how JumpCloud
        /// attributes translate to [Microsoft Graph](https://developer.microsoft.com/en-us/graph) attributes.
        /// ###### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/office365s/{office365_id}/translationrules/{id} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="office365Id"></param>
        /// <param name="id"></param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task GetTranslationRuleOffice365(string office365Id, string id, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IOffice365TranslationRule>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/office365s/"
                        + global::System.Uri.EscapeDataString(office365Id)
                        + "/translationrules/"
                        + global::System.Uri.EscapeDataString(id)

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.GetTranslationRuleOffice365_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns a specific translation rule for a specific Office 365 instance. These rules specify how JumpCloud
        /// attributes translate to [Microsoft Graph](https://developer.microsoft.com/en-us/graph) attributes.
        /// ###### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/office365s/{office365_id}/translationrules/{id} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task GetTranslationRuleOffice365ViaIdentity(global::System.String viaIdentity, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IOffice365TranslationRule>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/office365s/(?<office365_id>[^/]+)/translationrules/(?<id>[^/]+)$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/office365s/{office365_id}/translationrules/{id}'");
                }

                // replace URI parameters with values from identity
                var office365Id = _match.Groups["office365_id"].Value;
                var id = _match.Groups["id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/office365s/"
                        + office365Id
                        + "/translationrules/"
                        + id

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.GetTranslationRuleOffice365_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="GetTranslationRuleOffice365" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task GetTranslationRuleOffice365_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IOffice365TranslationRule>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.Office365TranslationRule.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="GetTranslationRuleOffice365" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="office365Id"></param>
        /// <param name="id"></param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task GetTranslationRuleOffice365_Validate(string office365Id, string id, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(office365Id),office365Id);
                await eventListener.AssertNotNull(nameof(id),id);
            }
        }

        /// <summary>
        /// The endpoint allows you to create a Workday Import request.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/workdays/{WorkdayID}/import \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '[
        /// {
        /// "email":"{email}",
        /// "firstname":"{firstname}",
        /// "lastname":"{firstname}",
        /// "username":"{username}",
        /// "attributes":[
        /// {"name":"EmployeeID","value":"0000"},
        /// {"name":"WorkdayID","value":"name.name"}
        /// ]
        ///
        /// }
        /// ]
        /// ```
        /// </summary>
        /// <param name="workdayId"></param>
        /// <param name="body"></param>
        /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ImportWorkday(string workdayId, JumpCloudApiSdkV2.Models.IBulkUserCreate[] body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IJobId>, global::System.Threading.Tasks.Task> onCreated, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/workdays/"
                        + global::System.Uri.EscapeDataString(workdayId)
                        + "/import"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? new JumpCloudApiSdkV2.Runtime.Json.XNodeArray(null != body ? new JumpCloudApiSdkV2.Runtime.Json.XNodeArray(global::System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Select(body, (__x) => __x?.ToJson(null, JumpCloudApiSdkV2.Runtime.SerializationMode.None)))) : null).ToString() : global::System.String.Empty, global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ImportWorkday_Call(request,onCreated,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint provides a list of job results from the workday import and will contain all imported data from Workday.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/workdays/{WorkdayID}/import/{ImportJobID}/results \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="id"></param>
        /// <param name="jobId"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ImportWorkdayResult(string id, string jobId, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IJobWorkresult[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/workdays/"
                        + global::System.Uri.EscapeDataString(id)
                        + "/import/"
                        + global::System.Uri.EscapeDataString(jobId)
                        + "/results"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ImportWorkdayResult_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint provides a list of job results from the workday import and will contain all imported data from Workday.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/workdays/{WorkdayID}/import/{ImportJobID}/results \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ImportWorkdayResultViaIdentity(global::System.String viaIdentity, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IJobWorkresult[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/workdays/(?<id>[^/]+)/import/(?<job_id>[^/]+)/results$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/workdays/{id}/import/{job_id}/results'");
                }

                // replace URI parameters with values from identity
                var id = _match.Groups["id"].Value;
                var jobId = _match.Groups["job_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/workdays/"
                        + id
                        + "/import/"
                        + jobId
                        + "/results"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ImportWorkdayResult_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ImportWorkdayResult" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ImportWorkdayResult_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IJobWorkresult[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IJobWorkresult[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IJobWorkresult) (JumpCloudApiSdkV2.Models.JobWorkresult.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ImportWorkdayResult" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="id"></param>
        /// <param name="jobId"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ImportWorkdayResult_Validate(string id, string jobId, int? limit, int? skip, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(id),id);
                await eventListener.AssertNotNull(nameof(jobId),jobId);
            }
        }

        /// <summary>
        /// The endpoint allows you to create a Workday Import request.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/workdays/{WorkdayID}/import \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '[
        /// {
        /// "email":"{email}",
        /// "firstname":"{firstname}",
        /// "lastname":"{firstname}",
        /// "username":"{username}",
        /// "attributes":[
        /// {"name":"EmployeeID","value":"0000"},
        /// {"name":"WorkdayID","value":"name.name"}
        /// ]
        ///
        /// }
        /// ]
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="body"></param>
        /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ImportWorkdayViaIdentity(global::System.String viaIdentity, JumpCloudApiSdkV2.Models.IBulkUserCreate[] body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IJobId>, global::System.Threading.Tasks.Task> onCreated, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/workdays/(?<workday_id>[^/]+)/import$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/workdays/{workday_id}/import'");
                }

                // replace URI parameters with values from identity
                var workdayId = _match.Groups["workday_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/workdays/"
                        + workdayId
                        + "/import"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? new JumpCloudApiSdkV2.Runtime.Json.XNodeArray(null != body ? new JumpCloudApiSdkV2.Runtime.Json.XNodeArray(global::System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Select(body, (__x) => __x?.ToJson(null, JumpCloudApiSdkV2.Runtime.SerializationMode.None)))) : null).ToString() : global::System.String.Empty, global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ImportWorkday_Call(request,onCreated,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ImportWorkday" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ImportWorkday_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IJobId>, global::System.Threading.Tasks.Task> onCreated, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.Created:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onCreated(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.JobId.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ImportWorkday" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="workdayId"></param>
        /// <param name="body"></param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ImportWorkday_Validate(string workdayId, JumpCloudApiSdkV2.Models.IBulkUserCreate[] body, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(workdayId),workdayId);
                if (body != null ) {
                        for (int __i = 0; __i < body.Length; __i++) {
                          await eventListener.AssertObjectIsValid($"body[{__i}]", body[__i]);
                        }
                      }
            }
        }

        /// <summary>
        /// This endpoint returns all active directories (LDAP, O365 Suite, G-Suite).
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/directories \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="fields">The comma separated fields included in the returned records.
        /// If omitted, the default list of fields will be returned.
        /// </param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onDefault">a delegate that is called when the remote service returns default (any response code not handled
        /// elsewhere).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListDirectory(string[] fields, int? limit, string[] sort, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IDirectory[]>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IError>, global::System.Threading.Tasks.Task> onDefault, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/directories"
                        + "?"
                        + (null != fields  && fields.Length > 0 ? "fields=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(fields, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListDirectory_Call(request,onOk,onDefault,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns all active directories (LDAP, O365 Suite, G-Suite).
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/directories \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="fields">The comma separated fields included in the returned records.
        /// If omitted, the default list of fields will be returned.
        /// </param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onDefault">a delegate that is called when the remote service returns default (any response code not handled
        /// elsewhere).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListDirectoryViaIdentity(global::System.String viaIdentity, string[] fields, int? limit, string[] sort, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IDirectory[]>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IError>, global::System.Threading.Tasks.Task> onDefault, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/directories$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/directories'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/directories"
                        + "?"
                        + (null != fields  && fields.Length > 0 ? "fields=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(fields, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListDirectory_Call(request,onOk,onDefault,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListDirectory" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onDefault">a delegate that is called when the remote service returns default (any response code not handled
        /// elsewhere).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListDirectory_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IDirectory[]>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IError>, global::System.Threading.Tasks.Task> onDefault, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IDirectory[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IDirectory) (JumpCloudApiSdkV2.Models.Directory.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onDefault(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.Error.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListDirectory" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="fields">The comma separated fields included in the returned records.
        /// If omitted, the default list of fields will be returned.
        /// </param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListDirectory_Validate(string[] fields, int? limit, string[] sort, int? skip, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {

            }
        }

        /// <summary>
        /// This endpoint will return all Users Groups bound to an Active Directory instance, either directly or indirectly, essentially
        /// traversing the JumpCloud Graph for your Organization.
        /// Each element will contain the group's type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this Active Directory instance to the corresponding User Group; this array
        /// represents all grouping and/or associations that would have to be removed to deprovision the User Group from this Active
        /// Directory instance.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/activedirectories/{ActiveDirectory_ID}/usergroups \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="activedirectoryId">ObjectID of the Active Directory instance.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphActiveDirectoryTraverseUserGroup(string activedirectoryId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/activedirectories/"
                        + global::System.Uri.EscapeDataString(activedirectoryId)
                        + "/usergroups"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphActiveDirectoryTraverseUserGroup_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all Users Groups bound to an Active Directory instance, either directly or indirectly, essentially
        /// traversing the JumpCloud Graph for your Organization.
        /// Each element will contain the group's type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this Active Directory instance to the corresponding User Group; this array
        /// represents all grouping and/or associations that would have to be removed to deprovision the User Group from this Active
        /// Directory instance.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/activedirectories/{ActiveDirectory_ID}/usergroups \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphActiveDirectoryTraverseUserGroupViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/activedirectories/(?<activedirectory_id>[^/]+)/usergroups$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/activedirectories/{activedirectory_id}/usergroups'");
                }

                // replace URI parameters with values from identity
                var activedirectoryId = _match.Groups["activedirectory_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/activedirectories/"
                        + activedirectoryId
                        + "/usergroups"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphActiveDirectoryTraverseUserGroup_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// Actual wire call for <see cref="ListGraphActiveDirectoryTraverseUserGroup" /> method.
        /// </summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphActiveDirectoryTraverseUserGroup_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphObjectWithPaths) (JumpCloudApiSdkV2.Models.GraphObjectWithPaths.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListGraphActiveDirectoryTraverseUserGroup" /> method. Call this like the actual call,
        /// but you will get validation events back.
        /// </summary>
        /// <param name="activedirectoryId">ObjectID of the Active Directory instance.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphActiveDirectoryTraverseUserGroup_Validate(string activedirectoryId, int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(activedirectoryId),activedirectoryId);
            }
        }

        /// <summary>
        /// This endpoint will return the _direct_ associations of an Application. A direct association can be a non-homogeneous relationship
        /// between 2 different objects, for example Applications and User Groups.
        /// #### Sample Request
        /// ```
        /// curl -X GET 'https://console.jumpcloud.com/api/v2/applications/{Application_ID}/associations?targets=user_group \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="applicationId">ObjectID of the Application.</param>
        /// <param name="targets"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphApplicationAssociation(string applicationId, string[] targets, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/applications/"
                        + global::System.Uri.EscapeDataString(applicationId)
                        + "/associations"
                        + "?"
                        + (null != targets  && targets.Length > 0 ? "targets=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(targets, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphApplicationAssociation_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return the _direct_ associations of an Application. A direct association can be a non-homogeneous relationship
        /// between 2 different objects, for example Applications and User Groups.
        /// #### Sample Request
        /// ```
        /// curl -X GET 'https://console.jumpcloud.com/api/v2/applications/{Application_ID}/associations?targets=user_group \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="targets"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphApplicationAssociationViaIdentity(global::System.String viaIdentity, string[] targets, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/applications/(?<application_id>[^/]+)/associations$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/applications/{application_id}/associations'");
                }

                // replace URI parameters with values from identity
                var applicationId = _match.Groups["application_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/applications/"
                        + applicationId
                        + "/associations"
                        + "?"
                        + (null != targets  && targets.Length > 0 ? "targets=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(targets, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphApplicationAssociation_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListGraphApplicationAssociation" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphApplicationAssociation_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphConnection[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphConnection) (JumpCloudApiSdkV2.Models.GraphConnection.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListGraphApplicationAssociation" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="applicationId">ObjectID of the Application.</param>
        /// <param name="targets"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphApplicationAssociation_Validate(string applicationId, string[] targets, int? limit, int? skip, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(applicationId),applicationId);
                await eventListener.AssertNotNull(nameof(targets), targets);
                if (targets != null ) {
                        for (int __i = 0; __i < targets.Length; __i++) {
                          await eventListener.AssertEnum($"targets[{__i}]",targets[__i],@"active_directory", @"application", @"command", @"g_suite", @"ldap_server", @"office_365", @"policy", @"radius_server", @"system", @"system_group", @"user", @"user_group");
                        }
                      }
            }
        }

        /// <summary>
        /// This endpoint will return all Users bound to an Application, either directly or indirectly, essentially traversing the
        /// JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this Application to the corresponding User; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the User from this Application.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/applications/{Application_ID}/users \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="applicationId">ObjectID of the Application.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphApplicationTraverseUser(string applicationId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/applications/"
                        + global::System.Uri.EscapeDataString(applicationId)
                        + "/users"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphApplicationTraverseUser_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all Users Groups bound to an Application, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the group's type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this Application to the corresponding User Group; this array represents all
        /// grouping and/or associations that would have to be removed to deprovision the User Group from this Application.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/applications/{Application_ID}/usergroups \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="applicationId">ObjectID of the Application.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphApplicationTraverseUserGroup(string applicationId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/applications/"
                        + global::System.Uri.EscapeDataString(applicationId)
                        + "/usergroups"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphApplicationTraverseUserGroup_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all Users Groups bound to an Application, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the group's type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this Application to the corresponding User Group; this array represents all
        /// grouping and/or associations that would have to be removed to deprovision the User Group from this Application.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/applications/{Application_ID}/usergroups \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphApplicationTraverseUserGroupViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/applications/(?<application_id>[^/]+)/usergroups$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/applications/{application_id}/usergroups'");
                }

                // replace URI parameters with values from identity
                var applicationId = _match.Groups["application_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/applications/"
                        + applicationId
                        + "/usergroups"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphApplicationTraverseUserGroup_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// Actual wire call for <see cref="ListGraphApplicationTraverseUserGroup" /> method.
        /// </summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphApplicationTraverseUserGroup_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphObjectWithPaths) (JumpCloudApiSdkV2.Models.GraphObjectWithPaths.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListGraphApplicationTraverseUserGroup" /> method. Call this like the actual call, but
        /// you will get validation events back.
        /// </summary>
        /// <param name="applicationId">ObjectID of the Application.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphApplicationTraverseUserGroup_Validate(string applicationId, int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(applicationId),applicationId);
            }
        }

        /// <summary>
        /// This endpoint will return all Users bound to an Application, either directly or indirectly, essentially traversing the
        /// JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this Application to the corresponding User; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the User from this Application.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/applications/{Application_ID}/users \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphApplicationTraverseUserViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/applications/(?<application_id>[^/]+)/users$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/applications/{application_id}/users'");
                }

                // replace URI parameters with values from identity
                var applicationId = _match.Groups["application_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/applications/"
                        + applicationId
                        + "/users"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphApplicationTraverseUser_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListGraphApplicationTraverseUser" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphApplicationTraverseUser_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphObjectWithPaths) (JumpCloudApiSdkV2.Models.GraphObjectWithPaths.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListGraphApplicationTraverseUser" /> method. Call this like the actual call, but you
        /// will get validation events back.
        /// </summary>
        /// <param name="applicationId">ObjectID of the Application.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphApplicationTraverseUser_Validate(string applicationId, int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(applicationId),applicationId);
            }
        }

        /// <summary>
        /// This endpoint will return the _direct_ associations of this Command.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example Commands and User
        /// Groups.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/commands/{Command_ID}/associations?targets=system_group \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="commandId">ObjectID of the Command.</param>
        /// <param name="targets"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphCommandAssociation(string commandId, string[] targets, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/commands/"
                        + global::System.Uri.EscapeDataString(commandId)
                        + "/associations"
                        + "?"
                        + (null != targets  && targets.Length > 0 ? "targets=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(targets, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphCommandAssociation_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return the _direct_ associations of this Command.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example Commands and User
        /// Groups.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/commands/{Command_ID}/associations?targets=system_group \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="targets"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphCommandAssociationViaIdentity(global::System.String viaIdentity, string[] targets, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/commands/(?<command_id>[^/]+)/associations$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/commands/{command_id}/associations'");
                }

                // replace URI parameters with values from identity
                var commandId = _match.Groups["command_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/commands/"
                        + commandId
                        + "/associations"
                        + "?"
                        + (null != targets  && targets.Length > 0 ? "targets=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(targets, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphCommandAssociation_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListGraphCommandAssociation" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphCommandAssociation_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphConnection[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphConnection) (JumpCloudApiSdkV2.Models.GraphConnection.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListGraphCommandAssociation" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="commandId">ObjectID of the Command.</param>
        /// <param name="targets"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphCommandAssociation_Validate(string commandId, string[] targets, int? limit, int? skip, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(commandId),commandId);
                await eventListener.AssertNotNull(nameof(targets), targets);
                if (targets != null ) {
                        for (int __i = 0; __i < targets.Length; __i++) {
                          await eventListener.AssertEnum($"targets[{__i}]",targets[__i],@"active_directory", @"application", @"command", @"g_suite", @"ldap_server", @"office_365", @"policy", @"radius_server", @"system", @"system_group", @"user", @"user_group");
                        }
                      }
            }
        }

        /// <summary>
        /// This endpoint will return all Systems bound to a Command, either directly or indirectly, essentially traversing the JumpCloud
        /// Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this Command to the corresponding System; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the System from this Command.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/commands/{Command_ID}/systems \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="commandId">ObjectID of the Command.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphCommandTraverseSystem(string commandId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/commands/"
                        + global::System.Uri.EscapeDataString(commandId)
                        + "/systems"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphCommandTraverseSystem_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all System Groups bound to a Command, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the group's type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this Command to the corresponding System Group; this array represents all
        /// grouping and/or associations that would have to be removed to deprovision the System Group from this Command.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/commands/{Command_ID}/systemgroups \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="commandId">ObjectID of the Command.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphCommandTraverseSystemGroup(string commandId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/commands/"
                        + global::System.Uri.EscapeDataString(commandId)
                        + "/systemgroups"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphCommandTraverseSystemGroup_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all System Groups bound to a Command, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the group's type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this Command to the corresponding System Group; this array represents all
        /// grouping and/or associations that would have to be removed to deprovision the System Group from this Command.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/commands/{Command_ID}/systemgroups \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphCommandTraverseSystemGroupViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/commands/(?<command_id>[^/]+)/systemgroups$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/commands/{command_id}/systemgroups'");
                }

                // replace URI parameters with values from identity
                var commandId = _match.Groups["command_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/commands/"
                        + commandId
                        + "/systemgroups"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphCommandTraverseSystemGroup_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListGraphCommandTraverseSystemGroup" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphCommandTraverseSystemGroup_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphObjectWithPaths) (JumpCloudApiSdkV2.Models.GraphObjectWithPaths.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListGraphCommandTraverseSystemGroup" /> method. Call this like the actual call, but you
        /// will get validation events back.
        /// </summary>
        /// <param name="commandId">ObjectID of the Command.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphCommandTraverseSystemGroup_Validate(string commandId, int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(commandId),commandId);
            }
        }

        /// <summary>
        /// This endpoint will return all Systems bound to a Command, either directly or indirectly, essentially traversing the JumpCloud
        /// Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this Command to the corresponding System; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the System from this Command.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/commands/{Command_ID}/systems \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphCommandTraverseSystemViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/commands/(?<command_id>[^/]+)/systems$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/commands/{command_id}/systems'");
                }

                // replace URI parameters with values from identity
                var commandId = _match.Groups["command_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/commands/"
                        + commandId
                        + "/systems"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphCommandTraverseSystem_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListGraphCommandTraverseSystem" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphCommandTraverseSystem_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphObjectWithPaths) (JumpCloudApiSdkV2.Models.GraphObjectWithPaths.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListGraphCommandTraverseSystem" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="commandId">ObjectID of the Command.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphCommandTraverseSystem_Validate(string commandId, int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(commandId),commandId);
            }
        }

        /// <summary>
        /// This endpoint returns the _direct_ associations of this G Suite instance.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example G Suite and Users.
        /// #### Sample Request
        /// ```
        /// curl -X GET 'https://console.jumpcloud.com/api/v2/gsuites/{Gsuite_ID}/associations?targets=user_group \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="gsuiteId">ObjectID of the G Suite instance.</param>
        /// <param name="targets"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphGSuiteAssociation(string gsuiteId, string[] targets, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/gsuites/"
                        + global::System.Uri.EscapeDataString(gsuiteId)
                        + "/associations"
                        + "?"
                        + (null != targets  && targets.Length > 0 ? "targets=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(targets, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphGSuiteAssociation_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns the _direct_ associations of this G Suite instance.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example G Suite and Users.
        /// #### Sample Request
        /// ```
        /// curl -X GET 'https://console.jumpcloud.com/api/v2/gsuites/{Gsuite_ID}/associations?targets=user_group \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="targets"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphGSuiteAssociationViaIdentity(global::System.String viaIdentity, string[] targets, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/gsuites/(?<gsuite_id>[^/]+)/associations$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/gsuites/{gsuite_id}/associations'");
                }

                // replace URI parameters with values from identity
                var gsuiteId = _match.Groups["gsuite_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/gsuites/"
                        + gsuiteId
                        + "/associations"
                        + "?"
                        + (null != targets  && targets.Length > 0 ? "targets=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(targets, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphGSuiteAssociation_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListGraphGSuiteAssociation" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphGSuiteAssociation_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphConnection[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphConnection) (JumpCloudApiSdkV2.Models.GraphConnection.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListGraphGSuiteAssociation" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="gsuiteId">ObjectID of the G Suite instance.</param>
        /// <param name="targets"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphGSuiteAssociation_Validate(string gsuiteId, string[] targets, int? limit, int? skip, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(gsuiteId),gsuiteId);
                await eventListener.AssertNotNull(nameof(targets), targets);
                if (targets != null ) {
                        for (int __i = 0; __i < targets.Length; __i++) {
                          await eventListener.AssertEnum($"targets[{__i}]",targets[__i],@"active_directory", @"application", @"command", @"g_suite", @"ldap_server", @"office_365", @"policy", @"radius_server", @"system", @"system_group", @"user", @"user_group");
                        }
                      }
            }
        }

        /// <summary>
        /// This endpoint will return all Users bound to a G Suite instance, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this G Suite instance to the corresponding User; this array represents all
        /// grouping and/or associations that would have to be removed to deprovision the User from this G Suite instance.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/gsuites/{Gsuite_ID}/users \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="gsuiteId">ObjectID of the G Suite instance.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphGSuiteTraverseUser(string gsuiteId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/gsuites/"
                        + global::System.Uri.EscapeDataString(gsuiteId)
                        + "/users"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphGSuiteTraverseUser_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all User Groups bound to an G Suite instance, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the group's type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this G Suite instance to the corresponding User Group; this array represents
        /// all grouping and/or associations that would have to be removed to deprovision the User Group from this G Suite instance.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/gsuites/{GSuite_ID}/usergroups \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="gsuiteId">ObjectID of the G Suite instance.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphGSuiteTraverseUserGroup(string gsuiteId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/gsuites/"
                        + global::System.Uri.EscapeDataString(gsuiteId)
                        + "/usergroups"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphGSuiteTraverseUserGroup_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all User Groups bound to an G Suite instance, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the group's type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this G Suite instance to the corresponding User Group; this array represents
        /// all grouping and/or associations that would have to be removed to deprovision the User Group from this G Suite instance.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/gsuites/{GSuite_ID}/usergroups \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphGSuiteTraverseUserGroupViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/gsuites/(?<gsuite_id>[^/]+)/usergroups$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/gsuites/{gsuite_id}/usergroups'");
                }

                // replace URI parameters with values from identity
                var gsuiteId = _match.Groups["gsuite_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/gsuites/"
                        + gsuiteId
                        + "/usergroups"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphGSuiteTraverseUserGroup_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListGraphGSuiteTraverseUserGroup" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphGSuiteTraverseUserGroup_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphObjectWithPaths) (JumpCloudApiSdkV2.Models.GraphObjectWithPaths.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListGraphGSuiteTraverseUserGroup" /> method. Call this like the actual call, but you
        /// will get validation events back.
        /// </summary>
        /// <param name="gsuiteId">ObjectID of the G Suite instance.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphGSuiteTraverseUserGroup_Validate(string gsuiteId, int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(gsuiteId),gsuiteId);
            }
        }

        /// <summary>
        /// This endpoint will return all Users bound to a G Suite instance, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this G Suite instance to the corresponding User; this array represents all
        /// grouping and/or associations that would have to be removed to deprovision the User from this G Suite instance.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/gsuites/{Gsuite_ID}/users \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphGSuiteTraverseUserViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/gsuites/(?<gsuite_id>[^/]+)/users$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/gsuites/{gsuite_id}/users'");
                }

                // replace URI parameters with values from identity
                var gsuiteId = _match.Groups["gsuite_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/gsuites/"
                        + gsuiteId
                        + "/users"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphGSuiteTraverseUser_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListGraphGSuiteTraverseUser" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphGSuiteTraverseUser_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphObjectWithPaths) (JumpCloudApiSdkV2.Models.GraphObjectWithPaths.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListGraphGSuiteTraverseUser" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="gsuiteId">ObjectID of the G Suite instance.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphGSuiteTraverseUser_Validate(string gsuiteId, int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(gsuiteId),gsuiteId);
            }
        }

        /// <summary>
        /// This endpoint returns the _direct_ associations of this LDAP Server.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example LDAP and Users.
        /// #### Sample Request
        /// ```
        /// curl -X GET 'https://console.jumpcloud.com/api/v2/ldapservers/{LDAP_ID}/associations?targets=user_group \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="ldapserverId">ObjectID of the LDAP Server.</param>
        /// <param name="targets"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphLdapServerAssociation(string ldapserverId, string[] targets, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/ldapservers/"
                        + global::System.Uri.EscapeDataString(ldapserverId)
                        + "/associations"
                        + "?"
                        + (null != targets  && targets.Length > 0 ? "targets=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(targets, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphLdapServerAssociation_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns the _direct_ associations of this LDAP Server.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example LDAP and Users.
        /// #### Sample Request
        /// ```
        /// curl -X GET 'https://console.jumpcloud.com/api/v2/ldapservers/{LDAP_ID}/associations?targets=user_group \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="targets"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphLdapServerAssociationViaIdentity(global::System.String viaIdentity, string[] targets, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/ldapservers/(?<ldapserver_id>[^/]+)/associations$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/ldapservers/{ldapserver_id}/associations'");
                }

                // replace URI parameters with values from identity
                var ldapserverId = _match.Groups["ldapserver_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/ldapservers/"
                        + ldapserverId
                        + "/associations"
                        + "?"
                        + (null != targets  && targets.Length > 0 ? "targets=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(targets, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphLdapServerAssociation_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListGraphLdapServerAssociation" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphLdapServerAssociation_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphConnection[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphConnection) (JumpCloudApiSdkV2.Models.GraphConnection.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListGraphLdapServerAssociation" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="ldapserverId">ObjectID of the LDAP Server.</param>
        /// <param name="targets"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphLdapServerAssociation_Validate(string ldapserverId, string[] targets, int? limit, int? skip, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(ldapserverId),ldapserverId);
                await eventListener.AssertNotNull(nameof(targets), targets);
                if (targets != null ) {
                        for (int __i = 0; __i < targets.Length; __i++) {
                          await eventListener.AssertEnum($"targets[{__i}]",targets[__i],@"active_directory", @"application", @"command", @"g_suite", @"ldap_server", @"office_365", @"policy", @"radius_server", @"system", @"system_group", @"user", @"user_group");
                        }
                      }
            }
        }

        /// <summary>
        /// This endpoint will return all Users bound to an LDAP Server, either directly or indirectly, essentially traversing the
        /// JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this LDAP server instance to the corresponding User; this array represents
        /// all grouping and/or associations that would have to be removed to deprovision the User from this LDAP server instance.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/ldapservers/{LDAP_ID}/users \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="ldapserverId">ObjectID of the LDAP Server.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphLdapServerTraverseUser(string ldapserverId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/ldapservers/"
                        + global::System.Uri.EscapeDataString(ldapserverId)
                        + "/users"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphLdapServerTraverseUser_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all Users Groups bound to a LDAP Server, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the group's type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this LDAP server instance to the corresponding User Group; this array represents
        /// all grouping and/or associations that would have to be removed to deprovision the User Group from this LDAP server instance.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/ldapservers/{LDAP_ID}/usergroups \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="ldapserverId">ObjectID of the LDAP Server.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphLdapServerTraverseUserGroup(string ldapserverId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/ldapservers/"
                        + global::System.Uri.EscapeDataString(ldapserverId)
                        + "/usergroups"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphLdapServerTraverseUserGroup_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all Users Groups bound to a LDAP Server, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the group's type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this LDAP server instance to the corresponding User Group; this array represents
        /// all grouping and/or associations that would have to be removed to deprovision the User Group from this LDAP server instance.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/ldapservers/{LDAP_ID}/usergroups \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphLdapServerTraverseUserGroupViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/ldapservers/(?<ldapserver_id>[^/]+)/usergroups$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/ldapservers/{ldapserver_id}/usergroups'");
                }

                // replace URI parameters with values from identity
                var ldapserverId = _match.Groups["ldapserver_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/ldapservers/"
                        + ldapserverId
                        + "/usergroups"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphLdapServerTraverseUserGroup_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// Actual wire call for <see cref="ListGraphLdapServerTraverseUserGroup" /> method.
        /// </summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphLdapServerTraverseUserGroup_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphObjectWithPaths) (JumpCloudApiSdkV2.Models.GraphObjectWithPaths.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListGraphLdapServerTraverseUserGroup" /> method. Call this like the actual call, but
        /// you will get validation events back.
        /// </summary>
        /// <param name="ldapserverId">ObjectID of the LDAP Server.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphLdapServerTraverseUserGroup_Validate(string ldapserverId, int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(ldapserverId),ldapserverId);
            }
        }

        /// <summary>
        /// This endpoint will return all Users bound to an LDAP Server, either directly or indirectly, essentially traversing the
        /// JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this LDAP server instance to the corresponding User; this array represents
        /// all grouping and/or associations that would have to be removed to deprovision the User from this LDAP server instance.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/ldapservers/{LDAP_ID}/users \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphLdapServerTraverseUserViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/ldapservers/(?<ldapserver_id>[^/]+)/users$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/ldapservers/{ldapserver_id}/users'");
                }

                // replace URI parameters with values from identity
                var ldapserverId = _match.Groups["ldapserver_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/ldapservers/"
                        + ldapserverId
                        + "/users"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphLdapServerTraverseUser_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListGraphLdapServerTraverseUser" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphLdapServerTraverseUser_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphObjectWithPaths) (JumpCloudApiSdkV2.Models.GraphObjectWithPaths.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListGraphLdapServerTraverseUser" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="ldapserverId">ObjectID of the LDAP Server.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphLdapServerTraverseUser_Validate(string ldapserverId, int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(ldapserverId),ldapserverId);
            }
        }

        /// <summary>
        /// This endpoint returns _direct_ associations of an Office 365 instance.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example Office 365 and Users.
        /// #### Sample Request
        /// ```
        /// curl -X GET 'https://console.jumpcloud.com/api/v2/office365s/{O365_ID}/associations?targets=user_group \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="office365Id">ObjectID of the Office 365 instance.</param>
        /// <param name="targets"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphOffice365Association(string office365Id, string[] targets, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/office365s/"
                        + global::System.Uri.EscapeDataString(office365Id)
                        + "/associations"
                        + "?"
                        + (null != targets  && targets.Length > 0 ? "targets=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(targets, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphOffice365Association_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns _direct_ associations of an Office 365 instance.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example Office 365 and Users.
        /// #### Sample Request
        /// ```
        /// curl -X GET 'https://console.jumpcloud.com/api/v2/office365s/{O365_ID}/associations?targets=user_group \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="targets"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphOffice365AssociationViaIdentity(global::System.String viaIdentity, string[] targets, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/office365s/(?<office365_id>[^/]+)/associations$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/office365s/{office365_id}/associations'");
                }

                // replace URI parameters with values from identity
                var office365Id = _match.Groups["office365_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/office365s/"
                        + office365Id
                        + "/associations"
                        + "?"
                        + (null != targets  && targets.Length > 0 ? "targets=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(targets, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphOffice365Association_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListGraphOffice365Association" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphOffice365Association_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphConnection[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphConnection) (JumpCloudApiSdkV2.Models.GraphConnection.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListGraphOffice365Association" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="office365Id">ObjectID of the Office 365 instance.</param>
        /// <param name="targets"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphOffice365Association_Validate(string office365Id, string[] targets, int? limit, int? skip, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(office365Id),office365Id);
                await eventListener.AssertNotNull(nameof(targets), targets);
                if (targets != null ) {
                        for (int __i = 0; __i < targets.Length; __i++) {
                          await eventListener.AssertEnum($"targets[{__i}]",targets[__i],@"active_directory", @"application", @"command", @"g_suite", @"ldap_server", @"office_365", @"policy", @"radius_server", @"system", @"system_group", @"user", @"user_group");
                        }
                      }
            }
        }

        /// <summary>
        /// This endpoint will return all Users bound to an Office 365 instance, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this Office 365 instance to the corresponding User; this array represents
        /// all grouping and/or associations that would have to be removed to deprovision the User from this Office 365 instance.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/office365s/{O365_ID}/users \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="office365Id">ObjectID of the Office 365 suite.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphOffice365TraverseUser(string office365Id, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/office365s/"
                        + global::System.Uri.EscapeDataString(office365Id)
                        + "/users"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphOffice365TraverseUser_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all Users Groups bound to an Office 365 instance, either directly or indirectly, essentially
        /// traversing the JumpCloud Graph for your Organization.
        /// Each element will contain the group's type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this Office 365 instance to the corresponding User Group; this array represents
        /// all grouping and/or associations that would have to be removed to deprovision the User Group from this Office 365 instance.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/office365s/{O365_ID/usergroups \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="office365Id">ObjectID of the Office 365 suite.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphOffice365TraverseUserGroup(string office365Id, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/office365s/"
                        + global::System.Uri.EscapeDataString(office365Id)
                        + "/usergroups"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphOffice365TraverseUserGroup_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all Users Groups bound to an Office 365 instance, either directly or indirectly, essentially
        /// traversing the JumpCloud Graph for your Organization.
        /// Each element will contain the group's type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this Office 365 instance to the corresponding User Group; this array represents
        /// all grouping and/or associations that would have to be removed to deprovision the User Group from this Office 365 instance.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/office365s/{O365_ID/usergroups \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphOffice365TraverseUserGroupViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/office365s/(?<office365_id>[^/]+)/usergroups$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/office365s/{office365_id}/usergroups'");
                }

                // replace URI parameters with values from identity
                var office365Id = _match.Groups["office365_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/office365s/"
                        + office365Id
                        + "/usergroups"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphOffice365TraverseUserGroup_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListGraphOffice365TraverseUserGroup" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphOffice365TraverseUserGroup_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphObjectWithPaths) (JumpCloudApiSdkV2.Models.GraphObjectWithPaths.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListGraphOffice365TraverseUserGroup" /> method. Call this like the actual call, but you
        /// will get validation events back.
        /// </summary>
        /// <param name="office365Id">ObjectID of the Office 365 suite.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphOffice365TraverseUserGroup_Validate(string office365Id, int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(office365Id),office365Id);
            }
        }

        /// <summary>
        /// This endpoint will return all Users bound to an Office 365 instance, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this Office 365 instance to the corresponding User; this array represents
        /// all grouping and/or associations that would have to be removed to deprovision the User from this Office 365 instance.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/office365s/{O365_ID}/users \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphOffice365TraverseUserViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/office365s/(?<office365_id>[^/]+)/users$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/office365s/{office365_id}/users'");
                }

                // replace URI parameters with values from identity
                var office365Id = _match.Groups["office365_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/office365s/"
                        + office365Id
                        + "/users"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphOffice365TraverseUser_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListGraphOffice365TraverseUser" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphOffice365TraverseUser_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphObjectWithPaths) (JumpCloudApiSdkV2.Models.GraphObjectWithPaths.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListGraphOffice365TraverseUser" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="office365Id">ObjectID of the Office 365 suite.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphOffice365TraverseUser_Validate(string office365Id, int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(office365Id),office365Id);
            }
        }

        /// <summary>
        /// This endpoint returns the _direct_ associations of a Policy.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example Policies and Systems.
        /// #### Sample Request
        /// ```
        /// curl -X GET 'https://console.jumpcloud.com/api/v2/policies/{Policy_ID}/associations?targets=system_group \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="policyId">ObjectID of the Policy.</param>
        /// <param name="targets"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphPolicyAssociation(string policyId, string[] targets, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/policies/"
                        + global::System.Uri.EscapeDataString(policyId)
                        + "/associations"
                        + "?"
                        + (null != targets  && targets.Length > 0 ? "targets=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(targets, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphPolicyAssociation_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns the _direct_ associations of a Policy.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example Policies and Systems.
        /// #### Sample Request
        /// ```
        /// curl -X GET 'https://console.jumpcloud.com/api/v2/policies/{Policy_ID}/associations?targets=system_group \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="targets"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphPolicyAssociationViaIdentity(global::System.String viaIdentity, string[] targets, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/policies/(?<policy_id>[^/]+)/associations$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/policies/{policy_id}/associations'");
                }

                // replace URI parameters with values from identity
                var policyId = _match.Groups["policy_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/policies/"
                        + policyId
                        + "/associations"
                        + "?"
                        + (null != targets  && targets.Length > 0 ? "targets=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(targets, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphPolicyAssociation_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListGraphPolicyAssociation" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphPolicyAssociation_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphConnection[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphConnection) (JumpCloudApiSdkV2.Models.GraphConnection.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListGraphPolicyAssociation" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="policyId">ObjectID of the Policy.</param>
        /// <param name="targets"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphPolicyAssociation_Validate(string policyId, string[] targets, int? limit, int? skip, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(policyId),policyId);
                await eventListener.AssertNotNull(nameof(targets), targets);
                if (targets != null ) {
                        for (int __i = 0; __i < targets.Length; __i++) {
                          await eventListener.AssertEnum($"targets[{__i}]",targets[__i],@"active_directory", @"application", @"command", @"g_suite", @"ldap_server", @"office_365", @"policy", @"radius_server", @"system", @"system_group", @"user", @"user_group");
                        }
                      }
            }
        }

        /// <summary>
        /// This endpoint will return all Systems bound to a Policy, either directly or indirectly, essentially traversing the JumpCloud
        /// Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this Policy to the corresponding System; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the System from this Policy.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/policies/{Policy_ID}/systems \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="policyId">ObjectID of the Command.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphPolicyTraverseSystem(string policyId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/policies/"
                        + global::System.Uri.EscapeDataString(policyId)
                        + "/systems"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphPolicyTraverseSystem_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all Systems Groups bound to a Policy, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the group's type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this Policy to the corresponding System Group; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the System Group from this Policy.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/policies/{Policy_ID}/systemgroups \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="policyId">ObjectID of the Command.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphPolicyTraverseSystemGroup(string policyId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/policies/"
                        + global::System.Uri.EscapeDataString(policyId)
                        + "/systemgroups"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphPolicyTraverseSystemGroup_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all Systems Groups bound to a Policy, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the group's type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this Policy to the corresponding System Group; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the System Group from this Policy.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/policies/{Policy_ID}/systemgroups \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphPolicyTraverseSystemGroupViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/policies/(?<policy_id>[^/]+)/systemgroups$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/policies/{policy_id}/systemgroups'");
                }

                // replace URI parameters with values from identity
                var policyId = _match.Groups["policy_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/policies/"
                        + policyId
                        + "/systemgroups"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphPolicyTraverseSystemGroup_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListGraphPolicyTraverseSystemGroup" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphPolicyTraverseSystemGroup_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphObjectWithPaths) (JumpCloudApiSdkV2.Models.GraphObjectWithPaths.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListGraphPolicyTraverseSystemGroup" /> method. Call this like the actual call, but you
        /// will get validation events back.
        /// </summary>
        /// <param name="policyId">ObjectID of the Command.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphPolicyTraverseSystemGroup_Validate(string policyId, int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(policyId),policyId);
            }
        }

        /// <summary>
        /// This endpoint will return all Systems bound to a Policy, either directly or indirectly, essentially traversing the JumpCloud
        /// Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this Policy to the corresponding System; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the System from this Policy.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/policies/{Policy_ID}/systems \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphPolicyTraverseSystemViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/policies/(?<policy_id>[^/]+)/systems$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/policies/{policy_id}/systems'");
                }

                // replace URI parameters with values from identity
                var policyId = _match.Groups["policy_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/policies/"
                        + policyId
                        + "/systems"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphPolicyTraverseSystem_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListGraphPolicyTraverseSystem" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphPolicyTraverseSystem_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphObjectWithPaths) (JumpCloudApiSdkV2.Models.GraphObjectWithPaths.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListGraphPolicyTraverseSystem" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="policyId">ObjectID of the Command.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphPolicyTraverseSystem_Validate(string policyId, int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(policyId),policyId);
            }
        }

        /// <summary>
        /// This endpoint returns the _direct_ associations of a Radius Server.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example Radius Servers and
        /// Users.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/radiusservers/{RADIUS_ID}/associations?targets=user_group \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="radiusserverId">ObjectID of the Radius Server.</param>
        /// <param name="targets"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphRadiusServerAssociation(string radiusserverId, string[] targets, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/radiusservers/"
                        + global::System.Uri.EscapeDataString(radiusserverId)
                        + "/associations"
                        + "?"
                        + (null != targets  && targets.Length > 0 ? "targets=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(targets, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphRadiusServerAssociation_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns the _direct_ associations of a Radius Server.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example Radius Servers and
        /// Users.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/radiusservers/{RADIUS_ID}/associations?targets=user_group \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="targets"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphRadiusServerAssociationViaIdentity(global::System.String viaIdentity, string[] targets, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/radiusservers/(?<radiusserver_id>[^/]+)/associations$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/radiusservers/{radiusserver_id}/associations'");
                }

                // replace URI parameters with values from identity
                var radiusserverId = _match.Groups["radiusserver_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/radiusservers/"
                        + radiusserverId
                        + "/associations"
                        + "?"
                        + (null != targets  && targets.Length > 0 ? "targets=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(targets, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphRadiusServerAssociation_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListGraphRadiusServerAssociation" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphRadiusServerAssociation_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphConnection[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphConnection) (JumpCloudApiSdkV2.Models.GraphConnection.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListGraphRadiusServerAssociation" /> method. Call this like the actual call, but you
        /// will get validation events back.
        /// </summary>
        /// <param name="radiusserverId">ObjectID of the Radius Server.</param>
        /// <param name="targets"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphRadiusServerAssociation_Validate(string radiusserverId, string[] targets, int? limit, int? skip, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(radiusserverId),radiusserverId);
                await eventListener.AssertNotNull(nameof(targets), targets);
                if (targets != null ) {
                        for (int __i = 0; __i < targets.Length; __i++) {
                          await eventListener.AssertEnum($"targets[{__i}]",targets[__i],@"active_directory", @"application", @"command", @"g_suite", @"ldap_server", @"office_365", @"policy", @"radius_server", @"system", @"system_group", @"user", @"user_group");
                        }
                      }
            }
        }

        /// <summary>
        /// This endpoint will return all Users bound to a RADIUS Server, either directly or indirectly, essentially traversing the
        /// JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this RADIUS server instance to the corresponding User; this array represents
        /// all grouping and/or associations that would have to be removed to deprovision the User from this RADIUS server instance.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/ldapservers/{LDAP_ID}/users \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="radiusserverId">ObjectID of the Radius Server.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphRadiusServerTraverseUser(string radiusserverId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/radiusservers/"
                        + global::System.Uri.EscapeDataString(radiusserverId)
                        + "/users"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphRadiusServerTraverseUser_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all Users Groups bound to a RADIUS Server, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the group's type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this RADIUS server instance to the corresponding User Group; this array represents
        /// all grouping and/or associations that would have to be removed to deprovision the User Group from this RADIUS server instance.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/radiusservers/{RADIUS_ID}/usergroups \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="radiusserverId">ObjectID of the Radius Server.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphRadiusServerTraverseUserGroup(string radiusserverId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/radiusservers/"
                        + global::System.Uri.EscapeDataString(radiusserverId)
                        + "/usergroups"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphRadiusServerTraverseUserGroup_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all Users Groups bound to a RADIUS Server, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the group's type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this RADIUS server instance to the corresponding User Group; this array represents
        /// all grouping and/or associations that would have to be removed to deprovision the User Group from this RADIUS server instance.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/radiusservers/{RADIUS_ID}/usergroups \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphRadiusServerTraverseUserGroupViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/radiusservers/(?<radiusserver_id>[^/]+)/usergroups$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/radiusservers/{radiusserver_id}/usergroups'");
                }

                // replace URI parameters with values from identity
                var radiusserverId = _match.Groups["radiusserver_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/radiusservers/"
                        + radiusserverId
                        + "/usergroups"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphRadiusServerTraverseUserGroup_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// Actual wire call for <see cref="ListGraphRadiusServerTraverseUserGroup" /> method.
        /// </summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphRadiusServerTraverseUserGroup_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphObjectWithPaths) (JumpCloudApiSdkV2.Models.GraphObjectWithPaths.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListGraphRadiusServerTraverseUserGroup" /> method. Call this like the actual call, but
        /// you will get validation events back.
        /// </summary>
        /// <param name="radiusserverId">ObjectID of the Radius Server.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphRadiusServerTraverseUserGroup_Validate(string radiusserverId, int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(radiusserverId),radiusserverId);
            }
        }

        /// <summary>
        /// This endpoint will return all Users bound to a RADIUS Server, either directly or indirectly, essentially traversing the
        /// JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this RADIUS server instance to the corresponding User; this array represents
        /// all grouping and/or associations that would have to be removed to deprovision the User from this RADIUS server instance.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/ldapservers/{LDAP_ID}/users \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphRadiusServerTraverseUserViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/radiusservers/(?<radiusserver_id>[^/]+)/users$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/radiusservers/{radiusserver_id}/users'");
                }

                // replace URI parameters with values from identity
                var radiusserverId = _match.Groups["radiusserver_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/radiusservers/"
                        + radiusserverId
                        + "/users"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphRadiusServerTraverseUser_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListGraphRadiusServerTraverseUser" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphRadiusServerTraverseUser_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphObjectWithPaths) (JumpCloudApiSdkV2.Models.GraphObjectWithPaths.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListGraphRadiusServerTraverseUser" /> method. Call this like the actual call, but you
        /// will get validation events back.
        /// </summary>
        /// <param name="radiusserverId">ObjectID of the Radius Server.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphRadiusServerTraverseUser_Validate(string radiusserverId, int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(radiusserverId),radiusserverId);
            }
        }

        /// <summary>
        /// This endpoint returns the _direct_ associations of a System.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example Systems and Users.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/systems/{System_ID}/associations?targets=user \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="systemId">ObjectID of the System.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="date">Current date header for the System Context API</param>
        /// <param name="authorization">Authorization header for the System Context API</param>
        /// <param name="targets"></param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphSystemAssociation(string systemId, int? limit, int? skip, string date, string authorization, string[] targets, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systems/"
                        + global::System.Uri.EscapeDataString(systemId)
                        + "/associations"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != targets  && targets.Length > 0 ? "targets=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(targets, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // add headers parameters
                if (null != date)
                {
                    request.Headers.Add("Date",date);
                }
                if (null != authorization)
                {
                    request.Headers.Add("Authorization",authorization);
                }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphSystemAssociation_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns the _direct_ associations of a System.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example Systems and Users.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/systems/{System_ID}/associations?targets=user \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="date">Current date header for the System Context API</param>
        /// <param name="authorization">Authorization header for the System Context API</param>
        /// <param name="targets"></param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphSystemAssociationViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string date, string authorization, string[] targets, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systems/(?<system_id>[^/]+)/associations$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systems/{system_id}/associations'");
                }

                // replace URI parameters with values from identity
                var systemId = _match.Groups["system_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systems/"
                        + systemId
                        + "/associations"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != targets  && targets.Length > 0 ? "targets=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(targets, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // add headers parameters
                if (null != date)
                {
                    request.Headers.Add("Date",date);
                }
                if (null != authorization)
                {
                    request.Headers.Add("Authorization",authorization);
                }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphSystemAssociation_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListGraphSystemAssociation" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphSystemAssociation_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphConnection[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphConnection) (JumpCloudApiSdkV2.Models.GraphConnection.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListGraphSystemAssociation" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="systemId">ObjectID of the System.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="date">Current date header for the System Context API</param>
        /// <param name="authorization">Authorization header for the System Context API</param>
        /// <param name="targets"></param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphSystemAssociation_Validate(string systemId, int? limit, int? skip, string date, string authorization, string[] targets, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(systemId),systemId);
                await eventListener.AssertNotNull(nameof(date),date);
                await eventListener.AssertNotNull(nameof(authorization),authorization);
                await eventListener.AssertNotNull(nameof(targets), targets);
                if (targets != null ) {
                        for (int __i = 0; __i < targets.Length; __i++) {
                          await eventListener.AssertEnum($"targets[{__i}]",targets[__i],@"active_directory", @"application", @"command", @"g_suite", @"ldap_server", @"office_365", @"policy", @"radius_server", @"user", @"user_group");
                        }
                      }
            }
        }

        /// <summary>
        /// This endpoint returns the _direct_ associations of a System Group.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example System Groups and
        /// Users.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/systemgroups/{GroupID}/associations?targets=user \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="groupId">ObjectID of the System Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="targets"></param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphSystemGroupAssociation(string groupId, int? limit, int? skip, string[] targets, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systemgroups/"
                        + global::System.Uri.EscapeDataString(groupId)
                        + "/associations"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != targets  && targets.Length > 0 ? "targets=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(targets, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphSystemGroupAssociation_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns the _direct_ associations of a System Group.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example System Groups and
        /// Users.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/systemgroups/{GroupID}/associations?targets=user \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="targets"></param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphSystemGroupAssociationViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] targets, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systemgroups/(?<group_id>[^/]+)/associations$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systemgroups/{group_id}/associations'");
                }

                // replace URI parameters with values from identity
                var groupId = _match.Groups["group_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systemgroups/"
                        + groupId
                        + "/associations"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != targets  && targets.Length > 0 ? "targets=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(targets, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphSystemGroupAssociation_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListGraphSystemGroupAssociation" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphSystemGroupAssociation_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphConnection[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphConnection) (JumpCloudApiSdkV2.Models.GraphConnection.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListGraphSystemGroupAssociation" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="groupId">ObjectID of the System Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="targets"></param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphSystemGroupAssociation_Validate(string groupId, int? limit, int? skip, string[] targets, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(groupId),groupId);
                await eventListener.AssertNotNull(nameof(targets), targets);
                if (targets != null ) {
                        for (int __i = 0; __i < targets.Length; __i++) {
                          await eventListener.AssertEnum($"targets[{__i}]",targets[__i],@"active_directory", @"application", @"command", @"g_suite", @"ldap_server", @"office_365", @"policy", @"radius_server", @"user", @"user_group");
                        }
                      }
            }
        }

        /// <summary>
        /// This endpoint returns the system members of a System Group.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/systemgroups/{Group_ID}/members \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="groupId">ObjectID of the System Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphSystemGroupMembers(string groupId, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systemgroups/"
                        + global::System.Uri.EscapeDataString(groupId)
                        + "/members"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphSystemGroupMembers_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns the system members of a System Group.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/systemgroups/{Group_ID}/members \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphSystemGroupMembersViaIdentity(global::System.String viaIdentity, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systemgroups/(?<group_id>[^/]+)/members$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systemgroups/{group_id}/members'");
                }

                // replace URI parameters with values from identity
                var groupId = _match.Groups["group_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systemgroups/"
                        + groupId
                        + "/members"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphSystemGroupMembers_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListGraphSystemGroupMembers" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphSystemGroupMembers_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphConnection[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphConnection) (JumpCloudApiSdkV2.Models.GraphConnection.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListGraphSystemGroupMembers" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="groupId">ObjectID of the System Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphSystemGroupMembers_Validate(string groupId, int? limit, int? skip, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(groupId),groupId);
            }
        }

        /// <summary>
        /// This endpoint returns all Systems that are a member of this System Group.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/systemgroups/{Group_ID/membership \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="groupId">ObjectID of the System Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphSystemGroupMembership(string groupId, int? limit, int? skip, string[] sort, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systemgroups/"
                        + global::System.Uri.EscapeDataString(groupId)
                        + "/membership"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphSystemGroupMembership_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns all Systems that are a member of this System Group.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/systemgroups/{Group_ID/membership \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphSystemGroupMembershipViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] sort, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systemgroups/(?<group_id>[^/]+)/membership$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systemgroups/{group_id}/membership'");
                }

                // replace URI parameters with values from identity
                var groupId = _match.Groups["group_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systemgroups/"
                        + groupId
                        + "/membership"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphSystemGroupMembership_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListGraphSystemGroupMembership" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphSystemGroupMembership_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphObjectWithPaths) (JumpCloudApiSdkV2.Models.GraphObjectWithPaths.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListGraphSystemGroupMembership" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="groupId">ObjectID of the System Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphSystemGroupMembership_Validate(string groupId, int? limit, int? skip, string[] sort, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(groupId),groupId);
            }
        }

        /// <summary>
        /// This endpoint will return all Commands bound to a System Group, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the group's type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this System Group to the corresponding Command; this array represents all
        /// grouping and/or associations that would have to be removed to deprovision the Command from this System Group.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/systemgroups/{GroupID}/commands \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="groupId">ObjectID of the System Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphSystemGroupTraverseCommand(string groupId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systemgroups/"
                        + global::System.Uri.EscapeDataString(groupId)
                        + "/commands"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphSystemGroupTraverseCommand_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all Commands bound to a System Group, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the group's type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this System Group to the corresponding Command; this array represents all
        /// grouping and/or associations that would have to be removed to deprovision the Command from this System Group.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/systemgroups/{GroupID}/commands \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphSystemGroupTraverseCommandViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systemgroups/(?<group_id>[^/]+)/commands$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systemgroups/{group_id}/commands'");
                }

                // replace URI parameters with values from identity
                var groupId = _match.Groups["group_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systemgroups/"
                        + groupId
                        + "/commands"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphSystemGroupTraverseCommand_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListGraphSystemGroupTraverseCommand" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphSystemGroupTraverseCommand_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphObjectWithPaths) (JumpCloudApiSdkV2.Models.GraphObjectWithPaths.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListGraphSystemGroupTraverseCommand" /> method. Call this like the actual call, but you
        /// will get validation events back.
        /// </summary>
        /// <param name="groupId">ObjectID of the System Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphSystemGroupTraverseCommand_Validate(string groupId, int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(groupId),groupId);
            }
        }

        /// <summary>
        /// This endpoint will return all Policies bound to a System Group, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this System Group to the corresponding Policy; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the Policy from this System Group.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// This endpoint is not public yet as we haven't finished the code.
        /// ##### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/systemgroups/{GroupID}/policies \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="groupId">ObjectID of the System Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphSystemGroupTraversePolicy(string groupId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systemgroups/"
                        + global::System.Uri.EscapeDataString(groupId)
                        + "/policies"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphSystemGroupTraversePolicy_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all Policies bound to a System Group, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this System Group to the corresponding Policy; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the Policy from this System Group.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// This endpoint is not public yet as we haven't finished the code.
        /// ##### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/systemgroups/{GroupID}/policies \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphSystemGroupTraversePolicyViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systemgroups/(?<group_id>[^/]+)/policies$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systemgroups/{group_id}/policies'");
                }

                // replace URI parameters with values from identity
                var groupId = _match.Groups["group_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systemgroups/"
                        + groupId
                        + "/policies"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphSystemGroupTraversePolicy_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListGraphSystemGroupTraversePolicy" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphSystemGroupTraversePolicy_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphObjectWithPaths) (JumpCloudApiSdkV2.Models.GraphObjectWithPaths.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListGraphSystemGroupTraversePolicy" /> method. Call this like the actual call, but you
        /// will get validation events back.
        /// </summary>
        /// <param name="groupId">ObjectID of the System Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphSystemGroupTraversePolicy_Validate(string groupId, int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(groupId),groupId);
            }
        }

        /// <summary>
        /// This endpoint will return all Users bound to a System Group, either directly or indirectly, essentially traversing the
        /// JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this System Group to the corresponding User; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the User from this System Group.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/systemgroups/{GroupID}/users \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="groupId">ObjectID of the System Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphSystemGroupTraverseUser(string groupId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systemgroups/"
                        + global::System.Uri.EscapeDataString(groupId)
                        + "/users"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphSystemGroupTraverseUser_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all User Groups bound to a System Group, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this System Group to the corresponding User Group; this array represents all
        /// grouping and/or associations that would have to be removed to deprovision the User Group from this System Group.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/systemgroups/{GroupID}/usergroups \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="groupId">ObjectID of the System Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphSystemGroupTraverseUserGroup(string groupId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systemgroups/"
                        + global::System.Uri.EscapeDataString(groupId)
                        + "/usergroups"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphSystemGroupTraverseUserGroup_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all User Groups bound to a System Group, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this System Group to the corresponding User Group; this array represents all
        /// grouping and/or associations that would have to be removed to deprovision the User Group from this System Group.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/systemgroups/{GroupID}/usergroups \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphSystemGroupTraverseUserGroupViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systemgroups/(?<group_id>[^/]+)/usergroups$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systemgroups/{group_id}/usergroups'");
                }

                // replace URI parameters with values from identity
                var groupId = _match.Groups["group_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systemgroups/"
                        + groupId
                        + "/usergroups"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphSystemGroupTraverseUserGroup_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// Actual wire call for <see cref="ListGraphSystemGroupTraverseUserGroup" /> method.
        /// </summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphSystemGroupTraverseUserGroup_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphObjectWithPaths) (JumpCloudApiSdkV2.Models.GraphObjectWithPaths.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListGraphSystemGroupTraverseUserGroup" /> method. Call this like the actual call, but
        /// you will get validation events back.
        /// </summary>
        /// <param name="groupId">ObjectID of the System Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphSystemGroupTraverseUserGroup_Validate(string groupId, int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(groupId),groupId);
            }
        }

        /// <summary>
        /// This endpoint will return all Users bound to a System Group, either directly or indirectly, essentially traversing the
        /// JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this System Group to the corresponding User; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the User from this System Group.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/systemgroups/{GroupID}/users \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphSystemGroupTraverseUserViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systemgroups/(?<group_id>[^/]+)/users$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systemgroups/{group_id}/users'");
                }

                // replace URI parameters with values from identity
                var groupId = _match.Groups["group_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systemgroups/"
                        + groupId
                        + "/users"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphSystemGroupTraverseUser_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListGraphSystemGroupTraverseUser" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphSystemGroupTraverseUser_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphObjectWithPaths) (JumpCloudApiSdkV2.Models.GraphObjectWithPaths.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListGraphSystemGroupTraverseUser" /> method. Call this like the actual call, but you
        /// will get validation events back.
        /// </summary>
        /// <param name="groupId">ObjectID of the System Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphSystemGroupTraverseUser_Validate(string groupId, int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(groupId),groupId);
            }
        }

        /// <summary>
        /// This endpoint returns all the System Groups a System is a member of.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/systems/{System_ID}/memberof \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="systemId">ObjectID of the System.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="date">Current date header for the System Context API</param>
        /// <param name="authorization">Authorization header for the System Context API</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphSystemMemberOf(string systemId, string[] filter, int? limit, int? skip, string date, string authorization, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systems/"
                        + global::System.Uri.EscapeDataString(systemId)
                        + "/memberof"
                        + "?"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // add headers parameters
                if (null != date)
                {
                    request.Headers.Add("Date",date);
                }
                if (null != authorization)
                {
                    request.Headers.Add("Authorization",authorization);
                }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphSystemMemberOf_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns all the System Groups a System is a member of.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/systems/{System_ID}/memberof \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="date">Current date header for the System Context API</param>
        /// <param name="authorization">Authorization header for the System Context API</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphSystemMemberOfViaIdentity(global::System.String viaIdentity, string[] filter, int? limit, int? skip, string date, string authorization, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systems/(?<system_id>[^/]+)/memberof$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systems/{system_id}/memberof'");
                }

                // replace URI parameters with values from identity
                var systemId = _match.Groups["system_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systems/"
                        + systemId
                        + "/memberof"
                        + "?"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // add headers parameters
                if (null != date)
                {
                    request.Headers.Add("Date",date);
                }
                if (null != authorization)
                {
                    request.Headers.Add("Authorization",authorization);
                }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphSystemMemberOf_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListGraphSystemMemberOf" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphSystemMemberOf_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphObjectWithPaths) (JumpCloudApiSdkV2.Models.GraphObjectWithPaths.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListGraphSystemMemberOf" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="systemId">ObjectID of the System.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="date">Current date header for the System Context API</param>
        /// <param name="authorization">Authorization header for the System Context API</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphSystemMemberOf_Validate(string systemId, string[] filter, int? limit, int? skip, string date, string authorization, string[] sort, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(systemId),systemId);
                await eventListener.AssertNotNull(nameof(date),date);
                await eventListener.AssertNotNull(nameof(authorization),authorization);
            }
        }

        /// <summary>
        /// This endpoint will return all Commands bound to a System, either directly or indirectly, essentially traversing the JumpCloud
        /// Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this System to the corresponding Command; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the Command from this System.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/systems/{System_ID}/commands \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="systemId">ObjectID of the System.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphSystemTraverseCommand(string systemId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systems/"
                        + global::System.Uri.EscapeDataString(systemId)
                        + "/commands"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphSystemTraverseCommand_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all Commands bound to a System, either directly or indirectly, essentially traversing the JumpCloud
        /// Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this System to the corresponding Command; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the Command from this System.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/systems/{System_ID}/commands \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphSystemTraverseCommandViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systems/(?<system_id>[^/]+)/commands$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systems/{system_id}/commands'");
                }

                // replace URI parameters with values from identity
                var systemId = _match.Groups["system_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systems/"
                        + systemId
                        + "/commands"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphSystemTraverseCommand_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListGraphSystemTraverseCommand" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphSystemTraverseCommand_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphObjectWithPaths) (JumpCloudApiSdkV2.Models.GraphObjectWithPaths.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListGraphSystemTraverseCommand" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="systemId">ObjectID of the System.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphSystemTraverseCommand_Validate(string systemId, int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(systemId),systemId);
            }
        }

        /// <summary>
        /// This endpoint will return all Policies bound to a System, either directly or indirectly, essentially traversing the JumpCloud
        /// Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this System to the corresponding Policy; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the Policy from this System.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// This endpoint is not yet public as we have finish the code.
        /// ##### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/{System_ID}/policies \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="systemId">ObjectID of the System.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphSystemTraversePolicy(string systemId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systems/"
                        + global::System.Uri.EscapeDataString(systemId)
                        + "/policies"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphSystemTraversePolicy_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all Policies bound to a System, either directly or indirectly, essentially traversing the JumpCloud
        /// Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this System to the corresponding Policy; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the Policy from this System.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// This endpoint is not yet public as we have finish the code.
        /// ##### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/{System_ID}/policies \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphSystemTraversePolicyViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systems/(?<system_id>[^/]+)/policies$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systems/{system_id}/policies'");
                }

                // replace URI parameters with values from identity
                var systemId = _match.Groups["system_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systems/"
                        + systemId
                        + "/policies"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphSystemTraversePolicy_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListGraphSystemTraversePolicy" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphSystemTraversePolicy_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphObjectWithPaths) (JumpCloudApiSdkV2.Models.GraphObjectWithPaths.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListGraphSystemTraversePolicy" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="systemId">ObjectID of the System.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphSystemTraversePolicy_Validate(string systemId, int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(systemId),systemId);
            }
        }

        /// <summary>
        /// This endpoint will return all Users bound to a System, either directly or indirectly essentially traversing the JumpCloud
        /// Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this System to the corresponding User; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the User from this System.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/systems/{System_ID}/users \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="systemId">ObjectID of the System.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="date">Current date header for the System Context API</param>
        /// <param name="authorization">Authorization header for the System Context API</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphSystemTraverseUser(string systemId, int? limit, int? skip, string date, string authorization, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systems/"
                        + global::System.Uri.EscapeDataString(systemId)
                        + "/users"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // add headers parameters
                if (null != date)
                {
                    request.Headers.Add("Date",date);
                }
                if (null != authorization)
                {
                    request.Headers.Add("Authorization",authorization);
                }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphSystemTraverseUser_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all User Groups bound to a System, either directly or indirectly essentially traversing the
        /// JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this System to the corresponding User Group; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the User Group from this System.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/systems/{System_ID}/usergroups \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="systemId">ObjectID of the System.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="date">Current date header for the System Context API</param>
        /// <param name="authorization">Authorization header for the System Context API</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphSystemTraverseUserGroup(string systemId, int? limit, int? skip, string date, string authorization, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systems/"
                        + global::System.Uri.EscapeDataString(systemId)
                        + "/usergroups"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // add headers parameters
                if (null != date)
                {
                    request.Headers.Add("Date",date);
                }
                if (null != authorization)
                {
                    request.Headers.Add("Authorization",authorization);
                }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphSystemTraverseUserGroup_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all User Groups bound to a System, either directly or indirectly essentially traversing the
        /// JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this System to the corresponding User Group; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the User Group from this System.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/systems/{System_ID}/usergroups \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="date">Current date header for the System Context API</param>
        /// <param name="authorization">Authorization header for the System Context API</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphSystemTraverseUserGroupViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string date, string authorization, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systems/(?<system_id>[^/]+)/usergroups$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systems/{system_id}/usergroups'");
                }

                // replace URI parameters with values from identity
                var systemId = _match.Groups["system_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systems/"
                        + systemId
                        + "/usergroups"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // add headers parameters
                if (null != date)
                {
                    request.Headers.Add("Date",date);
                }
                if (null != authorization)
                {
                    request.Headers.Add("Authorization",authorization);
                }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphSystemTraverseUserGroup_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListGraphSystemTraverseUserGroup" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphSystemTraverseUserGroup_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphObjectWithPaths) (JumpCloudApiSdkV2.Models.GraphObjectWithPaths.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListGraphSystemTraverseUserGroup" /> method. Call this like the actual call, but you
        /// will get validation events back.
        /// </summary>
        /// <param name="systemId">ObjectID of the System.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="date">Current date header for the System Context API</param>
        /// <param name="authorization">Authorization header for the System Context API</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphSystemTraverseUserGroup_Validate(string systemId, int? limit, int? skip, string date, string authorization, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(systemId),systemId);
                await eventListener.AssertNotNull(nameof(date),date);
                await eventListener.AssertNotNull(nameof(authorization),authorization);
            }
        }

        /// <summary>
        /// This endpoint will return all Users bound to a System, either directly or indirectly essentially traversing the JumpCloud
        /// Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this System to the corresponding User; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the User from this System.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/systems/{System_ID}/users \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="date">Current date header for the System Context API</param>
        /// <param name="authorization">Authorization header for the System Context API</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphSystemTraverseUserViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string date, string authorization, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systems/(?<system_id>[^/]+)/users$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systems/{system_id}/users'");
                }

                // replace URI parameters with values from identity
                var systemId = _match.Groups["system_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systems/"
                        + systemId
                        + "/users"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // add headers parameters
                if (null != date)
                {
                    request.Headers.Add("Date",date);
                }
                if (null != authorization)
                {
                    request.Headers.Add("Authorization",authorization);
                }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphSystemTraverseUser_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListGraphSystemTraverseUser" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphSystemTraverseUser_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphObjectWithPaths) (JumpCloudApiSdkV2.Models.GraphObjectWithPaths.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListGraphSystemTraverseUser" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="systemId">ObjectID of the System.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="date">Current date header for the System Context API</param>
        /// <param name="authorization">Authorization header for the System Context API</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphSystemTraverseUser_Validate(string systemId, int? limit, int? skip, string date, string authorization, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(systemId),systemId);
                await eventListener.AssertNotNull(nameof(date),date);
                await eventListener.AssertNotNull(nameof(authorization),authorization);
            }
        }

        /// <summary>
        /// This endpoint returns the _direct_ associations of a User.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example Users and Systems.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/users/{UserID}/associations?targets=system_group \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="userId">ObjectID of the User.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="targets"></param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphUserAssociation(string userId, int? limit, int? skip, string[] targets, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/users/"
                        + global::System.Uri.EscapeDataString(userId)
                        + "/associations"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != targets  && targets.Length > 0 ? "targets=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(targets, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphUserAssociation_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns the _direct_ associations of a User.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example Users and Systems.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/users/{UserID}/associations?targets=system_group \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="targets"></param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphUserAssociationViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] targets, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/users/(?<user_id>[^/]+)/associations$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/users/{user_id}/associations'");
                }

                // replace URI parameters with values from identity
                var userId = _match.Groups["user_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/users/"
                        + userId
                        + "/associations"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != targets  && targets.Length > 0 ? "targets=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(targets, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphUserAssociation_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListGraphUserAssociation" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphUserAssociation_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphConnection[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphConnection) (JumpCloudApiSdkV2.Models.GraphConnection.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListGraphUserAssociation" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="userId">ObjectID of the User.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="targets"></param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphUserAssociation_Validate(string userId, int? limit, int? skip, string[] targets, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(userId),userId);
                await eventListener.AssertNotNull(nameof(targets), targets);
                if (targets != null ) {
                        for (int __i = 0; __i < targets.Length; __i++) {
                          await eventListener.AssertEnum($"targets[{__i}]",targets[__i],@"active_directory", @"application", @"command", @"g_suite", @"ldap_server", @"office_365", @"policy", @"radius_server", @"system", @"system_group");
                        }
                      }
            }
        }

        /// <summary>
        /// This endpoint returns the _direct_ associations of this User Group.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example User Groups and Users.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/usergroups/{GroupID}/associations?targets=system \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="groupId">ObjectID of the User Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="targets"></param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphUserGroupAssociation(string groupId, int? limit, int? skip, string[] targets, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/usergroups/"
                        + global::System.Uri.EscapeDataString(groupId)
                        + "/associations"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != targets  && targets.Length > 0 ? "targets=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(targets, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphUserGroupAssociation_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns the _direct_ associations of this User Group.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example User Groups and Users.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/usergroups/{GroupID}/associations?targets=system \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="targets"></param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphUserGroupAssociationViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] targets, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/usergroups/(?<group_id>[^/]+)/associations$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/usergroups/{group_id}/associations'");
                }

                // replace URI parameters with values from identity
                var groupId = _match.Groups["group_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/usergroups/"
                        + groupId
                        + "/associations"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != targets  && targets.Length > 0 ? "targets=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(targets, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphUserGroupAssociation_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListGraphUserGroupAssociation" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphUserGroupAssociation_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphConnection[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphConnection) (JumpCloudApiSdkV2.Models.GraphConnection.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListGraphUserGroupAssociation" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="groupId">ObjectID of the User Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="targets"></param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphUserGroupAssociation_Validate(string groupId, int? limit, int? skip, string[] targets, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(groupId),groupId);
                await eventListener.AssertNotNull(nameof(targets), targets);
                if (targets != null ) {
                        for (int __i = 0; __i < targets.Length; __i++) {
                          await eventListener.AssertEnum($"targets[{__i}]",targets[__i],@"active_directory", @"application", @"command", @"g_suite", @"ldap_server", @"office_365", @"policy", @"radius_server", @"system", @"system_group");
                        }
                      }
            }
        }

        /// <summary>
        /// This endpoint returns the user members of a User Group.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/usergroups/{GroupID}/members \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="groupId">ObjectID of the User Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphUserGroupMembers(string groupId, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/usergroups/"
                        + global::System.Uri.EscapeDataString(groupId)
                        + "/members"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphUserGroupMembers_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns the user members of a User Group.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/usergroups/{GroupID}/members \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphUserGroupMembersViaIdentity(global::System.String viaIdentity, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/usergroups/(?<group_id>[^/]+)/members$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/usergroups/{group_id}/members'");
                }

                // replace URI parameters with values from identity
                var groupId = _match.Groups["group_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/usergroups/"
                        + groupId
                        + "/members"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphUserGroupMembers_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListGraphUserGroupMembers" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphUserGroupMembers_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphConnection[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphConnection) (JumpCloudApiSdkV2.Models.GraphConnection.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListGraphUserGroupMembers" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="groupId">ObjectID of the User Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphUserGroupMembers_Validate(string groupId, int? limit, int? skip, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(groupId),groupId);
            }
        }

        /// <summary>
        /// This endpoint returns all users members that are a member of this User Group.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/usergroups/{GroupID}/membership \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="groupId">ObjectID of the User Group.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphUserGroupMembership(string groupId, string[] filter, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/usergroups/"
                        + global::System.Uri.EscapeDataString(groupId)
                        + "/membership"
                        + "?"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphUserGroupMembership_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns all users members that are a member of this User Group.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/usergroups/{GroupID}/membership \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphUserGroupMembershipViaIdentity(global::System.String viaIdentity, string[] filter, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/usergroups/(?<group_id>[^/]+)/membership$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/usergroups/{group_id}/membership'");
                }

                // replace URI parameters with values from identity
                var groupId = _match.Groups["group_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/usergroups/"
                        + groupId
                        + "/membership"
                        + "?"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphUserGroupMembership_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListGraphUserGroupMembership" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphUserGroupMembership_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphObjectWithPaths) (JumpCloudApiSdkV2.Models.GraphObjectWithPaths.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListGraphUserGroupMembership" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="groupId">ObjectID of the User Group.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphUserGroupMembership_Validate(string groupId, string[] filter, int? limit, int? skip, string[] sort, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(groupId),groupId);
            }
        }

        /// <summary>
        /// This endpoint will return all Applications bound to a User Group, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this User Group to the corresponding Application; this array represents all
        /// grouping and/or associations that would have to be removed to deprovision the Application from this User Group.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/usergroups/{GroupID}/applications \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="groupId">ObjectID of the User Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphUserGroupTraverseApplication(string groupId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/usergroups/"
                        + global::System.Uri.EscapeDataString(groupId)
                        + "/applications"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphUserGroupTraverseApplication_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all Applications bound to a User Group, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this User Group to the corresponding Application; this array represents all
        /// grouping and/or associations that would have to be removed to deprovision the Application from this User Group.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/usergroups/{GroupID}/applications \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphUserGroupTraverseApplicationViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/usergroups/(?<group_id>[^/]+)/applications$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/usergroups/{group_id}/applications'");
                }

                // replace URI parameters with values from identity
                var groupId = _match.Groups["group_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/usergroups/"
                        + groupId
                        + "/applications"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphUserGroupTraverseApplication_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// Actual wire call for <see cref="ListGraphUserGroupTraverseApplication" /> method.
        /// </summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphUserGroupTraverseApplication_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphObjectWithPaths) (JumpCloudApiSdkV2.Models.GraphObjectWithPaths.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListGraphUserGroupTraverseApplication" /> method. Call this like the actual call, but
        /// you will get validation events back.
        /// </summary>
        /// <param name="groupId">ObjectID of the User Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphUserGroupTraverseApplication_Validate(string groupId, int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(groupId),groupId);
            }
        }

        /// <summary>
        /// This endpoint will return all Directories bound to a User Group, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this User Group to the corresponding Directory; this array represents all
        /// grouping and/or associations that would have to be removed to deprovision the Directories from this User Group.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/usergroups/{GroupID}/directories \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="groupId">ObjectID of the User Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphUserGroupTraverseDirectory(string groupId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/usergroups/"
                        + global::System.Uri.EscapeDataString(groupId)
                        + "/directories"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphUserGroupTraverseDirectory_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all Directories bound to a User Group, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this User Group to the corresponding Directory; this array represents all
        /// grouping and/or associations that would have to be removed to deprovision the Directories from this User Group.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/usergroups/{GroupID}/directories \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphUserGroupTraverseDirectoryViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/usergroups/(?<group_id>[^/]+)/directories$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/usergroups/{group_id}/directories'");
                }

                // replace URI parameters with values from identity
                var groupId = _match.Groups["group_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/usergroups/"
                        + groupId
                        + "/directories"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphUserGroupTraverseDirectory_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListGraphUserGroupTraverseDirectory" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphUserGroupTraverseDirectory_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphObjectWithPaths) (JumpCloudApiSdkV2.Models.GraphObjectWithPaths.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListGraphUserGroupTraverseDirectory" /> method. Call this like the actual call, but you
        /// will get validation events back.
        /// </summary>
        /// <param name="groupId">ObjectID of the User Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphUserGroupTraverseDirectory_Validate(string groupId, int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(groupId),groupId);
            }
        }

        /// <summary>
        /// This endpoint will return all Office 365 instances bound to a User Group, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this User Group to the corresponding Office 365 instance; this array represents
        /// all grouping and/or associations that would have to be removed to deprovision the Office 365 instance from this User Group.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/usergroups/{GroupID}/office365s \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="groupId">ObjectID of the User Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphUserGroupTraverseOffice365(string groupId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/usergroups/"
                        + global::System.Uri.EscapeDataString(groupId)
                        + "/office365s"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphUserGroupTraverseOffice365_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all Office 365 instances bound to a User Group, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this User Group to the corresponding Office 365 instance; this array represents
        /// all grouping and/or associations that would have to be removed to deprovision the Office 365 instance from this User Group.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/usergroups/{GroupID}/office365s \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphUserGroupTraverseOffice365ViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/usergroups/(?<group_id>[^/]+)/office365s$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/usergroups/{group_id}/office365s'");
                }

                // replace URI parameters with values from identity
                var groupId = _match.Groups["group_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/usergroups/"
                        + groupId
                        + "/office365s"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphUserGroupTraverseOffice365_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListGraphUserGroupTraverseOffice365" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphUserGroupTraverseOffice365_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphObjectWithPaths) (JumpCloudApiSdkV2.Models.GraphObjectWithPaths.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListGraphUserGroupTraverseOffice365" /> method. Call this like the actual call, but you
        /// will get validation events back.
        /// </summary>
        /// <param name="groupId">ObjectID of the User Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphUserGroupTraverseOffice365_Validate(string groupId, int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(groupId),groupId);
            }
        }

        /// <summary>
        /// This endpoint will return all RADIUS servers bound to a User Group, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this User Group to the corresponding RADIUS Server; this array represents
        /// all grouping and/or associations that would have to be removed to deprovision the RADIUS Server from this User Group.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/usergroups/{GroupID}/radiusservers \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="groupId">ObjectID of the User Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphUserGroupTraverseRadiusServer(string groupId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/usergroups/"
                        + global::System.Uri.EscapeDataString(groupId)
                        + "/radiusservers"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphUserGroupTraverseRadiusServer_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all RADIUS servers bound to a User Group, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this User Group to the corresponding RADIUS Server; this array represents
        /// all grouping and/or associations that would have to be removed to deprovision the RADIUS Server from this User Group.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/usergroups/{GroupID}/radiusservers \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphUserGroupTraverseRadiusServerViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/usergroups/(?<group_id>[^/]+)/radiusservers$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/usergroups/{group_id}/radiusservers'");
                }

                // replace URI parameters with values from identity
                var groupId = _match.Groups["group_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/usergroups/"
                        + groupId
                        + "/radiusservers"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphUserGroupTraverseRadiusServer_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// Actual wire call for <see cref="ListGraphUserGroupTraverseRadiusServer" /> method.
        /// </summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphUserGroupTraverseRadiusServer_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphObjectWithPaths) (JumpCloudApiSdkV2.Models.GraphObjectWithPaths.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListGraphUserGroupTraverseRadiusServer" /> method. Call this like the actual call, but
        /// you will get validation events back.
        /// </summary>
        /// <param name="groupId">ObjectID of the User Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphUserGroupTraverseRadiusServer_Validate(string groupId, int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(groupId),groupId);
            }
        }

        /// <summary>
        /// This endpoint will return all Systems bound to a User Group, either directly or indirectly, essentially traversing the
        /// JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this User Group to the corresponding System; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the System from this User Group.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/usergroups/{GroupID}/systems \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="groupId">ObjectID of the User Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphUserGroupTraverseSystem(string groupId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/usergroups/"
                        + global::System.Uri.EscapeDataString(groupId)
                        + "/systems"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphUserGroupTraverseSystem_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all System Groups bound to a User Group, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this User Group to the corresponding System Group; this array represents all
        /// grouping and/or associations that would have to be removed to deprovision the System Group from this User Group.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/usergroups/{GroupID}/systemgroups \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="groupId">ObjectID of the User Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphUserGroupTraverseSystemGroup(string groupId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/usergroups/"
                        + global::System.Uri.EscapeDataString(groupId)
                        + "/systemgroups"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphUserGroupTraverseSystemGroup_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all System Groups bound to a User Group, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this User Group to the corresponding System Group; this array represents all
        /// grouping and/or associations that would have to be removed to deprovision the System Group from this User Group.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/usergroups/{GroupID}/systemgroups \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphUserGroupTraverseSystemGroupViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/usergroups/(?<group_id>[^/]+)/systemgroups$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/usergroups/{group_id}/systemgroups'");
                }

                // replace URI parameters with values from identity
                var groupId = _match.Groups["group_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/usergroups/"
                        + groupId
                        + "/systemgroups"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphUserGroupTraverseSystemGroup_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// Actual wire call for <see cref="ListGraphUserGroupTraverseSystemGroup" /> method.
        /// </summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphUserGroupTraverseSystemGroup_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphObjectWithPaths) (JumpCloudApiSdkV2.Models.GraphObjectWithPaths.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListGraphUserGroupTraverseSystemGroup" /> method. Call this like the actual call, but
        /// you will get validation events back.
        /// </summary>
        /// <param name="groupId">ObjectID of the User Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphUserGroupTraverseSystemGroup_Validate(string groupId, int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(groupId),groupId);
            }
        }

        /// <summary>
        /// This endpoint will return all Systems bound to a User Group, either directly or indirectly, essentially traversing the
        /// JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this User Group to the corresponding System; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the System from this User Group.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/usergroups/{GroupID}/systems \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphUserGroupTraverseSystemViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/usergroups/(?<group_id>[^/]+)/systems$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/usergroups/{group_id}/systems'");
                }

                // replace URI parameters with values from identity
                var groupId = _match.Groups["group_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/usergroups/"
                        + groupId
                        + "/systems"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphUserGroupTraverseSystem_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListGraphUserGroupTraverseSystem" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphUserGroupTraverseSystem_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphObjectWithPaths) (JumpCloudApiSdkV2.Models.GraphObjectWithPaths.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListGraphUserGroupTraverseSystem" /> method. Call this like the actual call, but you
        /// will get validation events back.
        /// </summary>
        /// <param name="groupId">ObjectID of the User Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphUserGroupTraverseSystem_Validate(string groupId, int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(groupId),groupId);
            }
        }

        /// <summary>
        /// This endpoint will return all G Suite Instances bound to a User Group, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this User Group to the corresponding G Suite instance; this array represents
        /// all grouping and/or associations that would have to be removed to deprovision the G Suite instance from this User Group.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/usergroups/{GroupID/gsuites \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="groupId">ObjectID of the User Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphUserGroupTraversegSuite(string groupId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/usergroups/"
                        + global::System.Uri.EscapeDataString(groupId)
                        + "/gsuites"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphUserGroupTraversegSuite_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all G Suite Instances bound to a User Group, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this User Group to the corresponding G Suite instance; this array represents
        /// all grouping and/or associations that would have to be removed to deprovision the G Suite instance from this User Group.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/usergroups/{GroupID/gsuites \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphUserGroupTraversegSuiteViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/usergroups/(?<group_id>[^/]+)/gsuites$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/usergroups/{group_id}/gsuites'");
                }

                // replace URI parameters with values from identity
                var groupId = _match.Groups["group_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/usergroups/"
                        + groupId
                        + "/gsuites"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphUserGroupTraversegSuite_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListGraphUserGroupTraversegSuite" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphUserGroupTraversegSuite_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphObjectWithPaths) (JumpCloudApiSdkV2.Models.GraphObjectWithPaths.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListGraphUserGroupTraversegSuite" /> method. Call this like the actual call, but you
        /// will get validation events back.
        /// </summary>
        /// <param name="groupId">ObjectID of the User Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphUserGroupTraversegSuite_Validate(string groupId, int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(groupId),groupId);
            }
        }

        /// <summary>
        /// This endpoint will return all LDAP Servers bound to a User Group, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this User Group to the corresponding LDAP Server; this array represents all
        /// grouping and/or associations that would have to be removed to deprovision the LDAP Server from this User Group.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/usergroups/{GroupID}/ldapservers \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="groupId">ObjectID of the User Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphUserGroupTraverseldapServer(string groupId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/usergroups/"
                        + global::System.Uri.EscapeDataString(groupId)
                        + "/ldapservers"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphUserGroupTraverseldapServer_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all LDAP Servers bound to a User Group, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this User Group to the corresponding LDAP Server; this array represents all
        /// grouping and/or associations that would have to be removed to deprovision the LDAP Server from this User Group.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/usergroups/{GroupID}/ldapservers \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphUserGroupTraverseldapServerViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/usergroups/(?<group_id>[^/]+)/ldapservers$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/usergroups/{group_id}/ldapservers'");
                }

                // replace URI parameters with values from identity
                var groupId = _match.Groups["group_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/usergroups/"
                        + groupId
                        + "/ldapservers"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphUserGroupTraverseldapServer_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// Actual wire call for <see cref="ListGraphUserGroupTraverseldapServer" /> method.
        /// </summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphUserGroupTraverseldapServer_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphObjectWithPaths) (JumpCloudApiSdkV2.Models.GraphObjectWithPaths.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListGraphUserGroupTraverseldapServer" /> method. Call this like the actual call, but
        /// you will get validation events back.
        /// </summary>
        /// <param name="groupId">ObjectID of the User Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphUserGroupTraverseldapServer_Validate(string groupId, int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(groupId),groupId);
            }
        }

        /// <summary>
        /// This endpoint returns all the User Groups a User is a member of.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/users/{UserID}/memberof \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="userId">ObjectID of the User.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphUserMemberOf(string userId, string[] filter, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/users/"
                        + global::System.Uri.EscapeDataString(userId)
                        + "/memberof"
                        + "?"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphUserMemberOf_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns all the User Groups a User is a member of.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/users/{UserID}/memberof \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphUserMemberOfViaIdentity(global::System.String viaIdentity, string[] filter, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/users/(?<user_id>[^/]+)/memberof$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/users/{user_id}/memberof'");
                }

                // replace URI parameters with values from identity
                var userId = _match.Groups["user_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/users/"
                        + userId
                        + "/memberof"
                        + "?"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphUserMemberOf_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListGraphUserMemberOf" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphUserMemberOf_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphObjectWithPaths) (JumpCloudApiSdkV2.Models.GraphObjectWithPaths.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListGraphUserMemberOf" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="userId">ObjectID of the User.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphUserMemberOf_Validate(string userId, string[] filter, int? limit, int? skip, string[] sort, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(userId),userId);
            }
        }

        /// <summary>
        /// This endpoint will return all Applications bound to a User, either directly or indirectly, essentially traversing the
        /// JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this User to the corresponding Application; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the Application from this User.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/users/{UserID}/applications \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="userId">ObjectID of the User.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphUserTraverseApplication(string userId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/users/"
                        + global::System.Uri.EscapeDataString(userId)
                        + "/applications"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphUserTraverseApplication_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all Applications bound to a User, either directly or indirectly, essentially traversing the
        /// JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this User to the corresponding Application; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the Application from this User.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/users/{UserID}/applications \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphUserTraverseApplicationViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/users/(?<user_id>[^/]+)/applications$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/users/{user_id}/applications'");
                }

                // replace URI parameters with values from identity
                var userId = _match.Groups["user_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/users/"
                        + userId
                        + "/applications"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphUserTraverseApplication_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListGraphUserTraverseApplication" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphUserTraverseApplication_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphObjectWithPaths) (JumpCloudApiSdkV2.Models.GraphObjectWithPaths.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListGraphUserTraverseApplication" /> method. Call this like the actual call, but you
        /// will get validation events back.
        /// </summary>
        /// <param name="userId">ObjectID of the User.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphUserTraverseApplication_Validate(string userId, int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(userId),userId);
            }
        }

        /// <summary>
        /// This endpoint will return all Directories bound to a User, either directly or indirectly, essentially traversing the JumpCloud
        /// Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this User to the corresponding Directory; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the Directory from this User.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/users/{UserID}/directories \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="userId">ObjectID of the User.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphUserTraverseDirectory(string userId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/users/"
                        + global::System.Uri.EscapeDataString(userId)
                        + "/directories"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphUserTraverseDirectory_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all Directories bound to a User, either directly or indirectly, essentially traversing the JumpCloud
        /// Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this User to the corresponding Directory; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the Directory from this User.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/users/{UserID}/directories \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphUserTraverseDirectoryViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/users/(?<user_id>[^/]+)/directories$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/users/{user_id}/directories'");
                }

                // replace URI parameters with values from identity
                var userId = _match.Groups["user_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/users/"
                        + userId
                        + "/directories"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphUserTraverseDirectory_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListGraphUserTraverseDirectory" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphUserTraverseDirectory_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphObjectWithPaths) (JumpCloudApiSdkV2.Models.GraphObjectWithPaths.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListGraphUserTraverseDirectory" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="userId">ObjectID of the User.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphUserTraverseDirectory_Validate(string userId, int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(userId),userId);
            }
        }

        /// <summary>
        /// This endpoint will return all Office 365 Instances bound to a User, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this User to the corresponding Office 365 instance; this array represents
        /// all grouping and/or associations that would have to be removed to deprovision the Office 365 instance from this User.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/users/{UserID}/office365s \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="userId">ObjectID of the User.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphUserTraverseOffice365(string userId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/users/"
                        + global::System.Uri.EscapeDataString(userId)
                        + "/office365s"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphUserTraverseOffice365_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all Office 365 Instances bound to a User, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this User to the corresponding Office 365 instance; this array represents
        /// all grouping and/or associations that would have to be removed to deprovision the Office 365 instance from this User.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/users/{UserID}/office365s \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphUserTraverseOffice365ViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/users/(?<user_id>[^/]+)/office365s$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/users/{user_id}/office365s'");
                }

                // replace URI parameters with values from identity
                var userId = _match.Groups["user_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/users/"
                        + userId
                        + "/office365s"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphUserTraverseOffice365_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListGraphUserTraverseOffice365" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphUserTraverseOffice365_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphObjectWithPaths) (JumpCloudApiSdkV2.Models.GraphObjectWithPaths.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListGraphUserTraverseOffice365" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="userId">ObjectID of the User.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphUserTraverseOffice365_Validate(string userId, int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(userId),userId);
            }
        }

        /// <summary>
        /// This endpoint will return all RADIUS Servers bound to a User, either directly or indirectly, essentially traversing the
        /// JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this User to the corresponding RADIUS Server; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the RADIUS Server from this User.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/users/{UserID}/radiusservers \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="userId">ObjectID of the User.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphUserTraverseRadiusServer(string userId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/users/"
                        + global::System.Uri.EscapeDataString(userId)
                        + "/radiusservers"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphUserTraverseRadiusServer_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all RADIUS Servers bound to a User, either directly or indirectly, essentially traversing the
        /// JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this User to the corresponding RADIUS Server; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the RADIUS Server from this User.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/users/{UserID}/radiusservers \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphUserTraverseRadiusServerViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/users/(?<user_id>[^/]+)/radiusservers$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/users/{user_id}/radiusservers'");
                }

                // replace URI parameters with values from identity
                var userId = _match.Groups["user_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/users/"
                        + userId
                        + "/radiusservers"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphUserTraverseRadiusServer_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListGraphUserTraverseRadiusServer" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphUserTraverseRadiusServer_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphObjectWithPaths) (JumpCloudApiSdkV2.Models.GraphObjectWithPaths.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListGraphUserTraverseRadiusServer" /> method. Call this like the actual call, but you
        /// will get validation events back.
        /// </summary>
        /// <param name="userId">ObjectID of the User.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphUserTraverseRadiusServer_Validate(string userId, int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(userId),userId);
            }
        }

        /// <summary>
        /// This endpoint will return all Systems bound to a User, either directly or indirectly, essentially traversing the JumpCloud
        /// Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this User to the corresponding System; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the System from this User.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/users/{UserID}/systems\
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="userId">ObjectID of the User.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphUserTraverseSystem(string userId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/users/"
                        + global::System.Uri.EscapeDataString(userId)
                        + "/systems"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphUserTraverseSystem_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all System Groups bound to a User, either directly or indirectly, essentially traversing the
        /// JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this User to the corresponding System Group; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the System Group from this User.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/users/{UserID}/systemgroups\
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="userId">ObjectID of the User.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphUserTraverseSystemGroup(string userId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/users/"
                        + global::System.Uri.EscapeDataString(userId)
                        + "/systemgroups"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphUserTraverseSystemGroup_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all System Groups bound to a User, either directly or indirectly, essentially traversing the
        /// JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this User to the corresponding System Group; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the System Group from this User.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/users/{UserID}/systemgroups\
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphUserTraverseSystemGroupViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/users/(?<user_id>[^/]+)/systemgroups$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/users/{user_id}/systemgroups'");
                }

                // replace URI parameters with values from identity
                var userId = _match.Groups["user_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/users/"
                        + userId
                        + "/systemgroups"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphUserTraverseSystemGroup_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListGraphUserTraverseSystemGroup" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphUserTraverseSystemGroup_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphObjectWithPaths) (JumpCloudApiSdkV2.Models.GraphObjectWithPaths.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListGraphUserTraverseSystemGroup" /> method. Call this like the actual call, but you
        /// will get validation events back.
        /// </summary>
        /// <param name="userId">ObjectID of the User.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphUserTraverseSystemGroup_Validate(string userId, int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(userId),userId);
            }
        }

        /// <summary>
        /// This endpoint will return all Systems bound to a User, either directly or indirectly, essentially traversing the JumpCloud
        /// Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this User to the corresponding System; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the System from this User.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/users/{UserID}/systems\
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphUserTraverseSystemViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/users/(?<user_id>[^/]+)/systems$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/users/{user_id}/systems'");
                }

                // replace URI parameters with values from identity
                var userId = _match.Groups["user_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/users/"
                        + userId
                        + "/systems"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphUserTraverseSystem_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListGraphUserTraverseSystem" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphUserTraverseSystem_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphObjectWithPaths) (JumpCloudApiSdkV2.Models.GraphObjectWithPaths.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListGraphUserTraverseSystem" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="userId">ObjectID of the User.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphUserTraverseSystem_Validate(string userId, int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(userId),userId);
            }
        }

        /// <summary>
        /// This endpoint will return all G-Suite Instances bound to a User, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this User to the corresponding G Suite instance; this array represents all
        /// grouping and/or associations that would have to be removed to deprovision the G Suite instance from this User.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/users/{UserID}/gsuites \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="userId">ObjectID of the User.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphUserTraversegSuite(string userId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/users/"
                        + global::System.Uri.EscapeDataString(userId)
                        + "/gsuites"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphUserTraversegSuite_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all G-Suite Instances bound to a User, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this User to the corresponding G Suite instance; this array represents all
        /// grouping and/or associations that would have to be removed to deprovision the G Suite instance from this User.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/users/{UserID}/gsuites \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphUserTraversegSuiteViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/users/(?<user_id>[^/]+)/gsuites$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/users/{user_id}/gsuites'");
                }

                // replace URI parameters with values from identity
                var userId = _match.Groups["user_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/users/"
                        + userId
                        + "/gsuites"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphUserTraversegSuite_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListGraphUserTraversegSuite" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphUserTraversegSuite_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphObjectWithPaths) (JumpCloudApiSdkV2.Models.GraphObjectWithPaths.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListGraphUserTraversegSuite" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="userId">ObjectID of the User.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphUserTraversegSuite_Validate(string userId, int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(userId),userId);
            }
        }

        /// <summary>
        /// This endpoint will return all LDAP Servers bound to a User, either directly or indirectly, essentially traversing the
        /// JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this User to the corresponding LDAP Server; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the LDAP Server from this User.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/users/{UserID}/ldapservers \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="userId">ObjectID of the User.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphUserTraverseldapServer(string userId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/users/"
                        + global::System.Uri.EscapeDataString(userId)
                        + "/ldapservers"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphUserTraverseldapServer_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all LDAP Servers bound to a User, either directly or indirectly, essentially traversing the
        /// JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this User to the corresponding LDAP Server; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the LDAP Server from this User.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/users/{UserID}/ldapservers \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGraphUserTraverseldapServerViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/users/(?<user_id>[^/]+)/ldapservers$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/users/{user_id}/ldapservers'");
                }

                // replace URI parameters with values from identity
                var userId = _match.Groups["user_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/users/"
                        + userId
                        + "/ldapservers"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGraphUserTraverseldapServer_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListGraphUserTraverseldapServer" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphUserTraverseldapServer_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphObjectWithPaths) (JumpCloudApiSdkV2.Models.GraphObjectWithPaths.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListGraphUserTraverseldapServer" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="userId">ObjectID of the User.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGraphUserTraverseldapServer_Validate(string userId, int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(userId),userId);
            }
        }

        /// <summary>
        /// This endpoint returns all Groups that exist in your organization.
        /// #### Available filter fields:
        /// - `name`
        /// - `disabled`
        /// - `type`
        /// #### Sample Request
        /// ```
        /// curl -X GET \
        /// https://console.jumpcloud.com/api/v2/groups \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="fields">The comma separated fields included in the returned records.
        /// If omitted, the default list of fields will be returned.
        /// </param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onDefault">a delegate that is called when the remote service returns default (any response code not handled
        /// elsewhere).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGroup(string[] fields, string[] filter, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGroup[]>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IError>, global::System.Threading.Tasks.Task> onDefault, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/groups"
                        + "?"
                        + (null != fields  && fields.Length > 0 ? "fields=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(fields, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGroup_Call(request,onOk,onDefault,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns all System Groups.
        /// Available filter fields:
        /// - `name`
        /// - `disabled`
        /// - `type`
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/systemgroups \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="fields">The comma separated fields included in the returned records.
        /// If omitted, the default list of fields will be returned.
        /// </param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onDefault">a delegate that is called when the remote service returns default (any response code not handled
        /// elsewhere).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGroupSystem(string[] fields, string[] filter, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemGroup[]>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IError>, global::System.Threading.Tasks.Task> onDefault, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systemgroups"
                        + "?"
                        + (null != fields  && fields.Length > 0 ? "fields=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(fields, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGroupSystem_Call(request,onOk,onDefault,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns all System Groups.
        /// Available filter fields:
        /// - `name`
        /// - `disabled`
        /// - `type`
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/systemgroups \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="fields">The comma separated fields included in the returned records.
        /// If omitted, the default list of fields will be returned.
        /// </param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onDefault">a delegate that is called when the remote service returns default (any response code not handled
        /// elsewhere).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGroupSystemViaIdentity(global::System.String viaIdentity, string[] fields, string[] filter, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemGroup[]>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IError>, global::System.Threading.Tasks.Task> onDefault, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systemgroups$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systemgroups'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systemgroups"
                        + "?"
                        + (null != fields  && fields.Length > 0 ? "fields=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(fields, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGroupSystem_Call(request,onOk,onDefault,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListGroupSystem" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onDefault">a delegate that is called when the remote service returns default (any response code not handled
        /// elsewhere).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGroupSystem_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemGroup[]>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IError>, global::System.Threading.Tasks.Task> onDefault, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.ISystemGroup[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.ISystemGroup) (JumpCloudApiSdkV2.Models.SystemGroup.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onDefault(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.Error.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListGroupSystem" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="fields">The comma separated fields included in the returned records.
        /// If omitted, the default list of fields will be returned.
        /// </param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGroupSystem_Validate(string[] fields, string[] filter, int? limit, int? skip, string[] sort, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {

            }
        }

        /// <summary>
        /// This endpoint returns all User Groups.
        /// Available filter fields:
        /// - `name`
        /// - `disabled`
        /// - `type`
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/usergroups \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="fields">The comma separated fields included in the returned records.
        /// If omitted, the default list of fields will be returned.
        /// </param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onDefault">a delegate that is called when the remote service returns default (any response code not handled
        /// elsewhere).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGroupUser(string[] fields, string[] filter, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IUserGroup[]>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IError>, global::System.Threading.Tasks.Task> onDefault, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/usergroups"
                        + "?"
                        + (null != fields  && fields.Length > 0 ? "fields=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(fields, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGroupUser_Call(request,onOk,onDefault,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns all User Groups.
        /// Available filter fields:
        /// - `name`
        /// - `disabled`
        /// - `type`
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/usergroups \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="fields">The comma separated fields included in the returned records.
        /// If omitted, the default list of fields will be returned.
        /// </param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onDefault">a delegate that is called when the remote service returns default (any response code not handled
        /// elsewhere).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGroupUserViaIdentity(global::System.String viaIdentity, string[] fields, string[] filter, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IUserGroup[]>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IError>, global::System.Threading.Tasks.Task> onDefault, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/usergroups$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/usergroups'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/usergroups"
                        + "?"
                        + (null != fields  && fields.Length > 0 ? "fields=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(fields, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGroupUser_Call(request,onOk,onDefault,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListGroupUser" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onDefault">a delegate that is called when the remote service returns default (any response code not handled
        /// elsewhere).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGroupUser_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IUserGroup[]>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IError>, global::System.Threading.Tasks.Task> onDefault, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IUserGroup[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IUserGroup) (JumpCloudApiSdkV2.Models.UserGroup.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onDefault(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.Error.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListGroupUser" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="fields">The comma separated fields included in the returned records.
        /// If omitted, the default list of fields will be returned.
        /// </param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGroupUser_Validate(string[] fields, string[] filter, int? limit, int? skip, string[] sort, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {

            }
        }

        /// <summary>
        /// This endpoint returns all Groups that exist in your organization.
        /// #### Available filter fields:
        /// - `name`
        /// - `disabled`
        /// - `type`
        /// #### Sample Request
        /// ```
        /// curl -X GET \
        /// https://console.jumpcloud.com/api/v2/groups \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="fields">The comma separated fields included in the returned records.
        /// If omitted, the default list of fields will be returned.
        /// </param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onDefault">a delegate that is called when the remote service returns default (any response code not handled
        /// elsewhere).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGroupViaIdentity(global::System.String viaIdentity, string[] fields, string[] filter, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGroup[]>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IError>, global::System.Threading.Tasks.Task> onDefault, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/groups$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/groups'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/groups"
                        + "?"
                        + (null != fields  && fields.Length > 0 ? "fields=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(fields, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGroup_Call(request,onOk,onDefault,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListGroup" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onDefault">a delegate that is called when the remote service returns default (any response code not handled
        /// elsewhere).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGroup_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGroup[]>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IError>, global::System.Threading.Tasks.Task> onDefault, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGroup[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGroup) (JumpCloudApiSdkV2.Models.Group.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onDefault(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.Error.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListGroup" /> method. Call this like the actual call, but you will get validation events
        /// back.
        /// </summary>
        /// <param name="fields">The comma separated fields included in the returned records.
        /// If omitted, the default list of fields will be returned.
        /// </param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGroup_Validate(string[] fields, string[] filter, int? limit, int? skip, string[] sort, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {

            }
        }

        /// <summary>
        /// This endpoint returns the object IDs of your LDAP servers.
        /// ##### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/ldapservers/ \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// </summary>
        /// <param name="fields">The comma separated fields included in the returned records.
        /// If omitted, the default list of fields will be returned.
        /// </param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListLdapServer(string[] fields, string[] filter, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ILdapServerOutput[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/ldapservers"
                        + "?"
                        + (null != fields  && fields.Length > 0 ? "fields=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(fields, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListLdapServer_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns all samba domains for an LDAP server.
        /// ##### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/ldapservers/{LDAP_ID}/sambadomains \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="ldapserverId">Unique identifier of the LDAP server.</param>
        /// <param name="contentType"></param>
        /// <param name="accept"></param>
        /// <param name="fields">The comma separated fields included in the returned records.
        /// If omitted, the default list of fields will be returned.
        /// </param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onDefault">a delegate that is called when the remote service returns default (any response code not handled
        /// elsewhere).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListLdapServerSambaDomain(string ldapserverId, string contentType, string accept, string[] fields, string[] filter, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISambaDomainOutput[]>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IError>, global::System.Threading.Tasks.Task> onDefault, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/ldapservers/"
                        + global::System.Uri.EscapeDataString(ldapserverId)
                        + "/sambadomains"
                        + "?"
                        + (null != fields  && fields.Length > 0 ? "fields=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(fields, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // add headers parameters
                if (null != contentType)
                {
                    request.Headers.Add("Content-Type",contentType);
                }
                if (null != accept)
                {
                    request.Headers.Add("Accept",accept);
                }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListLdapServerSambaDomain_Call(request,onOk,onDefault,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns all samba domains for an LDAP server.
        /// ##### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/ldapservers/{LDAP_ID}/sambadomains \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="contentType"></param>
        /// <param name="accept"></param>
        /// <param name="fields">The comma separated fields included in the returned records.
        /// If omitted, the default list of fields will be returned.
        /// </param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onDefault">a delegate that is called when the remote service returns default (any response code not handled
        /// elsewhere).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListLdapServerSambaDomainViaIdentity(global::System.String viaIdentity, string contentType, string accept, string[] fields, string[] filter, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISambaDomainOutput[]>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IError>, global::System.Threading.Tasks.Task> onDefault, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/ldapservers/(?<ldapserver_id>[^/]+)/sambadomains$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/ldapservers/{ldapserver_id}/sambadomains'");
                }

                // replace URI parameters with values from identity
                var ldapserverId = _match.Groups["ldapserver_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/ldapservers/"
                        + ldapserverId
                        + "/sambadomains"
                        + "?"
                        + (null != fields  && fields.Length > 0 ? "fields=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(fields, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // add headers parameters
                if (null != contentType)
                {
                    request.Headers.Add("Content-Type",contentType);
                }
                if (null != accept)
                {
                    request.Headers.Add("Accept",accept);
                }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListLdapServerSambaDomain_Call(request,onOk,onDefault,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListLdapServerSambaDomain" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onDefault">a delegate that is called when the remote service returns default (any response code not handled
        /// elsewhere).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListLdapServerSambaDomain_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISambaDomainOutput[]>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IError>, global::System.Threading.Tasks.Task> onDefault, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.ISambaDomainOutput[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.ISambaDomainOutput) (JumpCloudApiSdkV2.Models.SambaDomainOutput.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onDefault(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.Error.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListLdapServerSambaDomain" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="ldapserverId">Unique identifier of the LDAP server.</param>
        /// <param name="contentType"></param>
        /// <param name="accept"></param>
        /// <param name="fields">The comma separated fields included in the returned records.
        /// If omitted, the default list of fields will be returned.
        /// </param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListLdapServerSambaDomain_Validate(string ldapserverId, string contentType, string accept, string[] fields, string[] filter, int? limit, int? skip, string[] sort, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(ldapserverId),ldapserverId);
                await eventListener.AssertNotNull(nameof(contentType),contentType);
                await eventListener.AssertNotNull(nameof(accept),accept);
            }
        }

        /// <summary>
        /// This endpoint returns the object IDs of your LDAP servers.
        /// ##### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/ldapservers/ \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="fields">The comma separated fields included in the returned records.
        /// If omitted, the default list of fields will be returned.
        /// </param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListLdapServerViaIdentity(global::System.String viaIdentity, string[] fields, string[] filter, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ILdapServerOutput[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/ldapservers$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/ldapservers'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/ldapservers"
                        + "?"
                        + (null != fields  && fields.Length > 0 ? "fields=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(fields, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListLdapServer_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListLdapServer" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListLdapServer_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ILdapServerOutput[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.ILdapServerOutput[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.ILdapServerOutput) (JumpCloudApiSdkV2.Models.LdapServerOutput.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListLdapServer" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="fields">The comma separated fields included in the returned records.
        /// If omitted, the default list of fields will be returned.
        /// </param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListLdapServer_Validate(string[] fields, string[] filter, int? limit, int? skip, string[] sort, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {

            }
        }

        /// <summary>
        /// This endpoint returns all policies results for an organization.
        /// ##### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/policyresults \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="fields">The comma separated fields included in the returned records.
        /// If omitted, the default list of fields will be returned.
        /// </param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListOrgPolicyResults(string[] fields, string[] filter, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IPolicyResult[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/policyresults"
                        + "?"
                        + (null != fields  && fields.Length > 0 ? "fields=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(fields, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListOrgPolicyResults_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns all policies results for an organization.
        /// ##### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/policyresults \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="fields">The comma separated fields included in the returned records.
        /// If omitted, the default list of fields will be returned.
        /// </param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListOrgPolicyResultsViaIdentity(global::System.String viaIdentity, string[] fields, string[] filter, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IPolicyResult[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/policyresults$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/policyresults'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/policyresults"
                        + "?"
                        + (null != fields  && fields.Length > 0 ? "fields=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(fields, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListOrgPolicyResults_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListOrgPolicyResults" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListOrgPolicyResults_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IPolicyResult[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IPolicyResult[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IPolicyResult) (JumpCloudApiSdkV2.Models.PolicyResult.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListOrgPolicyResults" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="fields">The comma separated fields included in the returned records.
        /// If omitted, the default list of fields will be returned.
        /// </param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListOrgPolicyResults_Validate(string[] fields, string[] filter, int? limit, int? skip, string[] sort, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {

            }
        }

        /// <summary>
        /// This endpoint returns all policies.
        /// ##### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/policies \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="fields">The comma separated fields included in the returned records.
        /// If omitted, the default list of fields will be returned.
        /// </param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onInternalServerError">a delegate that is called when the remote service returns 500 (InternalServerError).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListPolicy(string[] fields, string[] filter, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IPolicy[]>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IError>, global::System.Threading.Tasks.Task> onInternalServerError, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/policies"
                        + "?"
                        + (null != fields  && fields.Length > 0 ? "fields=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(fields, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListPolicy_Call(request,onOk,onInternalServerError,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns all policies results for a specific policy.
        /// ##### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/policies/{Policy_ID}/policyresults \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="policyId"></param>
        /// <param name="fields">The comma separated fields included in the returned records.
        /// If omitted, the default list of fields will be returned.
        /// </param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListPolicyResult(string policyId, string[] fields, string[] filter, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IPolicyResult[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/policies/"
                        + global::System.Uri.EscapeDataString(policyId)
                        + "/policyresults"
                        + "?"
                        + (null != fields  && fields.Length > 0 ? "fields=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(fields, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListPolicyResult_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns all policies results for a specific policy.
        /// ##### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/policies/{Policy_ID}/policyresults \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="fields">The comma separated fields included in the returned records.
        /// If omitted, the default list of fields will be returned.
        /// </param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListPolicyResultViaIdentity(global::System.String viaIdentity, string[] fields, string[] filter, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IPolicyResult[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/policies/(?<policy_id>[^/]+)/policyresults$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/policies/{policy_id}/policyresults'");
                }

                // replace URI parameters with values from identity
                var policyId = _match.Groups["policy_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/policies/"
                        + policyId
                        + "/policyresults"
                        + "?"
                        + (null != fields  && fields.Length > 0 ? "fields=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(fields, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListPolicyResult_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListPolicyResult" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListPolicyResult_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IPolicyResult[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IPolicyResult[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IPolicyResult) (JumpCloudApiSdkV2.Models.PolicyResult.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListPolicyResult" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="policyId"></param>
        /// <param name="fields">The comma separated fields included in the returned records.
        /// If omitted, the default list of fields will be returned.
        /// </param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListPolicyResult_Validate(string policyId, string[] fields, string[] filter, int? limit, int? skip, string[] sort, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(policyId),policyId);
            }
        }

        /// <summary>
        /// This endpoint returns the policy results for a particular system.
        /// ##### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/systems/{System_ID}/policystatuses \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="systemId">ObjectID of the System.</param>
        /// <param name="fields">The comma separated fields included in the returned records.
        /// If omitted, the default list of fields will be returned.
        /// </param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListPolicyStatus(string systemId, string[] fields, string[] filter, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IPolicyResult[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systems/"
                        + global::System.Uri.EscapeDataString(systemId)
                        + "/policystatuses"
                        + "?"
                        + (null != fields  && fields.Length > 0 ? "fields=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(fields, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListPolicyStatus_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns the latest policies results for a specific policy.
        /// ##### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/policies/{Policy_ID}/policystatuses \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="policyId"></param>
        /// <param name="fields">The comma separated fields included in the returned records.
        /// If omitted, the default list of fields will be returned.
        /// </param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListPolicyStatus1(string policyId, string[] fields, string[] filter, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IPolicyResult[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/policies/"
                        + global::System.Uri.EscapeDataString(policyId)
                        + "/policystatuses"
                        + "?"
                        + (null != fields  && fields.Length > 0 ? "fields=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(fields, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListPolicyStatus1_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns the latest policies results for a specific policy.
        /// ##### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/policies/{Policy_ID}/policystatuses \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="fields">The comma separated fields included in the returned records.
        /// If omitted, the default list of fields will be returned.
        /// </param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListPolicyStatus1ViaIdentity(global::System.String viaIdentity, string[] fields, string[] filter, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IPolicyResult[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/policies/(?<policy_id>[^/]+)/policystatuses$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/policies/{policy_id}/policystatuses'");
                }

                // replace URI parameters with values from identity
                var policyId = _match.Groups["policy_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/policies/"
                        + policyId
                        + "/policystatuses"
                        + "?"
                        + (null != fields  && fields.Length > 0 ? "fields=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(fields, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListPolicyStatus1_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListPolicyStatus1" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListPolicyStatus1_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IPolicyResult[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IPolicyResult[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IPolicyResult) (JumpCloudApiSdkV2.Models.PolicyResult.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListPolicyStatus1" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="policyId"></param>
        /// <param name="fields">The comma separated fields included in the returned records.
        /// If omitted, the default list of fields will be returned.
        /// </param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListPolicyStatus1_Validate(string policyId, string[] fields, string[] filter, int? limit, int? skip, string[] sort, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(policyId),policyId);
            }
        }

        /// <summary>
        /// This endpoint returns the policy results for a particular system.
        /// ##### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/systems/{System_ID}/policystatuses \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="fields">The comma separated fields included in the returned records.
        /// If omitted, the default list of fields will be returned.
        /// </param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListPolicyStatusViaIdentity(global::System.String viaIdentity, string[] fields, string[] filter, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IPolicyResult[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systems/(?<system_id>[^/]+)/policystatuses$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systems/{system_id}/policystatuses'");
                }

                // replace URI parameters with values from identity
                var systemId = _match.Groups["system_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systems/"
                        + systemId
                        + "/policystatuses"
                        + "?"
                        + (null != fields  && fields.Length > 0 ? "fields=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(fields, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListPolicyStatus_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListPolicyStatus" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListPolicyStatus_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IPolicyResult[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IPolicyResult[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IPolicyResult) (JumpCloudApiSdkV2.Models.PolicyResult.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListPolicyStatus" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="systemId">ObjectID of the System.</param>
        /// <param name="fields">The comma separated fields included in the returned records.
        /// If omitted, the default list of fields will be returned.
        /// </param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListPolicyStatus_Validate(string systemId, string[] fields, string[] filter, int? limit, int? skip, string[] sort, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(systemId),systemId);
            }
        }

        /// <summary>
        /// This endpoint returns all policy templates.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/policytemplates \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="fields">The comma separated fields included in the returned records.
        /// If omitted, the default list of fields will be returned.
        /// </param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onInternalServerError">a delegate that is called when the remote service returns 500 (InternalServerError).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListPolicyTemplate(string[] fields, string[] filter, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IPolicyTemplate[]>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IError>, global::System.Threading.Tasks.Task> onInternalServerError, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/policytemplates"
                        + "?"
                        + (null != fields  && fields.Length > 0 ? "fields=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(fields, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListPolicyTemplate_Call(request,onOk,onInternalServerError,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns all policy templates.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/policytemplates \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="fields">The comma separated fields included in the returned records.
        /// If omitted, the default list of fields will be returned.
        /// </param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onInternalServerError">a delegate that is called when the remote service returns 500 (InternalServerError).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListPolicyTemplateViaIdentity(global::System.String viaIdentity, string[] fields, string[] filter, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IPolicyTemplate[]>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IError>, global::System.Threading.Tasks.Task> onInternalServerError, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/policytemplates$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/policytemplates'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/policytemplates"
                        + "?"
                        + (null != fields  && fields.Length > 0 ? "fields=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(fields, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListPolicyTemplate_Call(request,onOk,onInternalServerError,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListPolicyTemplate" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onInternalServerError">a delegate that is called when the remote service returns 500 (InternalServerError).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListPolicyTemplate_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IPolicyTemplate[]>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IError>, global::System.Threading.Tasks.Task> onInternalServerError, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IPolicyTemplate[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IPolicyTemplate) (JumpCloudApiSdkV2.Models.PolicyTemplate.FromJson(__x) )) ))() : null));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.InternalServerError:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onInternalServerError(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.Error.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListPolicyTemplate" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="fields">The comma separated fields included in the returned records.
        /// If omitted, the default list of fields will be returned.
        /// </param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListPolicyTemplate_Validate(string[] fields, string[] filter, int? limit, int? skip, string[] sort, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {

            }
        }

        /// <summary>
        /// This endpoint returns all policies.
        /// ##### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/policies \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="fields">The comma separated fields included in the returned records.
        /// If omitted, the default list of fields will be returned.
        /// </param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onInternalServerError">a delegate that is called when the remote service returns 500 (InternalServerError).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListPolicyViaIdentity(global::System.String viaIdentity, string[] fields, string[] filter, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IPolicy[]>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IError>, global::System.Threading.Tasks.Task> onInternalServerError, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/policies$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/policies'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/policies"
                        + "?"
                        + (null != fields  && fields.Length > 0 ? "fields=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(fields, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListPolicy_Call(request,onOk,onInternalServerError,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListPolicy" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onInternalServerError">a delegate that is called when the remote service returns 500 (InternalServerError).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListPolicy_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IPolicy[]>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IError>, global::System.Threading.Tasks.Task> onInternalServerError, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IPolicy[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IPolicy) (JumpCloudApiSdkV2.Models.Policy.FromJson(__x) )) ))() : null));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.InternalServerError:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onInternalServerError(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.Error.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListPolicy" /> method. Call this like the actual call, but you will get validation events
        /// back.
        /// </summary>
        /// <param name="fields">The comma separated fields included in the returned records.
        /// If omitted, the default list of fields will be returned.
        /// </param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListPolicy_Validate(string[] fields, string[] filter, int? limit, int? skip, string[] sort, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {

            }
        }

        /// <summary>
        /// This endpoint returns a list of the Administrators associated with the Provider.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/providers/{ProviderID}/administrators \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="providerId"></param>
        /// <param name="fields">The comma separated fields included in the returned records.
        /// If omitted, the default list of fields will be returned.
        /// </param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onUnauthorized">a delegate that is called when the remote service returns 401 (Unauthorized).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListProviderAdministrator(string providerId, string[] fields, string[] filter, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IPathsProvidersProviderIdAdministratorsGetResponses200ContentApplicationJsonSchema>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IPathsProvidersProviderIdAdministratorsGetResponses401ContentApplicationJsonSchema>, global::System.Threading.Tasks.Task> onUnauthorized, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/providers/"
                        + global::System.Uri.EscapeDataString(providerId)
                        + "/administrators"
                        + "?"
                        + (null != fields  && fields.Length > 0 ? "fields=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(fields, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListProviderAdministrator_Call(request,onOk,onUnauthorized,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns a list of the Administrators associated with the Provider.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/providers/{ProviderID}/administrators \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="fields">The comma separated fields included in the returned records.
        /// If omitted, the default list of fields will be returned.
        /// </param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onUnauthorized">a delegate that is called when the remote service returns 401 (Unauthorized).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListProviderAdministratorViaIdentity(global::System.String viaIdentity, string[] fields, string[] filter, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IPathsProvidersProviderIdAdministratorsGetResponses200ContentApplicationJsonSchema>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IPathsProvidersProviderIdAdministratorsGetResponses401ContentApplicationJsonSchema>, global::System.Threading.Tasks.Task> onUnauthorized, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/providers/(?<provider_id>[^/]+)/administrators$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/providers/{provider_id}/administrators'");
                }

                // replace URI parameters with values from identity
                var providerId = _match.Groups["provider_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/providers/"
                        + providerId
                        + "/administrators"
                        + "?"
                        + (null != fields  && fields.Length > 0 ? "fields=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(fields, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListProviderAdministrator_Call(request,onOk,onUnauthorized,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListProviderAdministrator" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onUnauthorized">a delegate that is called when the remote service returns 401 (Unauthorized).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListProviderAdministrator_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IPathsProvidersProviderIdAdministratorsGetResponses200ContentApplicationJsonSchema>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IPathsProvidersProviderIdAdministratorsGetResponses401ContentApplicationJsonSchema>, global::System.Threading.Tasks.Task> onUnauthorized, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.PathsProvidersProviderIdAdministratorsGetResponses200ContentApplicationJsonSchema.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.Unauthorized:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onUnauthorized(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.PathsProvidersProviderIdAdministratorsGetResponses401ContentApplicationJsonSchema.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListProviderAdministrator" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="providerId"></param>
        /// <param name="fields">The comma separated fields included in the returned records.
        /// If omitted, the default list of fields will be returned.
        /// </param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListProviderAdministrator_Validate(string providerId, string[] fields, string[] filter, int? limit, int? skip, string[] sort, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(providerId),providerId);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `bundle_name`.</summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSysteminsightsApps(int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsApps[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/apps"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSysteminsightsApps_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `bundle_name`.</summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSysteminsightsAppsViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsApps[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systeminsights/apps$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systeminsights/apps'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/apps"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSysteminsightsApps_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListSysteminsightsApps" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSysteminsightsApps_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsApps[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.ISystemInsightsApps[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.ISystemInsightsApps) (JumpCloudApiSdkV2.Models.SystemInsightsApps.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListSysteminsightsApps" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSysteminsightsApps_Validate(int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertIsLessThanOrEqual(nameof(limit),limit,100);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `protection_status`.</summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSysteminsightsBitlockerInfo(int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsBitlockerInfo[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/bitlocker_info"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSysteminsightsBitlockerInfo_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `protection_status`.</summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSysteminsightsBitlockerInfoViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsBitlockerInfo[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systeminsights/bitlocker_info$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systeminsights/bitlocker_info'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/bitlocker_info"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSysteminsightsBitlockerInfo_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListSysteminsightsBitlockerInfo" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSysteminsightsBitlockerInfo_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsBitlockerInfo[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.ISystemInsightsBitlockerInfo[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.ISystemInsightsBitlockerInfo) (JumpCloudApiSdkV2.Models.SystemInsightsBitlockerInfo.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListSysteminsightsBitlockerInfo" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSysteminsightsBitlockerInfo_Validate(int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertIsLessThanOrEqual(nameof(limit),limit,100);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `name`.</summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSysteminsightsBrowserPlugins(int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsBrowserPlugins[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/browser_plugins"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSysteminsightsBrowserPlugins_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `name`.</summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSysteminsightsBrowserPluginsViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsBrowserPlugins[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systeminsights/browser_plugins$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systeminsights/browser_plugins'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/browser_plugins"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSysteminsightsBrowserPlugins_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListSysteminsightsBrowserPlugins" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSysteminsightsBrowserPlugins_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsBrowserPlugins[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.ISystemInsightsBrowserPlugins[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.ISystemInsightsBrowserPlugins) (JumpCloudApiSdkV2.Models.SystemInsightsBrowserPlugins.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListSysteminsightsBrowserPlugins" /> method. Call this like the actual call, but you
        /// will get validation events back.
        /// </summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSysteminsightsBrowserPlugins_Validate(int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertIsLessThanOrEqual(nameof(limit),limit,100);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `name`.</summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSysteminsightsChromeExtensions(int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsChromeExtensions[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/chrome_extensions"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSysteminsightsChromeExtensions_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `name`.</summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSysteminsightsChromeExtensionsViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsChromeExtensions[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systeminsights/chrome_extensions$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systeminsights/chrome_extensions'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/chrome_extensions"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSysteminsightsChromeExtensions_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListSysteminsightsChromeExtensions" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSysteminsightsChromeExtensions_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsChromeExtensions[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.ISystemInsightsChromeExtensions[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.ISystemInsightsChromeExtensions) (JumpCloudApiSdkV2.Models.SystemInsightsChromeExtensions.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListSysteminsightsChromeExtensions" /> method. Call this like the actual call, but you
        /// will get validation events back.
        /// </summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSysteminsightsChromeExtensions_Validate(int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertIsLessThanOrEqual(nameof(limit),limit,100);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `encryption_status`.</summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSysteminsightsDiskEncryption(int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsDiskEncryption[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/disk_encryption"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSysteminsightsDiskEncryption_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `encryption_status`.</summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSysteminsightsDiskEncryptionViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsDiskEncryption[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systeminsights/disk_encryption$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systeminsights/disk_encryption'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/disk_encryption"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSysteminsightsDiskEncryption_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListSysteminsightsDiskEncryption" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSysteminsightsDiskEncryption_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsDiskEncryption[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.ISystemInsightsDiskEncryption[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.ISystemInsightsDiskEncryption) (JumpCloudApiSdkV2.Models.SystemInsightsDiskEncryption.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListSysteminsightsDiskEncryption" /> method. Call this like the actual call, but you
        /// will get validation events back.
        /// </summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSysteminsightsDiskEncryption_Validate(int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertIsLessThanOrEqual(nameof(limit),limit,100);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `disk_index`.</summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSysteminsightsDiskInfo(int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsDiskInfo[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/disk_info"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSysteminsightsDiskInfo_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `disk_index`.</summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSysteminsightsDiskInfoViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsDiskInfo[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systeminsights/disk_info$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systeminsights/disk_info'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/disk_info"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSysteminsightsDiskInfo_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListSysteminsightsDiskInfo" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSysteminsightsDiskInfo_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsDiskInfo[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.ISystemInsightsDiskInfo[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.ISystemInsightsDiskInfo) (JumpCloudApiSdkV2.Models.SystemInsightsDiskInfo.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListSysteminsightsDiskInfo" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSysteminsightsDiskInfo_Validate(int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertIsLessThanOrEqual(nameof(limit),limit,100);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `address`.</summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSysteminsightsEtcHosts(int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsEtcHosts[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/etc_hosts"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSysteminsightsEtcHosts_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `address`.</summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSysteminsightsEtcHostsViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsEtcHosts[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systeminsights/etc_hosts$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systeminsights/etc_hosts'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/etc_hosts"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSysteminsightsEtcHosts_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListSysteminsightsEtcHosts" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSysteminsightsEtcHosts_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsEtcHosts[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.ISystemInsightsEtcHosts[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.ISystemInsightsEtcHosts) (JumpCloudApiSdkV2.Models.SystemInsightsEtcHosts.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListSysteminsightsEtcHosts" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSysteminsightsEtcHosts_Validate(int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertIsLessThanOrEqual(nameof(limit),limit,100);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `name`.</summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSysteminsightsFirefoxAddons(int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsFirefoxAddons[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/firefox_addons"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSysteminsightsFirefoxAddons_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `name`.</summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSysteminsightsFirefoxAddonsViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsFirefoxAddons[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systeminsights/firefox_addons$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systeminsights/firefox_addons'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/firefox_addons"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSysteminsightsFirefoxAddons_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListSysteminsightsFirefoxAddons" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSysteminsightsFirefoxAddons_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsFirefoxAddons[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.ISystemInsightsFirefoxAddons[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.ISystemInsightsFirefoxAddons) (JumpCloudApiSdkV2.Models.SystemInsightsFirefoxAddons.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListSysteminsightsFirefoxAddons" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSysteminsightsFirefoxAddons_Validate(int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertIsLessThanOrEqual(nameof(limit),limit,100);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `groupname`.</summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSysteminsightsGroups(int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsGroups[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/groups"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSysteminsightsGroups_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `groupname`.</summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSysteminsightsGroupsViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsGroups[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systeminsights/groups$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systeminsights/groups'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/groups"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSysteminsightsGroups_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListSysteminsightsGroups" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSysteminsightsGroups_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsGroups[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.ISystemInsightsGroups[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.ISystemInsightsGroups) (JumpCloudApiSdkV2.Models.SystemInsightsGroups.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListSysteminsightsGroups" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSysteminsightsGroups_Validate(int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertIsLessThanOrEqual(nameof(limit),limit,100);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `address`.</summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSysteminsightsInterfaceAddresses(int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsInterfaceAddresses[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/interface_addresses"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSysteminsightsInterfaceAddresses_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `address`.</summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSysteminsightsInterfaceAddressesViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsInterfaceAddresses[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systeminsights/interface_addresses$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systeminsights/interface_addresses'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/interface_addresses"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSysteminsightsInterfaceAddresses_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// Actual wire call for <see cref="ListSysteminsightsInterfaceAddresses" /> method.
        /// </summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSysteminsightsInterfaceAddresses_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsInterfaceAddresses[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.ISystemInsightsInterfaceAddresses[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.ISystemInsightsInterfaceAddresses) (JumpCloudApiSdkV2.Models.SystemInsightsInterfaceAddresses.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListSysteminsightsInterfaceAddresses" /> method. Call this like the actual call, but
        /// you will get validation events back.
        /// </summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSysteminsightsInterfaceAddresses_Validate(int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertIsLessThanOrEqual(nameof(limit),limit,100);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `version`.</summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSysteminsightsKernelInfo(int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsKernelInfo[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/kernel_info"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSysteminsightsKernelInfo_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `version`.</summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSysteminsightsKernelInfoViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsKernelInfo[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systeminsights/kernel_info$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systeminsights/kernel_info'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/kernel_info"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSysteminsightsKernelInfo_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListSysteminsightsKernelInfo" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSysteminsightsKernelInfo_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsKernelInfo[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.ISystemInsightsKernelInfo[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.ISystemInsightsKernelInfo) (JumpCloudApiSdkV2.Models.SystemInsightsKernelInfo.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListSysteminsightsKernelInfo" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSysteminsightsKernelInfo_Validate(int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertIsLessThanOrEqual(nameof(limit),limit,100);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `device_id`.</summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSysteminsightsLogicalDrives(int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsLogicalDrvies[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/logical_drives"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSysteminsightsLogicalDrives_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `device_id`.</summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSysteminsightsLogicalDrivesViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsLogicalDrvies[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systeminsights/logical_drives$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systeminsights/logical_drives'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/logical_drives"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSysteminsightsLogicalDrives_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListSysteminsightsLogicalDrives" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSysteminsightsLogicalDrives_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsLogicalDrvies[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.ISystemInsightsLogicalDrvies[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.ISystemInsightsLogicalDrvies) (JumpCloudApiSdkV2.Models.SystemInsightsLogicalDrvies.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListSysteminsightsLogicalDrives" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSysteminsightsLogicalDrives_Validate(int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertIsLessThanOrEqual(nameof(limit),limit,100);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `path`.</summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSysteminsightsMounts(int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsMounts[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/mounts"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSysteminsightsMounts_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `path`.</summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSysteminsightsMountsViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsMounts[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systeminsights/mounts$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systeminsights/mounts'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/mounts"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSysteminsightsMounts_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListSysteminsightsMounts" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSysteminsightsMounts_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsMounts[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.ISystemInsightsMounts[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.ISystemInsightsMounts) (JumpCloudApiSdkV2.Models.SystemInsightsMounts.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListSysteminsightsMounts" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSysteminsightsMounts_Validate(int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertIsLessThanOrEqual(nameof(limit),limit,100);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `version`.</summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSysteminsightsOSVersion(int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsOSVersion[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/os_version"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSysteminsightsOSVersion_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `version`.</summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSysteminsightsOSVersionViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsOSVersion[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systeminsights/os_version$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systeminsights/os_version'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/os_version"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSysteminsightsOSVersion_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListSysteminsightsOSVersion" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSysteminsightsOSVersion_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsOSVersion[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.ISystemInsightsOSVersion[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.ISystemInsightsOSVersion) (JumpCloudApiSdkV2.Models.SystemInsightsOSVersion.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListSysteminsightsOSVersion" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSysteminsightsOSVersion_Validate(int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertIsLessThanOrEqual(nameof(limit),limit,100);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `hotfix_id`.</summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSysteminsightsPatches(int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsPatches[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/patches"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSysteminsightsPatches_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `hotfix_id`.</summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSysteminsightsPatchesViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsPatches[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systeminsights/patches$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systeminsights/patches'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/patches"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSysteminsightsPatches_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListSysteminsightsPatches" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSysteminsightsPatches_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsPatches[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.ISystemInsightsPatches[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.ISystemInsightsPatches) (JumpCloudApiSdkV2.Models.SystemInsightsPatches.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListSysteminsightsPatches" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSysteminsightsPatches_Validate(int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertIsLessThanOrEqual(nameof(limit),limit,100);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `name`.</summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSysteminsightsPrograms(int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsPrograms[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/programs"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSysteminsightsPrograms_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `name`.</summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSysteminsightsProgramsViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsPrograms[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systeminsights/programs$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systeminsights/programs'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/programs"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSysteminsightsPrograms_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListSysteminsightsPrograms" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSysteminsightsPrograms_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsPrograms[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.ISystemInsightsPrograms[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.ISystemInsightsPrograms) (JumpCloudApiSdkV2.Models.SystemInsightsPrograms.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListSysteminsightsPrograms" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSysteminsightsPrograms_Validate(int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertIsLessThanOrEqual(nameof(limit),limit,100);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `name`.</summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSysteminsightsSafariExtensions(int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsSafariExtensions[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/safari_extensions"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSysteminsightsSafariExtensions_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `name`.</summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSysteminsightsSafariExtensionsViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsSafariExtensions[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systeminsights/safari_extensions$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systeminsights/safari_extensions'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/safari_extensions"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSysteminsightsSafariExtensions_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListSysteminsightsSafariExtensions" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSysteminsightsSafariExtensions_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsSafariExtensions[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.ISystemInsightsSafariExtensions[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.ISystemInsightsSafariExtensions) (JumpCloudApiSdkV2.Models.SystemInsightsSafariExtensions.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListSysteminsightsSafariExtensions" /> method. Call this like the actual call, but you
        /// will get validation events back.
        /// </summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSysteminsightsSafariExtensions_Validate(int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertIsLessThanOrEqual(nameof(limit),limit,100);
            }
        }

        /// <summary>Valid filter fields are `name`.</summary>
        /// <param name="systemId"></param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSysteminsightsSystemApps(string systemId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsChromeExtensions[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/"
                        + global::System.Uri.EscapeDataString(systemId)
                        + "/chrome_extensions"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSysteminsightsSystemApps_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Valid filter fields are `name`.</summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSysteminsightsSystemAppsViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsChromeExtensions[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systeminsights/(?<system_id>[^/]+)/chrome_extensions$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systeminsights/{system_id}/chrome_extensions'");
                }

                // replace URI parameters with values from identity
                var systemId = _match.Groups["system_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/"
                        + systemId
                        + "/chrome_extensions"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSysteminsightsSystemApps_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListSysteminsightsSystemApps" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSysteminsightsSystemApps_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsChromeExtensions[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.ISystemInsightsChromeExtensions[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.ISystemInsightsChromeExtensions) (JumpCloudApiSdkV2.Models.SystemInsightsChromeExtensions.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListSysteminsightsSystemApps" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="systemId"></param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSysteminsightsSystemApps_Validate(string systemId, int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(systemId),systemId);
                await eventListener.AssertIsLessThanOrEqual(nameof(limit),limit,100);
            }
        }

        /// <summary>Valid filter fields are `address`.</summary>
        /// <param name="systemId"></param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSysteminsightsSystemBitlockerInfo(string systemId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsBitlockerInfo[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/"
                        + global::System.Uri.EscapeDataString(systemId)
                        + "/etc_hosts"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSysteminsightsSystemBitlockerInfo_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Valid filter fields are `address`.</summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSysteminsightsSystemBitlockerInfoViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsBitlockerInfo[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systeminsights/(?<system_id>[^/]+)/etc_hosts$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systeminsights/{system_id}/etc_hosts'");
                }

                // replace URI parameters with values from identity
                var systemId = _match.Groups["system_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/"
                        + systemId
                        + "/etc_hosts"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSysteminsightsSystemBitlockerInfo_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// Actual wire call for <see cref="ListSysteminsightsSystemBitlockerInfo" /> method.
        /// </summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSysteminsightsSystemBitlockerInfo_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsBitlockerInfo[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.ISystemInsightsBitlockerInfo[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.ISystemInsightsBitlockerInfo) (JumpCloudApiSdkV2.Models.SystemInsightsBitlockerInfo.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListSysteminsightsSystemBitlockerInfo" /> method. Call this like the actual call, but
        /// you will get validation events back.
        /// </summary>
        /// <param name="systemId"></param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSysteminsightsSystemBitlockerInfo_Validate(string systemId, int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(systemId),systemId);
                await eventListener.AssertIsLessThanOrEqual(nameof(limit),limit,100);
            }
        }

        /// <summary>Valid filter fields are `name`.</summary>
        /// <param name="systemId"></param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSysteminsightsSystemBrowserPlugins(string systemId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsSafariExtensions[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/"
                        + global::System.Uri.EscapeDataString(systemId)
                        + "/safari_extensions"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSysteminsightsSystemBrowserPlugins_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Valid filter fields are `name`.</summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSysteminsightsSystemBrowserPluginsViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsSafariExtensions[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systeminsights/(?<system_id>[^/]+)/safari_extensions$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systeminsights/{system_id}/safari_extensions'");
                }

                // replace URI parameters with values from identity
                var systemId = _match.Groups["system_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/"
                        + systemId
                        + "/safari_extensions"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSysteminsightsSystemBrowserPlugins_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// Actual wire call for <see cref="ListSysteminsightsSystemBrowserPlugins" /> method.
        /// </summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSysteminsightsSystemBrowserPlugins_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsSafariExtensions[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.ISystemInsightsSafariExtensions[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.ISystemInsightsSafariExtensions) (JumpCloudApiSdkV2.Models.SystemInsightsSafariExtensions.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListSysteminsightsSystemBrowserPlugins" /> method. Call this like the actual call, but
        /// you will get validation events back.
        /// </summary>
        /// <param name="systemId"></param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSysteminsightsSystemBrowserPlugins_Validate(string systemId, int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(systemId),systemId);
                await eventListener.AssertIsLessThanOrEqual(nameof(limit),limit,100);
            }
        }

        /// <summary>Valid filter fields are `path`.</summary>
        /// <param name="systemId"></param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSysteminsightsSystemChromeExtensions(string systemId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsMounts[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/"
                        + global::System.Uri.EscapeDataString(systemId)
                        + "/mounts"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSysteminsightsSystemChromeExtensions_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Valid filter fields are `path`.</summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSysteminsightsSystemChromeExtensionsViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsMounts[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systeminsights/(?<system_id>[^/]+)/mounts$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systeminsights/{system_id}/mounts'");
                }

                // replace URI parameters with values from identity
                var systemId = _match.Groups["system_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/"
                        + systemId
                        + "/mounts"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSysteminsightsSystemChromeExtensions_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// Actual wire call for <see cref="ListSysteminsightsSystemChromeExtensions" /> method.
        /// </summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSysteminsightsSystemChromeExtensions_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsMounts[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.ISystemInsightsMounts[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.ISystemInsightsMounts) (JumpCloudApiSdkV2.Models.SystemInsightsMounts.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListSysteminsightsSystemChromeExtensions" /> method. Call this like the actual call,
        /// but you will get validation events back.
        /// </summary>
        /// <param name="systemId"></param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSysteminsightsSystemChromeExtensions_Validate(string systemId, int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(systemId),systemId);
                await eventListener.AssertIsLessThanOrEqual(nameof(limit),limit,100);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `name`.</summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSysteminsightsSystemControls(int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsSystemControls[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/system_controls"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSysteminsightsSystemControls_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Valid filter fields are `protection_status`.</summary>
        /// <param name="systemId"></param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSysteminsightsSystemControls1(string systemId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsBitlockerInfo[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/"
                        + global::System.Uri.EscapeDataString(systemId)
                        + "/bitlocker_info"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSysteminsightsSystemControls1_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Valid filter fields are `protection_status`.</summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSysteminsightsSystemControls1ViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsBitlockerInfo[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systeminsights/(?<system_id>[^/]+)/bitlocker_info$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systeminsights/{system_id}/bitlocker_info'");
                }

                // replace URI parameters with values from identity
                var systemId = _match.Groups["system_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/"
                        + systemId
                        + "/bitlocker_info"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSysteminsightsSystemControls1_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListSysteminsightsSystemControls1" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSysteminsightsSystemControls1_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsBitlockerInfo[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.ISystemInsightsBitlockerInfo[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.ISystemInsightsBitlockerInfo) (JumpCloudApiSdkV2.Models.SystemInsightsBitlockerInfo.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListSysteminsightsSystemControls1" /> method. Call this like the actual call, but you
        /// will get validation events back.
        /// </summary>
        /// <param name="systemId"></param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSysteminsightsSystemControls1_Validate(string systemId, int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(systemId),systemId);
                await eventListener.AssertIsLessThanOrEqual(nameof(limit),limit,100);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `name`.</summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSysteminsightsSystemControlsViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsSystemControls[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systeminsights/system_controls$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systeminsights/system_controls'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/system_controls"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSysteminsightsSystemControls_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListSysteminsightsSystemControls" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSysteminsightsSystemControls_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsSystemControls[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.ISystemInsightsSystemControls[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.ISystemInsightsSystemControls) (JumpCloudApiSdkV2.Models.SystemInsightsSystemControls.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListSysteminsightsSystemControls" /> method. Call this like the actual call, but you
        /// will get validation events back.
        /// </summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSysteminsightsSystemControls_Validate(int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertIsLessThanOrEqual(nameof(limit),limit,100);
            }
        }

        /// <summary>Valid filter fields are `device_id`.</summary>
        /// <param name="systemId"></param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSysteminsightsSystemDiskEncryption(string systemId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsLogicalDrvies[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/"
                        + global::System.Uri.EscapeDataString(systemId)
                        + "/logical_drives"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSysteminsightsSystemDiskEncryption_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Valid filter fields are `device_id`.</summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSysteminsightsSystemDiskEncryptionViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsLogicalDrvies[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systeminsights/(?<system_id>[^/]+)/logical_drives$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systeminsights/{system_id}/logical_drives'");
                }

                // replace URI parameters with values from identity
                var systemId = _match.Groups["system_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/"
                        + systemId
                        + "/logical_drives"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSysteminsightsSystemDiskEncryption_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// Actual wire call for <see cref="ListSysteminsightsSystemDiskEncryption" /> method.
        /// </summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSysteminsightsSystemDiskEncryption_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsLogicalDrvies[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.ISystemInsightsLogicalDrvies[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.ISystemInsightsLogicalDrvies) (JumpCloudApiSdkV2.Models.SystemInsightsLogicalDrvies.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListSysteminsightsSystemDiskEncryption" /> method. Call this like the actual call, but
        /// you will get validation events back.
        /// </summary>
        /// <param name="systemId"></param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSysteminsightsSystemDiskEncryption_Validate(string systemId, int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(systemId),systemId);
                await eventListener.AssertIsLessThanOrEqual(nameof(limit),limit,100);
            }
        }

        /// <summary>Valid filter fields are `hotfix_id `.</summary>
        /// <param name="systemId"></param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSysteminsightsSystemDiskInfo(string systemId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsPatches[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/"
                        + global::System.Uri.EscapeDataString(systemId)
                        + "/patches"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSysteminsightsSystemDiskInfo_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Valid filter fields are `hotfix_id `.</summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSysteminsightsSystemDiskInfoViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsPatches[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systeminsights/(?<system_id>[^/]+)/patches$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systeminsights/{system_id}/patches'");
                }

                // replace URI parameters with values from identity
                var systemId = _match.Groups["system_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/"
                        + systemId
                        + "/patches"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSysteminsightsSystemDiskInfo_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListSysteminsightsSystemDiskInfo" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSysteminsightsSystemDiskInfo_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsPatches[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.ISystemInsightsPatches[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.ISystemInsightsPatches) (JumpCloudApiSdkV2.Models.SystemInsightsPatches.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListSysteminsightsSystemDiskInfo" /> method. Call this like the actual call, but you
        /// will get validation events back.
        /// </summary>
        /// <param name="systemId"></param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSysteminsightsSystemDiskInfo_Validate(string systemId, int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(systemId),systemId);
                await eventListener.AssertIsLessThanOrEqual(nameof(limit),limit,100);
            }
        }

        /// <summary>Valid filter fields are `name`.</summary>
        /// <param name="systemId"></param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSysteminsightsSystemEtcHosts(string systemId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsBrowserPlugins[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/"
                        + global::System.Uri.EscapeDataString(systemId)
                        + "/browser_plugins"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSysteminsightsSystemEtcHosts_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Valid filter fields are `name`.</summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSysteminsightsSystemEtcHostsViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsBrowserPlugins[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systeminsights/(?<system_id>[^/]+)/browser_plugins$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systeminsights/{system_id}/browser_plugins'");
                }

                // replace URI parameters with values from identity
                var systemId = _match.Groups["system_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/"
                        + systemId
                        + "/browser_plugins"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSysteminsightsSystemEtcHosts_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListSysteminsightsSystemEtcHosts" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSysteminsightsSystemEtcHosts_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsBrowserPlugins[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.ISystemInsightsBrowserPlugins[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.ISystemInsightsBrowserPlugins) (JumpCloudApiSdkV2.Models.SystemInsightsBrowserPlugins.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListSysteminsightsSystemEtcHosts" /> method. Call this like the actual call, but you
        /// will get validation events back.
        /// </summary>
        /// <param name="systemId"></param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSysteminsightsSystemEtcHosts_Validate(string systemId, int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(systemId),systemId);
                await eventListener.AssertIsLessThanOrEqual(nameof(limit),limit,100);
            }
        }

        /// <summary>Valid filter fields are `name`.</summary>
        /// <param name="systemId"></param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSysteminsightsSystemFirefoxAddons(string systemId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsFirefoxAddons[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/"
                        + global::System.Uri.EscapeDataString(systemId)
                        + "/firefox_addons"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSysteminsightsSystemFirefoxAddons_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Valid filter fields are `name`.</summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSysteminsightsSystemFirefoxAddonsViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsFirefoxAddons[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systeminsights/(?<system_id>[^/]+)/firefox_addons$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systeminsights/{system_id}/firefox_addons'");
                }

                // replace URI parameters with values from identity
                var systemId = _match.Groups["system_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/"
                        + systemId
                        + "/firefox_addons"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSysteminsightsSystemFirefoxAddons_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// Actual wire call for <see cref="ListSysteminsightsSystemFirefoxAddons" /> method.
        /// </summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSysteminsightsSystemFirefoxAddons_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsFirefoxAddons[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.ISystemInsightsFirefoxAddons[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.ISystemInsightsFirefoxAddons) (JumpCloudApiSdkV2.Models.SystemInsightsFirefoxAddons.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListSysteminsightsSystemFirefoxAddons" /> method. Call this like the actual call, but
        /// you will get validation events back.
        /// </summary>
        /// <param name="systemId"></param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSysteminsightsSystemFirefoxAddons_Validate(string systemId, int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(systemId),systemId);
                await eventListener.AssertIsLessThanOrEqual(nameof(limit),limit,100);
            }
        }

        /// <summary>Valid filter fields are `bundle_name`.</summary>
        /// <param name="systemId"></param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSysteminsightsSystemGroups(string systemId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsApps[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/"
                        + global::System.Uri.EscapeDataString(systemId)
                        + "/apps"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSysteminsightsSystemGroups_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Valid filter fields are `bundle_name`.</summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSysteminsightsSystemGroupsViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsApps[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systeminsights/(?<system_id>[^/]+)/apps$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systeminsights/{system_id}/apps'");
                }

                // replace URI parameters with values from identity
                var systemId = _match.Groups["system_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/"
                        + systemId
                        + "/apps"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSysteminsightsSystemGroups_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListSysteminsightsSystemGroups" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSysteminsightsSystemGroups_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsApps[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.ISystemInsightsApps[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.ISystemInsightsApps) (JumpCloudApiSdkV2.Models.SystemInsightsApps.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListSysteminsightsSystemGroups" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="systemId"></param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSysteminsightsSystemGroups_Validate(string systemId, int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(systemId),systemId);
                await eventListener.AssertIsLessThanOrEqual(nameof(limit),limit,100);
            }
        }

        /// <summary>Valid filter fields are `name`.</summary>
        /// <param name="systemId"></param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSysteminsightsSystemInfo(string systemId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsSystemControls[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/"
                        + global::System.Uri.EscapeDataString(systemId)
                        + "/system_controls"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSysteminsightsSystemInfo_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `cpu_subtype`.</summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSysteminsightsSystemInfo1(int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsSystemInfo[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/system_info"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSysteminsightsSystemInfo1_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `cpu_subtype`.</summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSysteminsightsSystemInfo1ViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsSystemInfo[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systeminsights/system_info$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systeminsights/system_info'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/system_info"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSysteminsightsSystemInfo1_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListSysteminsightsSystemInfo1" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSysteminsightsSystemInfo1_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsSystemInfo[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.ISystemInsightsSystemInfo[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.ISystemInsightsSystemInfo) (JumpCloudApiSdkV2.Models.SystemInsightsSystemInfo.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListSysteminsightsSystemInfo1" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSysteminsightsSystemInfo1_Validate(int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertIsLessThanOrEqual(nameof(limit),limit,100);
            }
        }

        /// <summary>Valid filter fields are `name`.</summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSysteminsightsSystemInfoViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsSystemControls[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systeminsights/(?<system_id>[^/]+)/system_controls$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systeminsights/{system_id}/system_controls'");
                }

                // replace URI parameters with values from identity
                var systemId = _match.Groups["system_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/"
                        + systemId
                        + "/system_controls"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSysteminsightsSystemInfo_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListSysteminsightsSystemInfo" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSysteminsightsSystemInfo_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsSystemControls[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.ISystemInsightsSystemControls[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.ISystemInsightsSystemControls) (JumpCloudApiSdkV2.Models.SystemInsightsSystemControls.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListSysteminsightsSystemInfo" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="systemId"></param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSysteminsightsSystemInfo_Validate(string systemId, int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(systemId),systemId);
                await eventListener.AssertIsLessThanOrEqual(nameof(limit),limit,100);
            }
        }

        /// <summary>Valid filter fields are `encryption_status`.</summary>
        /// <param name="systemId"></param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSysteminsightsSystemInterfaceAddresses(string systemId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsDiskEncryption[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/"
                        + global::System.Uri.EscapeDataString(systemId)
                        + "/disk_encryption"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSysteminsightsSystemInterfaceAddresses_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Valid filter fields are `encryption_status`.</summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSysteminsightsSystemInterfaceAddressesViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsDiskEncryption[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systeminsights/(?<system_id>[^/]+)/disk_encryption$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systeminsights/{system_id}/disk_encryption'");
                }

                // replace URI parameters with values from identity
                var systemId = _match.Groups["system_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/"
                        + systemId
                        + "/disk_encryption"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSysteminsightsSystemInterfaceAddresses_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// Actual wire call for <see cref="ListSysteminsightsSystemInterfaceAddresses" /> method.
        /// </summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSysteminsightsSystemInterfaceAddresses_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsDiskEncryption[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.ISystemInsightsDiskEncryption[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.ISystemInsightsDiskEncryption) (JumpCloudApiSdkV2.Models.SystemInsightsDiskEncryption.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListSysteminsightsSystemInterfaceAddresses" /> method. Call this like the actual call,
        /// but you will get validation events back.
        /// </summary>
        /// <param name="systemId"></param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSysteminsightsSystemInterfaceAddresses_Validate(string systemId, int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(systemId),systemId);
                await eventListener.AssertIsLessThanOrEqual(nameof(limit),limit,100);
            }
        }

        /// <summary>Valid filter fields are `name`.</summary>
        /// <param name="systemId"></param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSysteminsightsSystemKernelInfo(string systemId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsPrograms[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/"
                        + global::System.Uri.EscapeDataString(systemId)
                        + "/programs"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSysteminsightsSystemKernelInfo_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Valid filter fields are `name`.</summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSysteminsightsSystemKernelInfoViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsPrograms[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systeminsights/(?<system_id>[^/]+)/programs$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systeminsights/{system_id}/programs'");
                }

                // replace URI parameters with values from identity
                var systemId = _match.Groups["system_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/"
                        + systemId
                        + "/programs"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSysteminsightsSystemKernelInfo_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListSysteminsightsSystemKernelInfo" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSysteminsightsSystemKernelInfo_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsPrograms[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.ISystemInsightsPrograms[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.ISystemInsightsPrograms) (JumpCloudApiSdkV2.Models.SystemInsightsPrograms.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListSysteminsightsSystemKernelInfo" /> method. Call this like the actual call, but you
        /// will get validation events back.
        /// </summary>
        /// <param name="systemId"></param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSysteminsightsSystemKernelInfo_Validate(string systemId, int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(systemId),systemId);
                await eventListener.AssertIsLessThanOrEqual(nameof(limit),limit,100);
            }
        }

        /// <summary>Valid filter fields are `version`.</summary>
        /// <param name="systemId"></param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSysteminsightsSystemLogicalDrives(string systemId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsOSVersion[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/"
                        + global::System.Uri.EscapeDataString(systemId)
                        + "/os_version"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSysteminsightsSystemLogicalDrives_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Valid filter fields are `version`.</summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSysteminsightsSystemLogicalDrivesViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsOSVersion[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systeminsights/(?<system_id>[^/]+)/os_version$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systeminsights/{system_id}/os_version'");
                }

                // replace URI parameters with values from identity
                var systemId = _match.Groups["system_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/"
                        + systemId
                        + "/os_version"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSysteminsightsSystemLogicalDrives_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// Actual wire call for <see cref="ListSysteminsightsSystemLogicalDrives" /> method.
        /// </summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSysteminsightsSystemLogicalDrives_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsOSVersion[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.ISystemInsightsOSVersion[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.ISystemInsightsOSVersion) (JumpCloudApiSdkV2.Models.SystemInsightsOSVersion.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListSysteminsightsSystemLogicalDrives" /> method. Call this like the actual call, but
        /// you will get validation events back.
        /// </summary>
        /// <param name="systemId"></param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSysteminsightsSystemLogicalDrives_Validate(string systemId, int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(systemId),systemId);
                await eventListener.AssertIsLessThanOrEqual(nameof(limit),limit,100);
            }
        }

        /// <summary>Valid filter fields are `address`.</summary>
        /// <param name="systemId"></param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSysteminsightsSystemMounts(string systemId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsInterfaceAddresses[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/"
                        + global::System.Uri.EscapeDataString(systemId)
                        + "/interface_addresses"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSysteminsightsSystemMounts_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Valid filter fields are `address`.</summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSysteminsightsSystemMountsViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsInterfaceAddresses[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systeminsights/(?<system_id>[^/]+)/interface_addresses$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systeminsights/{system_id}/interface_addresses'");
                }

                // replace URI parameters with values from identity
                var systemId = _match.Groups["system_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/"
                        + systemId
                        + "/interface_addresses"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSysteminsightsSystemMounts_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListSysteminsightsSystemMounts" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSysteminsightsSystemMounts_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsInterfaceAddresses[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.ISystemInsightsInterfaceAddresses[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.ISystemInsightsInterfaceAddresses) (JumpCloudApiSdkV2.Models.SystemInsightsInterfaceAddresses.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListSysteminsightsSystemMounts" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="systemId"></param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSysteminsightsSystemMounts_Validate(string systemId, int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(systemId),systemId);
                await eventListener.AssertIsLessThanOrEqual(nameof(limit),limit,100);
            }
        }

        /// <summary>Valid filter fields are `version`.</summary>
        /// <param name="systemId"></param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSysteminsightsSystemOSVersion(string systemId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsKernelInfo[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/"
                        + global::System.Uri.EscapeDataString(systemId)
                        + "/kernel_info"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSysteminsightsSystemOSVersion_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Valid filter fields are `version`.</summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSysteminsightsSystemOSVersionViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsKernelInfo[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systeminsights/(?<system_id>[^/]+)/kernel_info$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systeminsights/{system_id}/kernel_info'");
                }

                // replace URI parameters with values from identity
                var systemId = _match.Groups["system_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/"
                        + systemId
                        + "/kernel_info"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSysteminsightsSystemOSVersion_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListSysteminsightsSystemOSVersion" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSysteminsightsSystemOSVersion_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsKernelInfo[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.ISystemInsightsKernelInfo[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.ISystemInsightsKernelInfo) (JumpCloudApiSdkV2.Models.SystemInsightsKernelInfo.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListSysteminsightsSystemOSVersion" /> method. Call this like the actual call, but you
        /// will get validation events back.
        /// </summary>
        /// <param name="systemId"></param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSysteminsightsSystemOSVersion_Validate(string systemId, int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(systemId),systemId);
                await eventListener.AssertIsLessThanOrEqual(nameof(limit),limit,100);
            }
        }

        /// <summary>Valid filter fields are `groupname`.</summary>
        /// <param name="systemId"></param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSysteminsightsSystemPatches(string systemId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsGroups[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/"
                        + global::System.Uri.EscapeDataString(systemId)
                        + "/groups"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSysteminsightsSystemPatches_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Valid filter fields are `groupname`.</summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSysteminsightsSystemPatchesViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsGroups[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systeminsights/(?<system_id>[^/]+)/groups$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systeminsights/{system_id}/groups'");
                }

                // replace URI parameters with values from identity
                var systemId = _match.Groups["system_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/"
                        + systemId
                        + "/groups"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSysteminsightsSystemPatches_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListSysteminsightsSystemPatches" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSysteminsightsSystemPatches_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsGroups[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.ISystemInsightsGroups[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.ISystemInsightsGroups) (JumpCloudApiSdkV2.Models.SystemInsightsGroups.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListSysteminsightsSystemPatches" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="systemId"></param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSysteminsightsSystemPatches_Validate(string systemId, int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(systemId),systemId);
                await eventListener.AssertIsLessThanOrEqual(nameof(limit),limit,100);
            }
        }

        /// <summary>Valid filter fields are `username`.</summary>
        /// <param name="systemId"></param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSysteminsightsSystemPrograms(string systemId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsUsers[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/"
                        + global::System.Uri.EscapeDataString(systemId)
                        + "/users"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSysteminsightsSystemPrograms_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Valid filter fields are `username`.</summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSysteminsightsSystemProgramsViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsUsers[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systeminsights/(?<system_id>[^/]+)/users$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systeminsights/{system_id}/users'");
                }

                // replace URI parameters with values from identity
                var systemId = _match.Groups["system_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/"
                        + systemId
                        + "/users"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSysteminsightsSystemPrograms_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListSysteminsightsSystemPrograms" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSysteminsightsSystemPrograms_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsUsers[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.ISystemInsightsUsers[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.ISystemInsightsUsers) (JumpCloudApiSdkV2.Models.SystemInsightsUsers.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListSysteminsightsSystemPrograms" /> method. Call this like the actual call, but you
        /// will get validation events back.
        /// </summary>
        /// <param name="systemId"></param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSysteminsightsSystemPrograms_Validate(string systemId, int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(systemId),systemId);
                await eventListener.AssertIsLessThanOrEqual(nameof(limit),limit,100);
            }
        }

        /// <summary>Valid filter fields are `cpu_subtype`.</summary>
        /// <param name="systemId"></param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSysteminsightsSystemSafariExtensions(string systemId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsSystemInfo[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/"
                        + global::System.Uri.EscapeDataString(systemId)
                        + "/system_info"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSysteminsightsSystemSafariExtensions_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Valid filter fields are `cpu_subtype`.</summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSysteminsightsSystemSafariExtensionsViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsSystemInfo[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systeminsights/(?<system_id>[^/]+)/system_info$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systeminsights/{system_id}/system_info'");
                }

                // replace URI parameters with values from identity
                var systemId = _match.Groups["system_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/"
                        + systemId
                        + "/system_info"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSysteminsightsSystemSafariExtensions_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// Actual wire call for <see cref="ListSysteminsightsSystemSafariExtensions" /> method.
        /// </summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSysteminsightsSystemSafariExtensions_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsSystemInfo[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.ISystemInsightsSystemInfo[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.ISystemInsightsSystemInfo) (JumpCloudApiSdkV2.Models.SystemInsightsSystemInfo.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListSysteminsightsSystemSafariExtensions" /> method. Call this like the actual call,
        /// but you will get validation events back.
        /// </summary>
        /// <param name="systemId"></param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSysteminsightsSystemSafariExtensions_Validate(string systemId, int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(systemId),systemId);
                await eventListener.AssertIsLessThanOrEqual(nameof(limit),limit,100);
            }
        }

        /// <summary>Valid filter fields are `days`.</summary>
        /// <param name="systemId"></param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSysteminsightsSystemUptime(string systemId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsUptime[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/"
                        + global::System.Uri.EscapeDataString(systemId)
                        + "/uptime"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSysteminsightsSystemUptime_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Valid filter fields are `days`.</summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSysteminsightsSystemUptimeViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsUptime[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systeminsights/(?<system_id>[^/]+)/uptime$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systeminsights/{system_id}/uptime'");
                }

                // replace URI parameters with values from identity
                var systemId = _match.Groups["system_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/"
                        + systemId
                        + "/uptime"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSysteminsightsSystemUptime_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListSysteminsightsSystemUptime" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSysteminsightsSystemUptime_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsUptime[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.ISystemInsightsUptime[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.ISystemInsightsUptime) (JumpCloudApiSdkV2.Models.SystemInsightsUptime.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListSysteminsightsSystemUptime" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="systemId"></param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSysteminsightsSystemUptime_Validate(string systemId, int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(systemId),systemId);
                await eventListener.AssertIsLessThanOrEqual(nameof(limit),limit,100);
            }
        }

        /// <summary>Valid filter fields are `disk_index`.</summary>
        /// <param name="systemId"></param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSysteminsightsSystemUsers(string systemId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsBitlockerInfo[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/"
                        + global::System.Uri.EscapeDataString(systemId)
                        + "/disk_info"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSysteminsightsSystemUsers_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Valid filter fields are `disk_index`.</summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSysteminsightsSystemUsersViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsBitlockerInfo[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systeminsights/(?<system_id>[^/]+)/disk_info$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systeminsights/{system_id}/disk_info'");
                }

                // replace URI parameters with values from identity
                var systemId = _match.Groups["system_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/"
                        + systemId
                        + "/disk_info"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSysteminsightsSystemUsers_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListSysteminsightsSystemUsers" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSysteminsightsSystemUsers_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsBitlockerInfo[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.ISystemInsightsBitlockerInfo[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.ISystemInsightsBitlockerInfo) (JumpCloudApiSdkV2.Models.SystemInsightsBitlockerInfo.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListSysteminsightsSystemUsers" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="systemId"></param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSysteminsightsSystemUsers_Validate(string systemId, int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(systemId),systemId);
                await eventListener.AssertIsLessThanOrEqual(nameof(limit),limit,100);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `days`.</summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSysteminsightsUptime(int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsUptime[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/uptime"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSysteminsightsUptime_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `days`.</summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSysteminsightsUptimeViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsUptime[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systeminsights/uptime$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systeminsights/uptime'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/uptime"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSysteminsightsUptime_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListSysteminsightsUptime" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSysteminsightsUptime_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsUptime[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.ISystemInsightsUptime[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.ISystemInsightsUptime) (JumpCloudApiSdkV2.Models.SystemInsightsUptime.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListSysteminsightsUptime" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSysteminsightsUptime_Validate(int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertIsLessThanOrEqual(nameof(limit),limit,100);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `username`.</summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSysteminsightsUsers(int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsUsers[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/users"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSysteminsightsUsers_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `username`.</summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSysteminsightsUsersViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsUsers[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systeminsights/users$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systeminsights/users'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/users"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSysteminsightsUsers_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListSysteminsightsUsers" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSysteminsightsUsers_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsUsers[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.ISystemInsightsUsers[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.ISystemInsightsUsers) (JumpCloudApiSdkV2.Models.SystemInsightsUsers.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListSysteminsightsUsers" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSysteminsightsUsers_Validate(int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertIsLessThanOrEqual(nameof(limit),limit,100);
            }
        }

        /// <summary>
        /// This endpoint returns all graph translation rules for a specific G Suite instance. These rules specify how JumpCloud attributes
        /// translate to [G Suite Admin SDK](https://developers.google.com/admin-sdk/directory/) attributes.
        /// ##### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/gsuites/{gsuite_id}/translationrules \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="gsuiteId"></param>
        /// <param name="fields">The comma separated fields included in the returned records.
        /// If omitted, the default list of fields will be returned.
        /// </param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListTranslationRuleGSuite(string gsuiteId, string[] fields, string[] filter, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGSuiteTranslationRule[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/gsuites/"
                        + global::System.Uri.EscapeDataString(gsuiteId)
                        + "/translationrules"
                        + "?"
                        + (null != fields  && fields.Length > 0 ? "fields=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(fields, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListTranslationRuleGSuite_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns all graph translation rules for a specific G Suite instance. These rules specify how JumpCloud attributes
        /// translate to [G Suite Admin SDK](https://developers.google.com/admin-sdk/directory/) attributes.
        /// ##### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/gsuites/{gsuite_id}/translationrules \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="fields">The comma separated fields included in the returned records.
        /// If omitted, the default list of fields will be returned.
        /// </param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListTranslationRuleGSuiteViaIdentity(global::System.String viaIdentity, string[] fields, string[] filter, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGSuiteTranslationRule[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/gsuites/(?<gsuite_id>[^/]+)/translationrules$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/gsuites/{gsuite_id}/translationrules'");
                }

                // replace URI parameters with values from identity
                var gsuiteId = _match.Groups["gsuite_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/gsuites/"
                        + gsuiteId
                        + "/translationrules"
                        + "?"
                        + (null != fields  && fields.Length > 0 ? "fields=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(fields, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListTranslationRuleGSuite_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListTranslationRuleGSuite" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListTranslationRuleGSuite_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGSuiteTranslationRule[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGSuiteTranslationRule[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGSuiteTranslationRule) (JumpCloudApiSdkV2.Models.GSuiteTranslationRule.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListTranslationRuleGSuite" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="gsuiteId"></param>
        /// <param name="fields">The comma separated fields included in the returned records.
        /// If omitted, the default list of fields will be returned.
        /// </param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListTranslationRuleGSuite_Validate(string gsuiteId, string[] fields, string[] filter, int? limit, int? skip, string[] sort, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(gsuiteId),gsuiteId);
            }
        }

        /// <summary>
        /// This endpoint returns all translation rules for a specific Office 365 instance. These rules specify how JumpCloud attributes
        /// translate to [Microsoft Graph](https://developer.microsoft.com/en-us/graph) attributes.
        /// ##### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/office365s/{office365_id}/translationrules \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="office365Id"></param>
        /// <param name="fields">The comma separated fields included in the returned records.
        /// If omitted, the default list of fields will be returned.
        /// </param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListTranslationRuleOffice365(string office365Id, string[] fields, string[] filter, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IOffice365TranslationRule[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/office365s/"
                        + global::System.Uri.EscapeDataString(office365Id)
                        + "/translationrules"
                        + "?"
                        + (null != fields  && fields.Length > 0 ? "fields=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(fields, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListTranslationRuleOffice365_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns all translation rules for a specific Office 365 instance. These rules specify how JumpCloud attributes
        /// translate to [Microsoft Graph](https://developer.microsoft.com/en-us/graph) attributes.
        /// ##### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/office365s/{office365_id}/translationrules \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="fields">The comma separated fields included in the returned records.
        /// If omitted, the default list of fields will be returned.
        /// </param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListTranslationRuleOffice365ViaIdentity(global::System.String viaIdentity, string[] fields, string[] filter, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IOffice365TranslationRule[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/office365s/(?<office365_id>[^/]+)/translationrules$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/office365s/{office365_id}/translationrules'");
                }

                // replace URI parameters with values from identity
                var office365Id = _match.Groups["office365_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/office365s/"
                        + office365Id
                        + "/translationrules"
                        + "?"
                        + (null != fields  && fields.Length > 0 ? "fields=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(fields, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListTranslationRuleOffice365_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListTranslationRuleOffice365" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListTranslationRuleOffice365_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IOffice365TranslationRule[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IOffice365TranslationRule[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IOffice365TranslationRule) (JumpCloudApiSdkV2.Models.Office365TranslationRule.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListTranslationRuleOffice365" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="office365Id"></param>
        /// <param name="fields">The comma separated fields included in the returned records.
        /// If omitted, the default list of fields will be returned.
        /// </param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListTranslationRuleOffice365_Validate(string office365Id, string[] fields, string[] filter, int? limit, int? skip, string[] sort, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(office365Id),office365Id);
            }
        }

        /// <summary>
        /// This endpoint will return all the available information about all your instances of Workday.
        /// ##### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/workdays/ \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="fields">The comma separated fields included in the returned records.
        /// If omitted, the default list of fields will be returned.
        /// </param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListWorkday(string[] fields, int? limit, int? skip, string[] sort, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IWorkdayOutput[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/workdays"
                        + "?"
                        + (null != fields  && fields.Length > 0 ? "fields=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(fields, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListWorkday_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all the available information about all your instances of Workday.
        /// ##### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/workdays/ \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="fields">The comma separated fields included in the returned records.
        /// If omitted, the default list of fields will be returned.
        /// </param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListWorkdayViaIdentity(global::System.String viaIdentity, string[] fields, int? limit, int? skip, string[] sort, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IWorkdayOutput[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/workdays$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/workdays'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/workdays"
                        + "?"
                        + (null != fields  && fields.Length > 0 ? "fields=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(fields, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListWorkday_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all of the data in your WorkDay Custom Report that has been associated with your WorkDay Instance
        /// in JumpCloud.
        /// ##### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/workdays/{WorkDayID}/workers \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="workdayId"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListWorkdayWorker(string workdayId, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IWorkdayWorker[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/workdays/"
                        + global::System.Uri.EscapeDataString(workdayId)
                        + "/workers"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListWorkdayWorker_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all of the data in your WorkDay Custom Report that has been associated with your WorkDay Instance
        /// in JumpCloud.
        /// ##### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/workdays/{WorkDayID}/workers \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListWorkdayWorkerViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IWorkdayWorker[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/workdays/(?<workday_id>[^/]+)/workers$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/workdays/{workday_id}/workers'");
                }

                // replace URI parameters with values from identity
                var workdayId = _match.Groups["workday_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/workdays/"
                        + workdayId
                        + "/workers"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListWorkdayWorker_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListWorkdayWorker" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListWorkdayWorker_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IWorkdayWorker[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IWorkdayWorker[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IWorkdayWorker) (JumpCloudApiSdkV2.Models.WorkdayWorker.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListWorkdayWorker" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="workdayId"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListWorkdayWorker_Validate(string workdayId, int? limit, int? skip, string[] sort, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(workdayId),workdayId);
            }
        }

        /// <summary>Actual wire call for <see cref="ListWorkday" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListWorkday_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IWorkdayOutput[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IWorkdayOutput[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IWorkdayOutput) (JumpCloudApiSdkV2.Models.WorkdayOutput.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListWorkday" /> method. Call this like the actual call, but you will get validation events
        /// back.
        /// </summary>
        /// <param name="fields">The comma separated fields included in the returned records.
        /// If omitted, the default list of fields will be returned.
        /// </param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListWorkday_Validate(string[] fields, int? limit, int? skip, string[] sort, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {

            }
        }

        /// <summary>
        /// This endpoint allows updating some attributes of a G Suite.
        /// ##### Sample Request
        /// ```
        /// curl -X PATCH https://console.jumpcloud.com/api/v2/gsuites/{GSUITE_ID} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "userLockoutAction": "remove",
        /// "userPasswordExpirationAction": "disable"
        /// }'
        /// ```
        /// </summary>
        /// <param name="id">Unique identifier of the GSuite.</param>
        /// <param name="body">GSuite Patch Input</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task PatchGSuite(string id, JumpCloudApiSdkV2.Models.IGsuitePatchInput body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGsuiteOutput>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/gsuites/"
                        + global::System.Uri.EscapeDataString(id)

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Patch, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.PatchGSuite_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint allows updating some attributes of a G Suite.
        /// ##### Sample Request
        /// ```
        /// curl -X PATCH https://console.jumpcloud.com/api/v2/gsuites/{GSUITE_ID} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "userLockoutAction": "remove",
        /// "userPasswordExpirationAction": "disable"
        /// }'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="body">GSuite Patch Input</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task PatchGSuiteViaIdentity(global::System.String viaIdentity, JumpCloudApiSdkV2.Models.IGsuitePatchInput body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGsuiteOutput>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/gsuites/(?<id>[^/]+)$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/gsuites/{id}'");
                }

                // replace URI parameters with values from identity
                var id = _match.Groups["id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/gsuites/"
                        + id

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Patch, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.PatchGSuite_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="PatchGSuite" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task PatchGSuite_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGsuiteOutput>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.GsuiteOutput.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="PatchGSuite" /> method. Call this like the actual call, but you will get validation events
        /// back.
        /// </summary>
        /// <param name="id">Unique identifier of the GSuite.</param>
        /// <param name="body">GSuite Patch Input</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task PatchGSuite_Validate(string id, JumpCloudApiSdkV2.Models.IGsuitePatchInput body, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(id),id);
                await eventListener.AssertNotNull(nameof(body), body);
                await eventListener.AssertObjectIsValid(nameof(body), body);
            }
        }

        /// <summary>
        /// This endpoint allows updating some attributes of an LDAP server.
        /// Sample Request
        /// ```
        /// curl -X PATCH https://console.jumpcloud.com/api/v2/ldapservers/{LDAP_ID} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "userLockoutAction": "remove",
        /// "userPasswordExpirationAction": "disable"
        /// }'
        /// ```
        /// </summary>
        /// <param name="id">Unique identifier of the LDAP server.</param>
        /// <param name="xApiKey"></param>
        /// <param name="xOrgId"></param>
        /// <param name="body"></param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onBadRequest">a delegate that is called when the remote service returns 400 (BadRequest).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task PatchLdapServer(string id, string xApiKey, string xOrgId, JumpCloudApiSdkV2.Models.IBodyParameterPatchLdapServerRequestBody body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IPathsLdapserversIdPatchResponses200ContentApplicationJsonSchema>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IPathsLdapserversIdPatchResponses400ContentApplicationJsonSchema>, global::System.Threading.Tasks.Task> onBadRequest, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/ldapservers/"
                        + global::System.Uri.EscapeDataString(id)

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Patch, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // add headers parameters
                if (null != xApiKey)
                {
                    request.Headers.Add("x-api-key",xApiKey);
                }
                if (null != xOrgId)
                {
                    request.Headers.Add("x-org-id",xOrgId);
                }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.PatchLdapServer_Call(request,onOk,onBadRequest,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint allows updating some attributes of an LDAP server.
        /// Sample Request
        /// ```
        /// curl -X PATCH https://console.jumpcloud.com/api/v2/ldapservers/{LDAP_ID} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "userLockoutAction": "remove",
        /// "userPasswordExpirationAction": "disable"
        /// }'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="xApiKey"></param>
        /// <param name="xOrgId"></param>
        /// <param name="body"></param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onBadRequest">a delegate that is called when the remote service returns 400 (BadRequest).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task PatchLdapServerViaIdentity(global::System.String viaIdentity, string xApiKey, string xOrgId, JumpCloudApiSdkV2.Models.IBodyParameterPatchLdapServerRequestBody body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IPathsLdapserversIdPatchResponses200ContentApplicationJsonSchema>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IPathsLdapserversIdPatchResponses400ContentApplicationJsonSchema>, global::System.Threading.Tasks.Task> onBadRequest, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/ldapservers/(?<id>[^/]+)$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/ldapservers/{id}'");
                }

                // replace URI parameters with values from identity
                var id = _match.Groups["id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/ldapservers/"
                        + id

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Patch, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // add headers parameters
                if (null != xApiKey)
                {
                    request.Headers.Add("x-api-key",xApiKey);
                }
                if (null != xOrgId)
                {
                    request.Headers.Add("x-org-id",xOrgId);
                }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.PatchLdapServer_Call(request,onOk,onBadRequest,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="PatchLdapServer" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onBadRequest">a delegate that is called when the remote service returns 400 (BadRequest).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task PatchLdapServer_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IPathsLdapserversIdPatchResponses200ContentApplicationJsonSchema>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IPathsLdapserversIdPatchResponses400ContentApplicationJsonSchema>, global::System.Threading.Tasks.Task> onBadRequest, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.PathsLdapserversIdPatchResponses200ContentApplicationJsonSchema.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.BadRequest:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onBadRequest(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.PathsLdapserversIdPatchResponses400ContentApplicationJsonSchema.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="PatchLdapServer" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="id">Unique identifier of the LDAP server.</param>
        /// <param name="xApiKey"></param>
        /// <param name="xOrgId"></param>
        /// <param name="body"></param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task PatchLdapServer_Validate(string id, string xApiKey, string xOrgId, JumpCloudApiSdkV2.Models.IBodyParameterPatchLdapServerRequestBody body, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(id),id);
                await eventListener.AssertNotNull(nameof(xApiKey),xApiKey);
                await eventListener.AssertNotNull(nameof(xOrgId),xOrgId);
                await eventListener.AssertNotNull(nameof(body), body);
                await eventListener.AssertObjectIsValid(nameof(body), body);
            }
        }

        /// <summary>
        /// This endpoint allows you to update the samba domain information for an LDAP server.
        /// ##### Sample Request
        /// ```
        /// curl -X PUT https://console.jumpcloud.com/api/v2/ldapservers/{LDAP_ID}/sambadomains/{SAMBA_ID} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "sid":"{SID_ID}",
        /// "name":"{WORKGROUP_NAME}"
        /// }'
        /// ```
        /// </summary>
        /// <param name="ldapserverId">Unique identifier of the LDAP server.</param>
        /// <param name="id">Unique identifier of the samba domain.</param>
        /// <param name="contentType"></param>
        /// <param name="accept"></param>
        /// <param name="body">Samba Domain Input</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task PutLdapServerSambaDomain(string ldapserverId, string id, string contentType, string accept, JumpCloudApiSdkV2.Models.ISambaDomainInput body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISambaDomainOutput>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/ldapservers/"
                        + global::System.Uri.EscapeDataString(ldapserverId)
                        + "/sambadomains/"
                        + global::System.Uri.EscapeDataString(id)

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Put, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // add headers parameters
                if (null != contentType)
                {
                    request.Headers.Add("Content-Type",contentType);
                }
                if (null != accept)
                {
                    request.Headers.Add("Accept",accept);
                }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.PutLdapServerSambaDomain_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint allows you to update the samba domain information for an LDAP server.
        /// ##### Sample Request
        /// ```
        /// curl -X PUT https://console.jumpcloud.com/api/v2/ldapservers/{LDAP_ID}/sambadomains/{SAMBA_ID} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "sid":"{SID_ID}",
        /// "name":"{WORKGROUP_NAME}"
        /// }'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="contentType"></param>
        /// <param name="accept"></param>
        /// <param name="body">Samba Domain Input</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task PutLdapServerSambaDomainViaIdentity(global::System.String viaIdentity, string contentType, string accept, JumpCloudApiSdkV2.Models.ISambaDomainInput body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISambaDomainOutput>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/ldapservers/(?<ldapserver_id>[^/]+)/sambadomains/(?<id>[^/]+)$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/ldapservers/{ldapserver_id}/sambadomains/{id}'");
                }

                // replace URI parameters with values from identity
                var ldapserverId = _match.Groups["ldapserver_id"].Value;
                var id = _match.Groups["id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/ldapservers/"
                        + ldapserverId
                        + "/sambadomains/"
                        + id

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Put, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // add headers parameters
                if (null != contentType)
                {
                    request.Headers.Add("Content-Type",contentType);
                }
                if (null != accept)
                {
                    request.Headers.Add("Accept",accept);
                }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.PutLdapServerSambaDomain_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="PutLdapServerSambaDomain" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task PutLdapServerSambaDomain_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISambaDomainOutput>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.SambaDomainOutput.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="PutLdapServerSambaDomain" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="ldapserverId">Unique identifier of the LDAP server.</param>
        /// <param name="id">Unique identifier of the samba domain.</param>
        /// <param name="contentType"></param>
        /// <param name="accept"></param>
        /// <param name="body">Samba Domain Input</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task PutLdapServerSambaDomain_Validate(string ldapserverId, string id, string contentType, string accept, JumpCloudApiSdkV2.Models.ISambaDomainInput body, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(ldapserverId),ldapserverId);
                await eventListener.AssertNotNull(nameof(id),id);
                await eventListener.AssertNotNull(nameof(contentType),contentType);
                await eventListener.AssertNotNull(nameof(accept),accept);
                await eventListener.AssertNotNull(nameof(body), body);
                await eventListener.AssertObjectIsValid(nameof(body), body);
            }
        }

        /// <summary>
        /// This endpoint allows you to update a policy. Given the amount of configurable parameters required to update a Policy,
        /// we suggest you use the JumpCloud Admin Console to create new policies.
        /// ##### Sample Request
        /// ```
        /// curl -X PUT https://console.jumpcloud.com/api/v2/policies/59fced45c9118022172547ff \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY' \
        /// -d '{
        /// {Policy_Parameters}
        /// }'
        /// ```
        /// </summary>
        /// <param name="id">ObjectID of the Policy object.</param>
        /// <param name="body">An instance of a policy template.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task PutPolicy(string id, JumpCloudApiSdkV2.Models.IPolicyRequest body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IPolicy>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/policies/"
                        + global::System.Uri.EscapeDataString(id)

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Put, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.PutPolicy_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint allows you to update a policy. Given the amount of configurable parameters required to update a Policy,
        /// we suggest you use the JumpCloud Admin Console to create new policies.
        /// ##### Sample Request
        /// ```
        /// curl -X PUT https://console.jumpcloud.com/api/v2/policies/59fced45c9118022172547ff \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY' \
        /// -d '{
        /// {Policy_Parameters}
        /// }'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="body">An instance of a policy template.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task PutPolicyViaIdentity(global::System.String viaIdentity, JumpCloudApiSdkV2.Models.IPolicyRequest body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IPolicy>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/policies/(?<id>[^/]+)$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/policies/{id}'");
                }

                // replace URI parameters with values from identity
                var id = _match.Groups["id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/policies/"
                        + id

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Put, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.PutPolicy_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="PutPolicy" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task PutPolicy_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IPolicy>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.Policy.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="PutPolicy" /> method. Call this like the actual call, but you will get validation events
        /// back.
        /// </summary>
        /// <param name="id">ObjectID of the Policy object.</param>
        /// <param name="body">An instance of a policy template.</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task PutPolicy_Validate(string id, JumpCloudApiSdkV2.Models.IPolicyRequest body, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(id),id);
                await eventListener.AssertNotNull(nameof(body), body);
                await eventListener.AssertObjectIsValid(nameof(body), body);
            }
        }

        /// <summary>
        /// Removes any and all authorization methods from the workday instance
        /// ##### Sample Request
        /// ```
        /// curl -X DELETE https://console.jumpcloud.com/api/v2/workdays/{WorkDayID}/auth \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="workdayId"></param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task RemoveWorkdayAuthorization(string workdayId, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/workdays/"
                        + global::System.Uri.EscapeDataString(workdayId)
                        + "/auth"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Delete, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.RemoveWorkdayAuthorization_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>
        /// Removes any and all authorization methods from the workday instance
        /// ##### Sample Request
        /// ```
        /// curl -X DELETE https://console.jumpcloud.com/api/v2/workdays/{WorkDayID}/auth \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task RemoveWorkdayAuthorizationViaIdentity(global::System.String viaIdentity, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/workdays/(?<workday_id>[^/]+)/auth$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/workdays/{workday_id}/auth'");
                }

                // replace URI parameters with values from identity
                var workdayId = _match.Groups["workday_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/workdays/"
                        + workdayId
                        + "/auth"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Delete, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.RemoveWorkdayAuthorization_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="RemoveWorkdayAuthorization" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task RemoveWorkdayAuthorization_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.NoContent:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onNoContent(_response);
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="RemoveWorkdayAuthorization" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="workdayId"></param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task RemoveWorkdayAuthorization_Validate(string workdayId, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(workdayId),workdayId);
            }
        }

        /// <summary>
        /// This endpoint allows you to manage the _direct_ associations of an Application. A direct association can be a non-homogeneous
        /// relationship between 2 different objects, for example Application and User Groups.
        /// #### Sample Request
        /// ```
        /// curl -X POST 'https://console.jumpcloud.com/api/v2/applications/{Application_ID}/associations' \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "op": "add",
        /// "type": "user_group",
        /// "id": "{Group_ID}"
        /// }'
        /// ```
        /// </summary>
        /// <param name="applicationId">ObjectID of the Application.</param>
        /// <param name="body">GraphManagementReq</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SetGraphApplicationAssociation(string applicationId, JumpCloudApiSdkV2.Models.IGraphManagementReq body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/applications/"
                        + global::System.Uri.EscapeDataString(applicationId)
                        + "/associations"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SetGraphApplicationAssociation_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint allows you to manage the _direct_ associations of an Application. A direct association can be a non-homogeneous
        /// relationship between 2 different objects, for example Application and User Groups.
        /// #### Sample Request
        /// ```
        /// curl -X POST 'https://console.jumpcloud.com/api/v2/applications/{Application_ID}/associations' \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "op": "add",
        /// "type": "user_group",
        /// "id": "{Group_ID}"
        /// }'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="body">GraphManagementReq</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SetGraphApplicationAssociationViaIdentity(global::System.String viaIdentity, JumpCloudApiSdkV2.Models.IGraphManagementReq body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/applications/(?<application_id>[^/]+)/associations$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/applications/{application_id}/associations'");
                }

                // replace URI parameters with values from identity
                var applicationId = _match.Groups["application_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/applications/"
                        + applicationId
                        + "/associations"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SetGraphApplicationAssociation_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="SetGraphApplicationAssociation" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SetGraphApplicationAssociation_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.NoContent:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onNoContent(_response);
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="SetGraphApplicationAssociation" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="applicationId">ObjectID of the Application.</param>
        /// <param name="body">GraphManagementReq</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SetGraphApplicationAssociation_Validate(string applicationId, JumpCloudApiSdkV2.Models.IGraphManagementReq body, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(applicationId),applicationId);
                await eventListener.AssertNotNull(nameof(body), body);
                await eventListener.AssertObjectIsValid(nameof(body), body);
            }
        }

        /// <summary>
        /// This endpoint will allow you to manage the _direct_ associations of this Command.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example Commands and User
        /// Groups.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/commands/{Command_ID}/associations \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "op": "add",
        /// "type": "system_group",
        /// "id": "Group_ID"
        /// }'
        /// ```
        /// </summary>
        /// <param name="commandId">ObjectID of the Command.</param>
        /// <param name="body">GraphManagementReq</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SetGraphCommandAssociation(string commandId, JumpCloudApiSdkV2.Models.IGraphManagementReq body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/commands/"
                        + global::System.Uri.EscapeDataString(commandId)
                        + "/associations"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SetGraphCommandAssociation_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will allow you to manage the _direct_ associations of this Command.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example Commands and User
        /// Groups.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/commands/{Command_ID}/associations \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "op": "add",
        /// "type": "system_group",
        /// "id": "Group_ID"
        /// }'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="body">GraphManagementReq</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SetGraphCommandAssociationViaIdentity(global::System.String viaIdentity, JumpCloudApiSdkV2.Models.IGraphManagementReq body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/commands/(?<command_id>[^/]+)/associations$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/commands/{command_id}/associations'");
                }

                // replace URI parameters with values from identity
                var commandId = _match.Groups["command_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/commands/"
                        + commandId
                        + "/associations"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SetGraphCommandAssociation_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="SetGraphCommandAssociation" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SetGraphCommandAssociation_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.NoContent:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onNoContent(_response);
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="SetGraphCommandAssociation" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="commandId">ObjectID of the Command.</param>
        /// <param name="body">GraphManagementReq</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SetGraphCommandAssociation_Validate(string commandId, JumpCloudApiSdkV2.Models.IGraphManagementReq body, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(commandId),commandId);
                await eventListener.AssertNotNull(nameof(body), body);
                await eventListener.AssertObjectIsValid(nameof(body), body);
            }
        }

        /// <summary>
        /// This endpoint returns the _direct_ associations of this G Suite instance.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example G Suite and Users.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/gsuites/{Gsuite_ID}/associations \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "op": "add",
        /// "type": "user_group",
        /// "id": "{Group_ID}"
        /// }'
        /// ```
        /// </summary>
        /// <param name="gsuiteId">ObjectID of the G Suite instance.</param>
        /// <param name="body">GraphManagementReq</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SetGraphGSuiteAssociation(string gsuiteId, JumpCloudApiSdkV2.Models.IGraphManagementReq body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/gsuites/"
                        + global::System.Uri.EscapeDataString(gsuiteId)
                        + "/associations"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SetGraphGSuiteAssociation_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns the _direct_ associations of this G Suite instance.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example G Suite and Users.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/gsuites/{Gsuite_ID}/associations \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "op": "add",
        /// "type": "user_group",
        /// "id": "{Group_ID}"
        /// }'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="body">GraphManagementReq</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SetGraphGSuiteAssociationViaIdentity(global::System.String viaIdentity, JumpCloudApiSdkV2.Models.IGraphManagementReq body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/gsuites/(?<gsuite_id>[^/]+)/associations$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/gsuites/{gsuite_id}/associations'");
                }

                // replace URI parameters with values from identity
                var gsuiteId = _match.Groups["gsuite_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/gsuites/"
                        + gsuiteId
                        + "/associations"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SetGraphGSuiteAssociation_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="SetGraphGSuiteAssociation" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SetGraphGSuiteAssociation_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.NoContent:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onNoContent(_response);
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="SetGraphGSuiteAssociation" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="gsuiteId">ObjectID of the G Suite instance.</param>
        /// <param name="body">GraphManagementReq</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SetGraphGSuiteAssociation_Validate(string gsuiteId, JumpCloudApiSdkV2.Models.IGraphManagementReq body, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(gsuiteId),gsuiteId);
                await eventListener.AssertNotNull(nameof(body), body);
                await eventListener.AssertObjectIsValid(nameof(body), body);
            }
        }

        /// <summary>
        /// This endpoint allows you to manage the _direct_ associations of a LDAP Server.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example LDAP and Users.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/ldapservers/{LDAP_ID}/associations \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "op": "add",
        /// "type": "user",
        /// "id": "{User_ID}"
        /// }'
        /// ```
        /// </summary>
        /// <param name="ldapserverId">ObjectID of the LDAP Server.</param>
        /// <param name="body">GraphManagementReq</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SetGraphLdapServerAssociation(string ldapserverId, JumpCloudApiSdkV2.Models.IGraphManagementReq body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/ldapservers/"
                        + global::System.Uri.EscapeDataString(ldapserverId)
                        + "/associations"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SetGraphLdapServerAssociation_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint allows you to manage the _direct_ associations of a LDAP Server.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example LDAP and Users.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/ldapservers/{LDAP_ID}/associations \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "op": "add",
        /// "type": "user",
        /// "id": "{User_ID}"
        /// }'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="body">GraphManagementReq</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SetGraphLdapServerAssociationViaIdentity(global::System.String viaIdentity, JumpCloudApiSdkV2.Models.IGraphManagementReq body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/ldapservers/(?<ldapserver_id>[^/]+)/associations$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/ldapservers/{ldapserver_id}/associations'");
                }

                // replace URI parameters with values from identity
                var ldapserverId = _match.Groups["ldapserver_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/ldapservers/"
                        + ldapserverId
                        + "/associations"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SetGraphLdapServerAssociation_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="SetGraphLdapServerAssociation" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SetGraphLdapServerAssociation_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.NoContent:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onNoContent(_response);
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="SetGraphLdapServerAssociation" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="ldapserverId">ObjectID of the LDAP Server.</param>
        /// <param name="body">GraphManagementReq</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SetGraphLdapServerAssociation_Validate(string ldapserverId, JumpCloudApiSdkV2.Models.IGraphManagementReq body, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(ldapserverId),ldapserverId);
                await eventListener.AssertNotNull(nameof(body), body);
                await eventListener.AssertObjectIsValid(nameof(body), body);
            }
        }

        /// <summary>
        /// This endpoint allows you to manage the _direct_ associations of a Office 365 instance.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example Office 365 and Users.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/office365s/{O365_ID}/associations \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "op": "add",
        /// "type": "user_group",
        /// "id": "{Group_ID}"
        /// }'
        /// ```
        /// </summary>
        /// <param name="office365Id">ObjectID of the Office 365 instance.</param>
        /// <param name="body">GraphManagementReq</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SetGraphOffice365Association(string office365Id, JumpCloudApiSdkV2.Models.IGraphManagementReq body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/office365s/"
                        + global::System.Uri.EscapeDataString(office365Id)
                        + "/associations"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SetGraphOffice365Association_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint allows you to manage the _direct_ associations of a Office 365 instance.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example Office 365 and Users.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/office365s/{O365_ID}/associations \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "op": "add",
        /// "type": "user_group",
        /// "id": "{Group_ID}"
        /// }'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="body">GraphManagementReq</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SetGraphOffice365AssociationViaIdentity(global::System.String viaIdentity, JumpCloudApiSdkV2.Models.IGraphManagementReq body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/office365s/(?<office365_id>[^/]+)/associations$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/office365s/{office365_id}/associations'");
                }

                // replace URI parameters with values from identity
                var office365Id = _match.Groups["office365_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/office365s/"
                        + office365Id
                        + "/associations"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SetGraphOffice365Association_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="SetGraphOffice365Association" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SetGraphOffice365Association_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.NoContent:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onNoContent(_response);
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="SetGraphOffice365Association" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="office365Id">ObjectID of the Office 365 instance.</param>
        /// <param name="body">GraphManagementReq</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SetGraphOffice365Association_Validate(string office365Id, JumpCloudApiSdkV2.Models.IGraphManagementReq body, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(office365Id),office365Id);
                await eventListener.AssertNotNull(nameof(body), body);
                await eventListener.AssertObjectIsValid(nameof(body), body);
            }
        }

        /// <summary>
        /// This endpoint allows you to manage the _direct_ associations of a Policy.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example Policies and Systems.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/policies/{Policy_ID}/associations/ \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "op": "add",
        /// "type": "system_group",
        /// "id": "{Group_ID}"
        /// }'
        /// ```
        /// </summary>
        /// <param name="policyId">ObjectID of the Policy.</param>
        /// <param name="body">GraphManagementReq</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SetGraphPolicyAssociation(string policyId, JumpCloudApiSdkV2.Models.IGraphManagementReq body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/policies/"
                        + global::System.Uri.EscapeDataString(policyId)
                        + "/associations"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SetGraphPolicyAssociation_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint allows you to manage the _direct_ associations of a Policy.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example Policies and Systems.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/policies/{Policy_ID}/associations/ \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "op": "add",
        /// "type": "system_group",
        /// "id": "{Group_ID}"
        /// }'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="body">GraphManagementReq</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SetGraphPolicyAssociationViaIdentity(global::System.String viaIdentity, JumpCloudApiSdkV2.Models.IGraphManagementReq body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/policies/(?<policy_id>[^/]+)/associations$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/policies/{policy_id}/associations'");
                }

                // replace URI parameters with values from identity
                var policyId = _match.Groups["policy_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/policies/"
                        + policyId
                        + "/associations"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SetGraphPolicyAssociation_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="SetGraphPolicyAssociation" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SetGraphPolicyAssociation_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.NoContent:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onNoContent(_response);
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="SetGraphPolicyAssociation" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="policyId">ObjectID of the Policy.</param>
        /// <param name="body">GraphManagementReq</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SetGraphPolicyAssociation_Validate(string policyId, JumpCloudApiSdkV2.Models.IGraphManagementReq body, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(policyId),policyId);
                await eventListener.AssertNotNull(nameof(body), body);
                await eventListener.AssertObjectIsValid(nameof(body), body);
            }
        }

        /// <summary>
        /// This endpoint allows you to manage the _direct_ associations of a Radius Server.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example Radius Servers and
        /// Users.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/radiusservers/{RADIUS_ID}/associations \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        ///
        /// "type":"user",
        /// "id":"{USER_ID}",
        /// "op":"add"
        ///
        /// }'
        /// ```
        /// </summary>
        /// <param name="radiusserverId">ObjectID of the Radius Server.</param>
        /// <param name="body">GraphManagementReq</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SetGraphRadiusServerAssociation(string radiusserverId, JumpCloudApiSdkV2.Models.IGraphManagementReq body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/radiusservers/"
                        + global::System.Uri.EscapeDataString(radiusserverId)
                        + "/associations"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SetGraphRadiusServerAssociation_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint allows you to manage the _direct_ associations of a Radius Server.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example Radius Servers and
        /// Users.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/radiusservers/{RADIUS_ID}/associations \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        ///
        /// "type":"user",
        /// "id":"{USER_ID}",
        /// "op":"add"
        ///
        /// }'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="body">GraphManagementReq</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SetGraphRadiusServerAssociationViaIdentity(global::System.String viaIdentity, JumpCloudApiSdkV2.Models.IGraphManagementReq body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/radiusservers/(?<radiusserver_id>[^/]+)/associations$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/radiusservers/{radiusserver_id}/associations'");
                }

                // replace URI parameters with values from identity
                var radiusserverId = _match.Groups["radiusserver_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/radiusservers/"
                        + radiusserverId
                        + "/associations"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SetGraphRadiusServerAssociation_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="SetGraphRadiusServerAssociation" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SetGraphRadiusServerAssociation_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.NoContent:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onNoContent(_response);
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="SetGraphRadiusServerAssociation" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="radiusserverId">ObjectID of the Radius Server.</param>
        /// <param name="body">GraphManagementReq</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SetGraphRadiusServerAssociation_Validate(string radiusserverId, JumpCloudApiSdkV2.Models.IGraphManagementReq body, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(radiusserverId),radiusserverId);
                await eventListener.AssertNotNull(nameof(body), body);
                await eventListener.AssertObjectIsValid(nameof(body), body);
            }
        }

        /// <summary>
        /// This endpoint allows you to manage the _direct_ associations of a System.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example Systems and Users.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/systems/{System_ID}/associations \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "attributes": {
        /// "sudo": {
        /// "enabled": true,
        /// "withoutPassword": false
        /// }
        /// },
        /// "op": "add",
        /// "type": "user",
        /// "id": "UserID"
        /// }'
        /// ```
        /// </summary>
        /// <param name="systemId">ObjectID of the System.</param>
        /// <param name="date">Current date header for the System Context API</param>
        /// <param name="authorization">Authorization header for the System Context API</param>
        /// <param name="body">SystemGraphManagementReq</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SetGraphSystemAssociation(string systemId, string date, string authorization, JumpCloudApiSdkV2.Models.ISystemGraphManagementReq body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systems/"
                        + global::System.Uri.EscapeDataString(systemId)
                        + "/associations"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // add headers parameters
                if (null != date)
                {
                    request.Headers.Add("Date",date);
                }
                if (null != authorization)
                {
                    request.Headers.Add("Authorization",authorization);
                }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SetGraphSystemAssociation_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint allows you to manage the _direct_ associations of a System.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example Systems and Users.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/systems/{System_ID}/associations \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "attributes": {
        /// "sudo": {
        /// "enabled": true,
        /// "withoutPassword": false
        /// }
        /// },
        /// "op": "add",
        /// "type": "user",
        /// "id": "UserID"
        /// }'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="date">Current date header for the System Context API</param>
        /// <param name="authorization">Authorization header for the System Context API</param>
        /// <param name="body">SystemGraphManagementReq</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SetGraphSystemAssociationViaIdentity(global::System.String viaIdentity, string date, string authorization, JumpCloudApiSdkV2.Models.ISystemGraphManagementReq body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systems/(?<system_id>[^/]+)/associations$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systems/{system_id}/associations'");
                }

                // replace URI parameters with values from identity
                var systemId = _match.Groups["system_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systems/"
                        + systemId
                        + "/associations"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // add headers parameters
                if (null != date)
                {
                    request.Headers.Add("Date",date);
                }
                if (null != authorization)
                {
                    request.Headers.Add("Authorization",authorization);
                }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SetGraphSystemAssociation_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="SetGraphSystemAssociation" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SetGraphSystemAssociation_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.NoContent:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onNoContent(_response);
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="SetGraphSystemAssociation" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="systemId">ObjectID of the System.</param>
        /// <param name="date">Current date header for the System Context API</param>
        /// <param name="authorization">Authorization header for the System Context API</param>
        /// <param name="body">SystemGraphManagementReq</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SetGraphSystemAssociation_Validate(string systemId, string date, string authorization, JumpCloudApiSdkV2.Models.ISystemGraphManagementReq body, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(systemId),systemId);
                await eventListener.AssertNotNull(nameof(date),date);
                await eventListener.AssertNotNull(nameof(authorization),authorization);
                await eventListener.AssertNotNull(nameof(body), body);
                await eventListener.AssertObjectIsValid(nameof(body), body);
            }
        }

        /// <summary>
        /// This endpoint allows you to manage the _direct_ associations of a System Group.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example System Groups and
        /// Users.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/systemgroups/{GroupID}/associations \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "op": "add",
        /// "type": "user",
        /// "id": "{UserID}"
        /// }'
        /// ```
        /// </summary>
        /// <param name="groupId">ObjectID of the System Group.</param>
        /// <param name="body">SystemGroupGraphManagementReq</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SetGraphSystemGroupAssociation(string groupId, JumpCloudApiSdkV2.Models.ISystemGroupGraphManagementReq body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systemgroups/"
                        + global::System.Uri.EscapeDataString(groupId)
                        + "/associations"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SetGraphSystemGroupAssociation_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint allows you to manage the _direct_ associations of a System Group.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example System Groups and
        /// Users.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/systemgroups/{GroupID}/associations \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "op": "add",
        /// "type": "user",
        /// "id": "{UserID}"
        /// }'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="body">SystemGroupGraphManagementReq</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SetGraphSystemGroupAssociationViaIdentity(global::System.String viaIdentity, JumpCloudApiSdkV2.Models.ISystemGroupGraphManagementReq body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systemgroups/(?<group_id>[^/]+)/associations$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systemgroups/{group_id}/associations'");
                }

                // replace URI parameters with values from identity
                var groupId = _match.Groups["group_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systemgroups/"
                        + groupId
                        + "/associations"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SetGraphSystemGroupAssociation_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="SetGraphSystemGroupAssociation" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SetGraphSystemGroupAssociation_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.NoContent:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onNoContent(_response);
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="SetGraphSystemGroupAssociation" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="groupId">ObjectID of the System Group.</param>
        /// <param name="body">SystemGroupGraphManagementReq</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SetGraphSystemGroupAssociation_Validate(string groupId, JumpCloudApiSdkV2.Models.ISystemGroupGraphManagementReq body, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(groupId),groupId);
                await eventListener.AssertNotNull(nameof(body), body);
                await eventListener.AssertObjectIsValid(nameof(body), body);
            }
        }

        /// <summary>
        /// This endpoint allows you to manage the system members of a System Group.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/systemgroups/{Group_ID}/members \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "op": "add",
        /// "type": "system",
        /// "id": "{System_ID}"
        /// }'
        /// ```
        /// </summary>
        /// <param name="groupId">ObjectID of the System Group.</param>
        /// <param name="date">Current date header for the System Context API</param>
        /// <param name="authorization">Authorization header for the System Context API</param>
        /// <param name="body">SystemGroupMembersReq</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SetGraphSystemGroupMembers(string groupId, string date, string authorization, JumpCloudApiSdkV2.Models.ISystemGroupMembersReq body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systemgroups/"
                        + global::System.Uri.EscapeDataString(groupId)
                        + "/members"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // add headers parameters
                if (null != date)
                {
                    request.Headers.Add("Date",date);
                }
                if (null != authorization)
                {
                    request.Headers.Add("Authorization",authorization);
                }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SetGraphSystemGroupMembers_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint allows you to manage the system members of a System Group.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/systemgroups/{Group_ID}/members \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "op": "add",
        /// "type": "system",
        /// "id": "{System_ID}"
        /// }'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="date">Current date header for the System Context API</param>
        /// <param name="authorization">Authorization header for the System Context API</param>
        /// <param name="body">SystemGroupMembersReq</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SetGraphSystemGroupMembersViaIdentity(global::System.String viaIdentity, string date, string authorization, JumpCloudApiSdkV2.Models.ISystemGroupMembersReq body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systemgroups/(?<group_id>[^/]+)/members$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systemgroups/{group_id}/members'");
                }

                // replace URI parameters with values from identity
                var groupId = _match.Groups["group_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systemgroups/"
                        + groupId
                        + "/members"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // add headers parameters
                if (null != date)
                {
                    request.Headers.Add("Date",date);
                }
                if (null != authorization)
                {
                    request.Headers.Add("Authorization",authorization);
                }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SetGraphSystemGroupMembers_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="SetGraphSystemGroupMembers" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SetGraphSystemGroupMembers_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.NoContent:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onNoContent(_response);
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="SetGraphSystemGroupMembers" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="groupId">ObjectID of the System Group.</param>
        /// <param name="date">Current date header for the System Context API</param>
        /// <param name="authorization">Authorization header for the System Context API</param>
        /// <param name="body">SystemGroupMembersReq</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SetGraphSystemGroupMembers_Validate(string groupId, string date, string authorization, JumpCloudApiSdkV2.Models.ISystemGroupMembersReq body, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(groupId),groupId);
                await eventListener.AssertNotNull(nameof(date),date);
                await eventListener.AssertNotNull(nameof(authorization),authorization);
                await eventListener.AssertNotNull(nameof(body), body);
                await eventListener.AssertObjectIsValid(nameof(body), body);
            }
        }

        /// <summary>
        /// This endpoint allows you to manage the _direct_ associations of a User.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example Users and Systems.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/users/{UserID}/associations \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "attributes": {
        /// "sudo": {
        /// "enabled": true,
        /// "withoutPassword": false
        /// }
        /// },
        /// "op": "add",
        /// "type": "system_group",
        /// "id": "{GroupID}"
        /// }'
        /// </summary>
        /// <param name="userId">ObjectID of the User.</param>
        /// <param name="body">UserGraphManagementReq</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SetGraphUserAssociation(string userId, JumpCloudApiSdkV2.Models.IUserGraphManagementReq body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/users/"
                        + global::System.Uri.EscapeDataString(userId)
                        + "/associations"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SetGraphUserAssociation_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint allows you to manage the _direct_ associations of a User.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example Users and Systems.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/users/{UserID}/associations \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "attributes": {
        /// "sudo": {
        /// "enabled": true,
        /// "withoutPassword": false
        /// }
        /// },
        /// "op": "add",
        /// "type": "system_group",
        /// "id": "{GroupID}"
        /// }'
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="body">UserGraphManagementReq</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SetGraphUserAssociationViaIdentity(global::System.String viaIdentity, JumpCloudApiSdkV2.Models.IUserGraphManagementReq body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/users/(?<user_id>[^/]+)/associations$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/users/{user_id}/associations'");
                }

                // replace URI parameters with values from identity
                var userId = _match.Groups["user_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/users/"
                        + userId
                        + "/associations"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SetGraphUserAssociation_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="SetGraphUserAssociation" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SetGraphUserAssociation_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.NoContent:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onNoContent(_response);
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="SetGraphUserAssociation" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="userId">ObjectID of the User.</param>
        /// <param name="body">UserGraphManagementReq</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SetGraphUserAssociation_Validate(string userId, JumpCloudApiSdkV2.Models.IUserGraphManagementReq body, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(userId),userId);
                await eventListener.AssertNotNull(nameof(body), body);
                await eventListener.AssertObjectIsValid(nameof(body), body);
            }
        }

        /// <summary>
        /// This endpoint manages the _direct_ associations of this User Group.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example User Groups and Users.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/usergroups/{GroupID}/associations \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "op": "add",
        /// "type": "system",
        /// "id": "{SystemID}"
        /// }'
        /// ```
        /// </summary>
        /// <param name="groupId">ObjectID of the User Group.</param>
        /// <param name="body">UserGroupGraphManagementReq</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SetGraphUserGroupAssociation(string groupId, JumpCloudApiSdkV2.Models.IUserGroupGraphManagementReq body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/usergroups/"
                        + global::System.Uri.EscapeDataString(groupId)
                        + "/associations"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SetGraphUserGroupAssociation_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint manages the _direct_ associations of this User Group.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example User Groups and Users.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/usergroups/{GroupID}/associations \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "op": "add",
        /// "type": "system",
        /// "id": "{SystemID}"
        /// }'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="body">UserGroupGraphManagementReq</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SetGraphUserGroupAssociationViaIdentity(global::System.String viaIdentity, JumpCloudApiSdkV2.Models.IUserGroupGraphManagementReq body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/usergroups/(?<group_id>[^/]+)/associations$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/usergroups/{group_id}/associations'");
                }

                // replace URI parameters with values from identity
                var groupId = _match.Groups["group_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/usergroups/"
                        + groupId
                        + "/associations"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SetGraphUserGroupAssociation_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="SetGraphUserGroupAssociation" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SetGraphUserGroupAssociation_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.NoContent:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onNoContent(_response);
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="SetGraphUserGroupAssociation" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="groupId">ObjectID of the User Group.</param>
        /// <param name="body">UserGroupGraphManagementReq</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SetGraphUserGroupAssociation_Validate(string groupId, JumpCloudApiSdkV2.Models.IUserGroupGraphManagementReq body, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(groupId),groupId);
                await eventListener.AssertNotNull(nameof(body), body);
                await eventListener.AssertObjectIsValid(nameof(body), body);
            }
        }

        /// <summary>
        /// This endpoint allows you to manage the user members of a User Group.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/usergroups/{GroupID}/members \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "op": "add",
        /// "type": "user",
        /// "id": "{User_ID}"
        /// }'
        /// ```
        /// </summary>
        /// <param name="groupId">ObjectID of the User Group.</param>
        /// <param name="body">UserGroupMembersReq</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SetGraphUserGroupMembers(string groupId, JumpCloudApiSdkV2.Models.IUserGroupMembersReq body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/usergroups/"
                        + global::System.Uri.EscapeDataString(groupId)
                        + "/members"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SetGraphUserGroupMembers_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint allows you to manage the user members of a User Group.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/usergroups/{GroupID}/members \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "op": "add",
        /// "type": "user",
        /// "id": "{User_ID}"
        /// }'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="body">UserGroupMembersReq</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SetGraphUserGroupMembersViaIdentity(global::System.String viaIdentity, JumpCloudApiSdkV2.Models.IUserGroupMembersReq body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/usergroups/(?<group_id>[^/]+)/members$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/usergroups/{group_id}/members'");
                }

                // replace URI parameters with values from identity
                var groupId = _match.Groups["group_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/usergroups/"
                        + groupId
                        + "/members"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SetGraphUserGroupMembers_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="SetGraphUserGroupMembers" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SetGraphUserGroupMembers_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.NoContent:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onNoContent(_response);
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="SetGraphUserGroupMembers" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="groupId">ObjectID of the User Group.</param>
        /// <param name="body">UserGroupMembersReq</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SetGraphUserGroupMembers_Validate(string groupId, JumpCloudApiSdkV2.Models.IUserGroupMembersReq body, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(groupId),groupId);
                await eventListener.AssertNotNull(nameof(body), body);
                await eventListener.AssertObjectIsValid(nameof(body), body);
            }
        }

        /// <summary>
        /// The endpoint allows you to create a bulk job to asynchronously update users. See [Update a System User](https://docs.jumpcloud.com/1.0/systemusers/update-a-system-user)
        /// for full list of attributes.
        /// #### Sample Request
        /// ```
        /// curl -X PATCH https://console.jumpcloud.com/api/v2/bulk/users \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '[
        /// {
        /// "id":"5be9fb4ddb01290001e85109",
        /// "firstname":"{UPDATED_FIRSTNAME}",
        /// "department":"{UPDATED_DEPARTMENT}",
        /// "attributes":[
        /// {"name":"Custom","value":"{ATTRIBUTE_VALUE}"}
        /// ]
        /// },
        /// {
        /// "id":"5be9fb4ddb01290001e85109",
        /// "firstname":"{UPDATED_FIRSTNAME}",
        /// "costCenter":"{UPDATED_COST_CENTER}",
        /// "phoneNumbers":[
        /// {"type":"home","number":"{HOME_PHONE_NUMBER}"},
        /// {"type":"work","number":"{WORK_PHONE_NUMBER}"}
        /// ]
        /// }
        /// ]
        /// ```
        /// </summary>
        /// <param name="body"></param>
        /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task UpdateBulkUsers(JumpCloudApiSdkV2.Models.IBulkUserUpdate[] body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IJobId>, global::System.Threading.Tasks.Task> onCreated, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/bulk/users"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Patch, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? new JumpCloudApiSdkV2.Runtime.Json.XNodeArray(null != body ? new JumpCloudApiSdkV2.Runtime.Json.XNodeArray(global::System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Select(body, (__x) => __x?.ToJson(null, JumpCloudApiSdkV2.Runtime.SerializationMode.None)))) : null).ToString() : global::System.String.Empty, global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.UpdateBulkUsers_Call(request,onCreated,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="UpdateBulkUsers" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task UpdateBulkUsers_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IJobId>, global::System.Threading.Tasks.Task> onCreated, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.Created:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onCreated(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.JobId.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="UpdateBulkUsers" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="body"></param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task UpdateBulkUsers_Validate(JumpCloudApiSdkV2.Models.IBulkUserUpdate[] body, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                if (body != null ) {
                        for (int __i = 0; __i < body.Length; __i++) {
                          await eventListener.AssertObjectIsValid($"body[{__i}]", body[__i]);
                        }
                      }
            }
        }
    }
}