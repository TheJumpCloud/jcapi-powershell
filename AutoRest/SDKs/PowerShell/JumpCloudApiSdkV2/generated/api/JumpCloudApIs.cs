namespace JumpCloudApiSdkV2
{
    using static JumpCloudApiSdkV2.Runtime.Extensions;

    /// <summary>
    /// Low-level API implementation for the JumpCloud APIs service.
    /// </summary>
    public partial class JumpCloudApIs
    {

        /// <summary>
        /// This endpoint returns the direct associations of this Active Directory instance.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example Active Directory and
        /// Users.
        /// #### Sample Request
        /// ```
        /// curl -X GET 'https://console.jumpcloud.com/api/v2/activedirectories/{ActiveDirectory_ID}/associations?targets=user \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="activedirectoryId">ObjectID of the Active Directory instance.</param>
        /// <param name="targets"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ActiveDirectoryAssociationList(string activedirectoryId, string[] targets, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/activedirectories/"
                        + global::System.Uri.EscapeDataString(activedirectoryId)
                        + "/associations"
                        + "?"
                        + (null != targets  && targets.Length > 0 ? "targets=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(targets, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ActiveDirectoryAssociationList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns the direct associations of this Active Directory instance.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example Active Directory and
        /// Users.
        /// #### Sample Request
        /// ```
        /// curl -X GET 'https://console.jumpcloud.com/api/v2/activedirectories/{ActiveDirectory_ID}/associations?targets=user \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="targets"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ActiveDirectoryAssociationListViaIdentity(global::System.String viaIdentity, string[] targets, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/activedirectories/(?<activedirectory_id>[^/]+)/associations$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/activedirectories/{activedirectory_id}/associations'");
                }

                // replace URI parameters with values from identity
                var activedirectoryId = _match.Groups["activedirectory_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/activedirectories/"
                        + activedirectoryId
                        + "/associations"
                        + "?"
                        + (null != targets  && targets.Length > 0 ? "targets=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(targets, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ActiveDirectoryAssociationList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ActiveDirectoryAssociationList" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ActiveDirectoryAssociationList_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphConnection[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphConnection) (JumpCloudApiSdkV2.Models.GraphConnection.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ActiveDirectoryAssociationList" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="activedirectoryId">ObjectID of the Active Directory instance.</param>
        /// <param name="targets"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ActiveDirectoryAssociationList_Validate(string activedirectoryId, string[] targets, int? limit, int? skip, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(activedirectoryId),activedirectoryId);
                await eventListener.AssertNotNull(nameof(targets), targets);
                if (targets != null ) {
                        for (int __i = 0; __i < targets.Length; __i++) {
                          await eventListener.AssertEnum($"targets[{__i}]",targets[__i],@"active_directory", @"application", @"command", @"g_suite", @"ldap_server", @"office_365", @"policy", @"radius_server", @"system", @"system_group", @"user", @"user_group");
                        }
                      }
            }
        }

        /// <summary>
        /// This endpoint returns a specific Active Directory.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/activedirectories/{ActiveDirectory_ID} \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="id">ObjectID of this Active Directory instance.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ActiveDirectoryGet(string id, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IActiveDirectoryOutput>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/activedirectories/"
                        + global::System.Uri.EscapeDataString(id)

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ActiveDirectoryGet_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns a specific Active Directory.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/activedirectories/{ActiveDirectory_ID} \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ActiveDirectoryGetViaIdentity(global::System.String viaIdentity, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IActiveDirectoryOutput>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/activedirectories/(?<id>[^/]+)$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/activedirectories/{id}'");
                }

                // replace URI parameters with values from identity
                var id = _match.Groups["id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/activedirectories/"
                        + id

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ActiveDirectoryGet_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ActiveDirectoryGet" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ActiveDirectoryGet_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IActiveDirectoryOutput>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.ActiveDirectoryOutput.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ActiveDirectoryGet" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="id">ObjectID of this Active Directory instance.</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ActiveDirectoryGet_Validate(string id, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(id),id);
            }
        }

        /// <summary>
        /// This endpoint allows you to list all your Active Directory Instances.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/activedirectories/ \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ActiveDirectoryList(string[] filter, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IActiveDirectoryOutput[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/activedirectories"
                        + "?"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ActiveDirectoryList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint allows you to list all your Active Directory Instances.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/activedirectories/ \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ActiveDirectoryListViaIdentity(global::System.String viaIdentity, string[] filter, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IActiveDirectoryOutput[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/activedirectories$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/activedirectories'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/activedirectories"
                        + "?"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ActiveDirectoryList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ActiveDirectoryList" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ActiveDirectoryList_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IActiveDirectoryOutput[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IActiveDirectoryOutput[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IActiveDirectoryOutput) (JumpCloudApiSdkV2.Models.ActiveDirectoryOutput.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ActiveDirectoryList" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ActiveDirectoryList_Validate(string[] filter, int? limit, int? skip, string[] sort, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {

            }
        }

        /// <summary>
        /// This endpoint will return all Users Groups bound to an Active Directory instance, either directly or indirectly, essentially
        /// traversing the JumpCloud Graph for your Organization.
        /// Each element will contain the group's type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this Active Directory instance to the corresponding User Group; this array
        /// represents all grouping and/or associations that would have to be removed to deprovision the User Group from this Active
        /// Directory instance.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/activedirectories/{ActiveDirectory_ID}/usergroups \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="activedirectoryId">ObjectID of the Active Directory instance.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ActiveDirectoryTraverseUserGroupList(string activedirectoryId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/activedirectories/"
                        + global::System.Uri.EscapeDataString(activedirectoryId)
                        + "/usergroups"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ActiveDirectoryTraverseUserGroupList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all Users Groups bound to an Active Directory instance, either directly or indirectly, essentially
        /// traversing the JumpCloud Graph for your Organization.
        /// Each element will contain the group's type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this Active Directory instance to the corresponding User Group; this array
        /// represents all grouping and/or associations that would have to be removed to deprovision the User Group from this Active
        /// Directory instance.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/activedirectories/{ActiveDirectory_ID}/usergroups \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ActiveDirectoryTraverseUserGroupListViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/activedirectories/(?<activedirectory_id>[^/]+)/usergroups$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/activedirectories/{activedirectory_id}/usergroups'");
                }

                // replace URI parameters with values from identity
                var activedirectoryId = _match.Groups["activedirectory_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/activedirectories/"
                        + activedirectoryId
                        + "/usergroups"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ActiveDirectoryTraverseUserGroupList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// Actual wire call for <see cref="ActiveDirectoryTraverseUserGroupList" /> method.
        /// </summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ActiveDirectoryTraverseUserGroupList_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphObjectWithPaths) (JumpCloudApiSdkV2.Models.GraphObjectWithPaths.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ActiveDirectoryTraverseUserGroupList" /> method. Call this like the actual call, but
        /// you will get validation events back.
        /// </summary>
        /// <param name="activedirectoryId">ObjectID of the Active Directory instance.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ActiveDirectoryTraverseUserGroupList_Validate(string activedirectoryId, int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(activedirectoryId),activedirectoryId);
            }
        }

        /// <summary>
        /// This endpoint will return the _direct_ associations of an Application. A direct association can be a non-homogeneous relationship
        /// between 2 different objects, for example Applications and User Groups.
        /// #### Sample Request
        /// ```
        /// curl -X GET 'https://console.jumpcloud.com/api/v2/applications/{Application_ID}/associations?targets=user_group \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="applicationId">ObjectID of the Application.</param>
        /// <param name="targets"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ApplicationAssociationList(string applicationId, string[] targets, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/applications/"
                        + global::System.Uri.EscapeDataString(applicationId)
                        + "/associations"
                        + "?"
                        + (null != targets  && targets.Length > 0 ? "targets=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(targets, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ApplicationAssociationList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return the _direct_ associations of an Application. A direct association can be a non-homogeneous relationship
        /// between 2 different objects, for example Applications and User Groups.
        /// #### Sample Request
        /// ```
        /// curl -X GET 'https://console.jumpcloud.com/api/v2/applications/{Application_ID}/associations?targets=user_group \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="targets"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ApplicationAssociationListViaIdentity(global::System.String viaIdentity, string[] targets, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/applications/(?<application_id>[^/]+)/associations$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/applications/{application_id}/associations'");
                }

                // replace URI parameters with values from identity
                var applicationId = _match.Groups["application_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/applications/"
                        + applicationId
                        + "/associations"
                        + "?"
                        + (null != targets  && targets.Length > 0 ? "targets=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(targets, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ApplicationAssociationList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ApplicationAssociationList" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ApplicationAssociationList_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphConnection[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphConnection) (JumpCloudApiSdkV2.Models.GraphConnection.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ApplicationAssociationList" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="applicationId">ObjectID of the Application.</param>
        /// <param name="targets"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ApplicationAssociationList_Validate(string applicationId, string[] targets, int? limit, int? skip, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(applicationId),applicationId);
                await eventListener.AssertNotNull(nameof(targets), targets);
                if (targets != null ) {
                        for (int __i = 0; __i < targets.Length; __i++) {
                          await eventListener.AssertEnum($"targets[{__i}]",targets[__i],@"active_directory", @"application", @"command", @"g_suite", @"ldap_server", @"office_365", @"policy", @"radius_server", @"system", @"system_group", @"user", @"user_group");
                        }
                      }
            }
        }

        /// <summary>
        /// This endpoint allows you to manage the _direct_ associations of an Application. A direct association can be a non-homogeneous
        /// relationship between 2 different objects, for example Application and User Groups.
        /// #### Sample Request
        /// ```
        /// curl -X POST 'https://console.jumpcloud.com/api/v2/applications/{Application_ID}/associations' \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "op": "add",
        /// "type": "user_group",
        /// "id": "{Group_ID}"
        /// }'
        /// ```
        /// </summary>
        /// <param name="applicationId">ObjectID of the Application.</param>
        /// <param name="body">GraphManagementReq</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ApplicationAssociationSet(string applicationId, JumpCloudApiSdkV2.Models.IGraphManagementReq body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/applications/"
                        + global::System.Uri.EscapeDataString(applicationId)
                        + "/associations"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ApplicationAssociationSet_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint allows you to manage the _direct_ associations of an Application. A direct association can be a non-homogeneous
        /// relationship between 2 different objects, for example Application and User Groups.
        /// #### Sample Request
        /// ```
        /// curl -X POST 'https://console.jumpcloud.com/api/v2/applications/{Application_ID}/associations' \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "op": "add",
        /// "type": "user_group",
        /// "id": "{Group_ID}"
        /// }'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="body">GraphManagementReq</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ApplicationAssociationSetViaIdentity(global::System.String viaIdentity, JumpCloudApiSdkV2.Models.IGraphManagementReq body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/applications/(?<application_id>[^/]+)/associations$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/applications/{application_id}/associations'");
                }

                // replace URI parameters with values from identity
                var applicationId = _match.Groups["application_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/applications/"
                        + applicationId
                        + "/associations"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ApplicationAssociationSet_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ApplicationAssociationSet" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ApplicationAssociationSet_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.NoContent:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onNoContent(_response);
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ApplicationAssociationSet" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="applicationId">ObjectID of the Application.</param>
        /// <param name="body">GraphManagementReq</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ApplicationAssociationSet_Validate(string applicationId, JumpCloudApiSdkV2.Models.IGraphManagementReq body, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(applicationId),applicationId);
                await eventListener.AssertNotNull(nameof(body), body);
                await eventListener.AssertObjectIsValid(nameof(body), body);
            }
        }

        /// <summary>
        /// This endpoint will return all Users Groups bound to an Application, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the group's type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this Application to the corresponding User Group; this array represents all
        /// grouping and/or associations that would have to be removed to deprovision the User Group from this Application.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/applications/{Application_ID}/usergroups \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="applicationId">ObjectID of the Application.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ApplicationTraverseUserGroupList(string applicationId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/applications/"
                        + global::System.Uri.EscapeDataString(applicationId)
                        + "/usergroups"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ApplicationTraverseUserGroupList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all Users Groups bound to an Application, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the group's type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this Application to the corresponding User Group; this array represents all
        /// grouping and/or associations that would have to be removed to deprovision the User Group from this Application.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/applications/{Application_ID}/usergroups \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ApplicationTraverseUserGroupListViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/applications/(?<application_id>[^/]+)/usergroups$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/applications/{application_id}/usergroups'");
                }

                // replace URI parameters with values from identity
                var applicationId = _match.Groups["application_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/applications/"
                        + applicationId
                        + "/usergroups"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ApplicationTraverseUserGroupList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ApplicationTraverseUserGroupList" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ApplicationTraverseUserGroupList_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphObjectWithPaths) (JumpCloudApiSdkV2.Models.GraphObjectWithPaths.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ApplicationTraverseUserGroupList" /> method. Call this like the actual call, but you
        /// will get validation events back.
        /// </summary>
        /// <param name="applicationId">ObjectID of the Application.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ApplicationTraverseUserGroupList_Validate(string applicationId, int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(applicationId),applicationId);
            }
        }

        /// <summary>
        /// This endpoint will return all Users bound to an Application, either directly or indirectly, essentially traversing the
        /// JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this Application to the corresponding User; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the User from this Application.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/applications/{Application_ID}/users \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="applicationId">ObjectID of the Application.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ApplicationTraverseUserList(string applicationId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/applications/"
                        + global::System.Uri.EscapeDataString(applicationId)
                        + "/users"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ApplicationTraverseUserList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all Users bound to an Application, either directly or indirectly, essentially traversing the
        /// JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this Application to the corresponding User; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the User from this Application.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/applications/{Application_ID}/users \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ApplicationTraverseUserListViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/applications/(?<application_id>[^/]+)/users$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/applications/{application_id}/users'");
                }

                // replace URI parameters with values from identity
                var applicationId = _match.Groups["application_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/applications/"
                        + applicationId
                        + "/users"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ApplicationTraverseUserList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ApplicationTraverseUserList" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ApplicationTraverseUserList_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphObjectWithPaths) (JumpCloudApiSdkV2.Models.GraphObjectWithPaths.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ApplicationTraverseUserList" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="applicationId">ObjectID of the Application.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ApplicationTraverseUserList_Validate(string applicationId, int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(applicationId),applicationId);
            }
        }

        /// <summary>
        /// The endpoint allows you to create a bulk job to asynchronously create users. See [Create a System User](https://docs.jumpcloud.com/1.0/systemusers/create-a-system-user)
        /// for full list of attributes.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/bulk/users \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '[
        /// {
        /// "email":"{email}",
        /// "firstname":"{firstname}",
        /// "lastname":"{firstname}",
        /// "username":"{username}",
        /// "attributes":[
        /// {"name":"EmployeeID","value":"0000"},
        /// {"name":"Custom","value":"attribute"}
        /// ]
        /// }
        /// ]
        /// ```
        /// </summary>
        /// <param name="body"></param>
        /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task BulkUsersCreate(JumpCloudApiSdkV2.Models.IBulkUserCreate[] body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IJobId>, global::System.Threading.Tasks.Task> onCreated, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/bulk/users"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? new JumpCloudApiSdkV2.Runtime.Json.XNodeArray(null != body ? new JumpCloudApiSdkV2.Runtime.Json.XNodeArray(global::System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Select(body, (__x) => __x?.ToJson(null, JumpCloudApiSdkV2.Runtime.SerializationMode.None)))) : null).ToString() : global::System.String.Empty, global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.BulkUsersCreate_Call(request,onCreated,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="BulkUsersCreate" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task BulkUsersCreate_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IJobId>, global::System.Threading.Tasks.Task> onCreated, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.Created:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onCreated(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.JobId.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="BulkUsersCreate" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="body"></param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task BulkUsersCreate_Validate(JumpCloudApiSdkV2.Models.IBulkUserCreate[] body, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                if (body != null ) {
                        for (int __i = 0; __i < body.Length; __i++) {
                          await eventListener.AssertObjectIsValid($"body[{__i}]", body[__i]);
                        }
                      }
            }
        }

        /// <summary>
        /// The endpoint allows you to create a bulk job to asynchronously update users. See [Update a System User](https://docs.jumpcloud.com/1.0/systemusers/update-a-system-user)
        /// for full list of attributes.
        /// #### Sample Request
        /// ```
        /// curl -X PATCH https://console.jumpcloud.com/api/v2/bulk/users \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '[
        /// {
        /// "id":"5be9fb4ddb01290001e85109",
        /// "firstname":"{UPDATED_FIRSTNAME}",
        /// "department":"{UPDATED_DEPARTMENT}",
        /// "attributes":[
        /// {"name":"Custom","value":"{ATTRIBUTE_VALUE}"}
        /// ]
        /// },
        /// {
        /// "id":"5be9fb4ddb01290001e85109",
        /// "firstname":"{UPDATED_FIRSTNAME}",
        /// "costCenter":"{UPDATED_COST_CENTER}",
        /// "phoneNumbers":[
        /// {"type":"home","number":"{HOME_PHONE_NUMBER}"},
        /// {"type":"work","number":"{WORK_PHONE_NUMBER}"}
        /// ]
        /// }
        /// ]
        /// ```
        /// </summary>
        /// <param name="body"></param>
        /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task BulkUsersPatch(JumpCloudApiSdkV2.Models.IBulkUserUpdate[] body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IJobId>, global::System.Threading.Tasks.Task> onCreated, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/bulk/users"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Patch, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? new JumpCloudApiSdkV2.Runtime.Json.XNodeArray(null != body ? new JumpCloudApiSdkV2.Runtime.Json.XNodeArray(global::System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Select(body, (__x) => __x?.ToJson(null, JumpCloudApiSdkV2.Runtime.SerializationMode.None)))) : null).ToString() : global::System.String.Empty, global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.BulkUsersPatch_Call(request,onCreated,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="BulkUsersPatch" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task BulkUsersPatch_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IJobId>, global::System.Threading.Tasks.Task> onCreated, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.Created:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onCreated(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.JobId.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="BulkUsersPatch" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="body"></param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task BulkUsersPatch_Validate(JumpCloudApiSdkV2.Models.IBulkUserUpdate[] body, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                if (body != null ) {
                        for (int __i = 0; __i < body.Length; __i++) {
                          await eventListener.AssertObjectIsValid($"body[{__i}]", body[__i]);
                        }
                      }
            }
        }

        /// <summary>
        /// This endpoint will return the results of particular user import or update job request.
        /// #### Sample Request
        /// ```
        /// curl -X GET \
        /// https://console.jumpcloud.com/api/v2/bulk/users/{ImportJobID}/results \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="jobId"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task BulkUsersResultGet(string jobId, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IJobWorkresult[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/bulk/users/"
                        + global::System.Uri.EscapeDataString(jobId)
                        + "/results"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.BulkUsersResultGet_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return the results of particular user import or update job request.
        /// #### Sample Request
        /// ```
        /// curl -X GET \
        /// https://console.jumpcloud.com/api/v2/bulk/users/{ImportJobID}/results \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task BulkUsersResultGetViaIdentity(global::System.String viaIdentity, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IJobWorkresult[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/bulk/users/(?<job_id>[^/]+)/results$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/bulk/users/{job_id}/results'");
                }

                // replace URI parameters with values from identity
                var jobId = _match.Groups["job_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/bulk/users/"
                        + jobId
                        + "/results"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.BulkUsersResultGet_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="BulkUsersResultGet" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task BulkUsersResultGet_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IJobWorkresult[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IJobWorkresult[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IJobWorkresult) (JumpCloudApiSdkV2.Models.JobWorkresult.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="BulkUsersResultGet" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="jobId"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task BulkUsersResultGet_Validate(string jobId, int? limit, int? skip, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(jobId),jobId);
            }
        }

        /// <summary>
        /// This endpoint will return the _direct_ associations of this Command.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example Commands and User
        /// Groups.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/commands/{Command_ID}/associations?targets=system_group \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="commandId">ObjectID of the Command.</param>
        /// <param name="targets"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task CommandAssociationList(string commandId, string[] targets, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/commands/"
                        + global::System.Uri.EscapeDataString(commandId)
                        + "/associations"
                        + "?"
                        + (null != targets  && targets.Length > 0 ? "targets=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(targets, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.CommandAssociationList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return the _direct_ associations of this Command.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example Commands and User
        /// Groups.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/commands/{Command_ID}/associations?targets=system_group \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="targets"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task CommandAssociationListViaIdentity(global::System.String viaIdentity, string[] targets, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/commands/(?<command_id>[^/]+)/associations$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/commands/{command_id}/associations'");
                }

                // replace URI parameters with values from identity
                var commandId = _match.Groups["command_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/commands/"
                        + commandId
                        + "/associations"
                        + "?"
                        + (null != targets  && targets.Length > 0 ? "targets=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(targets, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.CommandAssociationList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="CommandAssociationList" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task CommandAssociationList_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphConnection[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphConnection) (JumpCloudApiSdkV2.Models.GraphConnection.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="CommandAssociationList" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="commandId">ObjectID of the Command.</param>
        /// <param name="targets"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task CommandAssociationList_Validate(string commandId, string[] targets, int? limit, int? skip, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(commandId),commandId);
                await eventListener.AssertNotNull(nameof(targets), targets);
                if (targets != null ) {
                        for (int __i = 0; __i < targets.Length; __i++) {
                          await eventListener.AssertEnum($"targets[{__i}]",targets[__i],@"active_directory", @"application", @"command", @"g_suite", @"ldap_server", @"office_365", @"policy", @"radius_server", @"system", @"system_group", @"user", @"user_group");
                        }
                      }
            }
        }

        /// <summary>
        /// This endpoint will allow you to manage the _direct_ associations of this Command.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example Commands and User
        /// Groups.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/commands/{Command_ID}/associations \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "op": "add",
        /// "type": "system_group",
        /// "id": "Group_ID"
        /// }'
        /// ```
        /// </summary>
        /// <param name="commandId">ObjectID of the Command.</param>
        /// <param name="body">GraphManagementReq</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task CommandAssociationSet(string commandId, JumpCloudApiSdkV2.Models.IGraphManagementReq body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/commands/"
                        + global::System.Uri.EscapeDataString(commandId)
                        + "/associations"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.CommandAssociationSet_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will allow you to manage the _direct_ associations of this Command.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example Commands and User
        /// Groups.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/commands/{Command_ID}/associations \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "op": "add",
        /// "type": "system_group",
        /// "id": "Group_ID"
        /// }'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="body">GraphManagementReq</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task CommandAssociationSetViaIdentity(global::System.String viaIdentity, JumpCloudApiSdkV2.Models.IGraphManagementReq body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/commands/(?<command_id>[^/]+)/associations$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/commands/{command_id}/associations'");
                }

                // replace URI parameters with values from identity
                var commandId = _match.Groups["command_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/commands/"
                        + commandId
                        + "/associations"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.CommandAssociationSet_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="CommandAssociationSet" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task CommandAssociationSet_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.NoContent:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onNoContent(_response);
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="CommandAssociationSet" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="commandId">ObjectID of the Command.</param>
        /// <param name="body">GraphManagementReq</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task CommandAssociationSet_Validate(string commandId, JumpCloudApiSdkV2.Models.IGraphManagementReq body, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(commandId),commandId);
                await eventListener.AssertNotNull(nameof(body), body);
                await eventListener.AssertObjectIsValid(nameof(body), body);
            }
        }

        /// <summary>
        /// This endpoint will return all System Groups bound to a Command, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the group's type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this Command to the corresponding System Group; this array represents all
        /// grouping and/or associations that would have to be removed to deprovision the System Group from this Command.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/commands/{Command_ID}/systemgroups \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="commandId">ObjectID of the Command.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task CommandTraverseSystemGroupList(string commandId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/commands/"
                        + global::System.Uri.EscapeDataString(commandId)
                        + "/systemgroups"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.CommandTraverseSystemGroupList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all System Groups bound to a Command, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the group's type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this Command to the corresponding System Group; this array represents all
        /// grouping and/or associations that would have to be removed to deprovision the System Group from this Command.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/commands/{Command_ID}/systemgroups \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task CommandTraverseSystemGroupListViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/commands/(?<command_id>[^/]+)/systemgroups$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/commands/{command_id}/systemgroups'");
                }

                // replace URI parameters with values from identity
                var commandId = _match.Groups["command_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/commands/"
                        + commandId
                        + "/systemgroups"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.CommandTraverseSystemGroupList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="CommandTraverseSystemGroupList" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task CommandTraverseSystemGroupList_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphObjectWithPaths) (JumpCloudApiSdkV2.Models.GraphObjectWithPaths.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="CommandTraverseSystemGroupList" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="commandId">ObjectID of the Command.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task CommandTraverseSystemGroupList_Validate(string commandId, int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(commandId),commandId);
            }
        }

        /// <summary>
        /// This endpoint will return all Systems bound to a Command, either directly or indirectly, essentially traversing the JumpCloud
        /// Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this Command to the corresponding System; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the System from this Command.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/commands/{Command_ID}/systems \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="commandId">ObjectID of the Command.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task CommandTraverseSystemList(string commandId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/commands/"
                        + global::System.Uri.EscapeDataString(commandId)
                        + "/systems"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.CommandTraverseSystemList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all Systems bound to a Command, either directly or indirectly, essentially traversing the JumpCloud
        /// Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this Command to the corresponding System; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the System from this Command.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/commands/{Command_ID}/systems \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task CommandTraverseSystemListViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/commands/(?<command_id>[^/]+)/systems$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/commands/{command_id}/systems'");
                }

                // replace URI parameters with values from identity
                var commandId = _match.Groups["command_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/commands/"
                        + commandId
                        + "/systems"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.CommandTraverseSystemList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="CommandTraverseSystemList" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task CommandTraverseSystemList_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphObjectWithPaths) (JumpCloudApiSdkV2.Models.GraphObjectWithPaths.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="CommandTraverseSystemList" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="commandId">ObjectID of the Command.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task CommandTraverseSystemList_Validate(string commandId, int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(commandId),commandId);
            }
        }

        /// <summary>
        /// This endpoint returns all active directories (LDAP, O365 Suite, G-Suite).
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/directories \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onDefault">a delegate that is called when the remote service returns default (any response code not handled
        /// elsewhere).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task DirectoryList(int? limit, string[] sort, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IDirectory[]>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IError>, global::System.Threading.Tasks.Task> onDefault, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/directories"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.DirectoryList_Call(request,onOk,onDefault,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns all active directories (LDAP, O365 Suite, G-Suite).
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/directories \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onDefault">a delegate that is called when the remote service returns default (any response code not handled
        /// elsewhere).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task DirectoryListViaIdentity(global::System.String viaIdentity, int? limit, string[] sort, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IDirectory[]>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IError>, global::System.Threading.Tasks.Task> onDefault, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/directories$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/directories'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/directories"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.DirectoryList_Call(request,onOk,onDefault,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="DirectoryList" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onDefault">a delegate that is called when the remote service returns default (any response code not handled
        /// elsewhere).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task DirectoryList_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IDirectory[]>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IError>, global::System.Threading.Tasks.Task> onDefault, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IDirectory[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IDirectory) (JumpCloudApiSdkV2.Models.Directory.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onDefault(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.Error.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="DirectoryList" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task DirectoryList_Validate(int? limit, string[] sort, int? skip, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {

            }
        }

        /// <summary>
        /// Registers a Duo account for an organization. Only one Duo account will be allowed,
        /// in case an organization has a Duo account already a 409 (Conflict) code will be returned.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/duo/accounts \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{}'
        /// ```
        /// </summary>
        /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        /// <param name="onBadRequest">a delegate that is called when the remote service returns 400 (BadRequest).</param>
        /// <param name="onUnauthorized">a delegate that is called when the remote service returns 401 (Unauthorized).</param>
        /// <param name="onForbidden">a delegate that is called when the remote service returns 403 (Forbidden).</param>
        /// <param name="onNotFound">a delegate that is called when the remote service returns 404 (NotFound).</param>
        /// <param name="onConflict">a delegate that is called when the remote service returns 409 (Conflict).</param>
        /// <param name="onInternalServerError">a delegate that is called when the remote service returns 500 (InternalServerError).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task DuoAccountCreate(global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IDuoAccount>, global::System.Threading.Tasks.Task> onCreated, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onBadRequest, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onUnauthorized, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onForbidden, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onNotFound, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onConflict, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onInternalServerError, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/duo/accounts"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.DuoAccountCreate_Call(request,onCreated,onBadRequest,onUnauthorized,onForbidden,onNotFound,onConflict,onInternalServerError,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="DuoAccountCreate" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        /// <param name="onBadRequest">a delegate that is called when the remote service returns 400 (BadRequest).</param>
        /// <param name="onUnauthorized">a delegate that is called when the remote service returns 401 (Unauthorized).</param>
        /// <param name="onForbidden">a delegate that is called when the remote service returns 403 (Forbidden).</param>
        /// <param name="onNotFound">a delegate that is called when the remote service returns 404 (NotFound).</param>
        /// <param name="onConflict">a delegate that is called when the remote service returns 409 (Conflict).</param>
        /// <param name="onInternalServerError">a delegate that is called when the remote service returns 500 (InternalServerError).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task DuoAccountCreate_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IDuoAccount>, global::System.Threading.Tasks.Task> onCreated, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onBadRequest, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onUnauthorized, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onForbidden, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onNotFound, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onConflict, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onInternalServerError, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.Created:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onCreated(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.DuoAccount.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.BadRequest:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onBadRequest(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.Errorresponse.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.Unauthorized:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onUnauthorized(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.Errorresponse.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.Forbidden:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onForbidden(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.Errorresponse.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.NotFound:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onNotFound(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.Errorresponse.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.Conflict:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onConflict(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.Errorresponse.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.InternalServerError:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onInternalServerError(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.Errorresponse.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="DuoAccountCreate" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task DuoAccountCreate_Validate(JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {

            }
        }

        /// <summary>
        /// Removes the specified Duo account, an error will be returned if the account has some Duo application used in a protected
        /// resource.
        /// #### Sample Request
        /// ```
        /// curl -X DELETE https://console.jumpcloud.com/api/v2/duo/accounts/{id} \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="id">ObjectID of the Duo Account</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onBadRequest">a delegate that is called when the remote service returns 400 (BadRequest).</param>
        /// <param name="onUnauthorized">a delegate that is called when the remote service returns 401 (Unauthorized).</param>
        /// <param name="onForbidden">a delegate that is called when the remote service returns 403 (Forbidden).</param>
        /// <param name="onNotFound">a delegate that is called when the remote service returns 404 (NotFound).</param>
        /// <param name="onConflict">a delegate that is called when the remote service returns 409 (Conflict).</param>
        /// <param name="onInternalServerError">a delegate that is called when the remote service returns 500 (InternalServerError).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task DuoAccountDelete(string id, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IDuoAccount>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onBadRequest, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onUnauthorized, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onForbidden, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onNotFound, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onConflict, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onInternalServerError, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/duo/accounts/"
                        + global::System.Uri.EscapeDataString(id)

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Delete, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.DuoAccountDelete_Call(request,onOk,onBadRequest,onUnauthorized,onForbidden,onNotFound,onConflict,onInternalServerError,eventListener,sender);
            }
        }

        /// <summary>
        /// Removes the specified Duo account, an error will be returned if the account has some Duo application used in a protected
        /// resource.
        /// #### Sample Request
        /// ```
        /// curl -X DELETE https://console.jumpcloud.com/api/v2/duo/accounts/{id} \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onBadRequest">a delegate that is called when the remote service returns 400 (BadRequest).</param>
        /// <param name="onUnauthorized">a delegate that is called when the remote service returns 401 (Unauthorized).</param>
        /// <param name="onForbidden">a delegate that is called when the remote service returns 403 (Forbidden).</param>
        /// <param name="onNotFound">a delegate that is called when the remote service returns 404 (NotFound).</param>
        /// <param name="onConflict">a delegate that is called when the remote service returns 409 (Conflict).</param>
        /// <param name="onInternalServerError">a delegate that is called when the remote service returns 500 (InternalServerError).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task DuoAccountDeleteViaIdentity(global::System.String viaIdentity, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IDuoAccount>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onBadRequest, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onUnauthorized, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onForbidden, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onNotFound, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onConflict, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onInternalServerError, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/duo/accounts/(?<id>[^/]+)$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/duo/accounts/{id}'");
                }

                // replace URI parameters with values from identity
                var id = _match.Groups["id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/duo/accounts/"
                        + id

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Delete, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.DuoAccountDelete_Call(request,onOk,onBadRequest,onUnauthorized,onForbidden,onNotFound,onConflict,onInternalServerError,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="DuoAccountDelete" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onBadRequest">a delegate that is called when the remote service returns 400 (BadRequest).</param>
        /// <param name="onUnauthorized">a delegate that is called when the remote service returns 401 (Unauthorized).</param>
        /// <param name="onForbidden">a delegate that is called when the remote service returns 403 (Forbidden).</param>
        /// <param name="onNotFound">a delegate that is called when the remote service returns 404 (NotFound).</param>
        /// <param name="onConflict">a delegate that is called when the remote service returns 409 (Conflict).</param>
        /// <param name="onInternalServerError">a delegate that is called when the remote service returns 500 (InternalServerError).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task DuoAccountDelete_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IDuoAccount>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onBadRequest, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onUnauthorized, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onForbidden, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onNotFound, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onConflict, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onInternalServerError, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.DuoAccount.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.BadRequest:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onBadRequest(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.Errorresponse.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.Unauthorized:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onUnauthorized(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.Errorresponse.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.Forbidden:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onForbidden(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.Errorresponse.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.NotFound:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onNotFound(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.Errorresponse.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.Conflict:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onConflict(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.Errorresponse.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.InternalServerError:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onInternalServerError(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.Errorresponse.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="DuoAccountDelete" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="id">ObjectID of the Duo Account</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task DuoAccountDelete_Validate(string id, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(id),id);
            }
        }

        /// <summary>
        /// This endpoint returns a specific Duo account.
        /// #### Sample Request
        /// ```
        /// curl https://console.jumpcloud.com/api/v2/duo/accounts/{id} \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="id">ObjectID of the Duo Account</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task DuoAccountGet(string id, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IDuoAccount>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/duo/accounts/"
                        + global::System.Uri.EscapeDataString(id)

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.DuoAccountGet_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns a specific Duo account.
        /// #### Sample Request
        /// ```
        /// curl https://console.jumpcloud.com/api/v2/duo/accounts/{id} \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task DuoAccountGetViaIdentity(global::System.String viaIdentity, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IDuoAccount>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/duo/accounts/(?<id>[^/]+)$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/duo/accounts/{id}'");
                }

                // replace URI parameters with values from identity
                var id = _match.Groups["id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/duo/accounts/"
                        + id

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.DuoAccountGet_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="DuoAccountGet" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task DuoAccountGet_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IDuoAccount>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.DuoAccount.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="DuoAccountGet" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="id">ObjectID of the Duo Account</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task DuoAccountGet_Validate(string id, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(id),id);
            }
        }

        /// <summary>
        /// This endpoint returns all the Duo accounts for your organization. Note: There can currently only be one Duo account for
        /// your organization.
        /// #### Sample Request
        /// ```
        /// curl https://console.jumpcloud.com/api/v2/duo/accounts \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task DuoAccountList(global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IDuoAccount[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/duo/accounts"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.DuoAccountList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="DuoAccountList" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task DuoAccountList_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IDuoAccount[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IDuoAccount[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IDuoAccount) (JumpCloudApiSdkV2.Models.DuoAccount.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="DuoAccountList" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task DuoAccountList_Validate(JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {

            }
        }

        /// <summary>
        /// Creates a Duo application for your organization and the specified account.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/duo/accounts/{ACCOUNT_ID}/applications \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "name": "Application Name",
        /// "apiHost": "api-1234.duosecurity.com",
        /// "integrationKey": "1234",
        /// "secretKey": "5678"
        /// }'
        /// ```
        /// </summary>
        /// <param name="accountId"></param>
        /// <param name="body">DuoApplicationReq</param>
        /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        /// <param name="onBadRequest">a delegate that is called when the remote service returns 400 (BadRequest).</param>
        /// <param name="onUnauthorized">a delegate that is called when the remote service returns 401 (Unauthorized).</param>
        /// <param name="onForbidden">a delegate that is called when the remote service returns 403 (Forbidden).</param>
        /// <param name="onNotFound">a delegate that is called when the remote service returns 404 (NotFound).</param>
        /// <param name="onConflict">a delegate that is called when the remote service returns 409 (Conflict).</param>
        /// <param name="onInternalServerError">a delegate that is called when the remote service returns 500 (InternalServerError).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task DuoApplicationCreate(string accountId, JumpCloudApiSdkV2.Models.IDuoApplicationReq body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IDuoApplication>, global::System.Threading.Tasks.Task> onCreated, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onBadRequest, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onUnauthorized, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onForbidden, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onNotFound, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onConflict, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onInternalServerError, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/duo/accounts/"
                        + global::System.Uri.EscapeDataString(accountId)
                        + "/applications"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.DuoApplicationCreate_Call(request,onCreated,onBadRequest,onUnauthorized,onForbidden,onNotFound,onConflict,onInternalServerError,eventListener,sender);
            }
        }

        /// <summary>
        /// Creates a Duo application for your organization and the specified account.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/duo/accounts/{ACCOUNT_ID}/applications \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "name": "Application Name",
        /// "apiHost": "api-1234.duosecurity.com",
        /// "integrationKey": "1234",
        /// "secretKey": "5678"
        /// }'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="body">DuoApplicationReq</param>
        /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        /// <param name="onBadRequest">a delegate that is called when the remote service returns 400 (BadRequest).</param>
        /// <param name="onUnauthorized">a delegate that is called when the remote service returns 401 (Unauthorized).</param>
        /// <param name="onForbidden">a delegate that is called when the remote service returns 403 (Forbidden).</param>
        /// <param name="onNotFound">a delegate that is called when the remote service returns 404 (NotFound).</param>
        /// <param name="onConflict">a delegate that is called when the remote service returns 409 (Conflict).</param>
        /// <param name="onInternalServerError">a delegate that is called when the remote service returns 500 (InternalServerError).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task DuoApplicationCreateViaIdentity(global::System.String viaIdentity, JumpCloudApiSdkV2.Models.IDuoApplicationReq body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IDuoApplication>, global::System.Threading.Tasks.Task> onCreated, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onBadRequest, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onUnauthorized, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onForbidden, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onNotFound, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onConflict, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onInternalServerError, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/duo/accounts/(?<account_id>[^/]+)/applications$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/duo/accounts/{account_id}/applications'");
                }

                // replace URI parameters with values from identity
                var accountId = _match.Groups["account_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/duo/accounts/"
                        + accountId
                        + "/applications"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.DuoApplicationCreate_Call(request,onCreated,onBadRequest,onUnauthorized,onForbidden,onNotFound,onConflict,onInternalServerError,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="DuoApplicationCreate" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        /// <param name="onBadRequest">a delegate that is called when the remote service returns 400 (BadRequest).</param>
        /// <param name="onUnauthorized">a delegate that is called when the remote service returns 401 (Unauthorized).</param>
        /// <param name="onForbidden">a delegate that is called when the remote service returns 403 (Forbidden).</param>
        /// <param name="onNotFound">a delegate that is called when the remote service returns 404 (NotFound).</param>
        /// <param name="onConflict">a delegate that is called when the remote service returns 409 (Conflict).</param>
        /// <param name="onInternalServerError">a delegate that is called when the remote service returns 500 (InternalServerError).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task DuoApplicationCreate_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IDuoApplication>, global::System.Threading.Tasks.Task> onCreated, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onBadRequest, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onUnauthorized, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onForbidden, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onNotFound, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onConflict, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onInternalServerError, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.Created:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onCreated(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.DuoApplication.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.BadRequest:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onBadRequest(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.Errorresponse.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.Unauthorized:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onUnauthorized(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.Errorresponse.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.Forbidden:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onForbidden(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.Errorresponse.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.NotFound:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onNotFound(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.Errorresponse.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.Conflict:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onConflict(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.Errorresponse.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.InternalServerError:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onInternalServerError(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.Errorresponse.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="DuoApplicationCreate" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="accountId"></param>
        /// <param name="body">DuoApplicationReq</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task DuoApplicationCreate_Validate(string accountId, JumpCloudApiSdkV2.Models.IDuoApplicationReq body, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(accountId),accountId);
                await eventListener.AssertNotNull(nameof(body), body);
                await eventListener.AssertObjectIsValid(nameof(body), body);
            }
        }

        /// <summary>
        /// Deletes the specified Duo application, an error will be returned if the application is used in a protected resource.
        /// #### Sample Request
        /// ```
        /// curl -X DELETE https://console.jumpcloud.com/api/v2/duo/accounts/{ACCOUNT_ID}/applications/{APPLICATION_ID} \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}''
        /// ```
        /// </summary>
        /// <param name="accountId"></param>
        /// <param name="applicationId"></param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onBadRequest">a delegate that is called when the remote service returns 400 (BadRequest).</param>
        /// <param name="onUnauthorized">a delegate that is called when the remote service returns 401 (Unauthorized).</param>
        /// <param name="onForbidden">a delegate that is called when the remote service returns 403 (Forbidden).</param>
        /// <param name="onNotFound">a delegate that is called when the remote service returns 404 (NotFound).</param>
        /// <param name="onConflict">a delegate that is called when the remote service returns 409 (Conflict).</param>
        /// <param name="onInternalServerError">a delegate that is called when the remote service returns 500 (InternalServerError).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task DuoApplicationDelete(string accountId, string applicationId, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IDuoApplication>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onBadRequest, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onUnauthorized, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onForbidden, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onNotFound, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onConflict, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onInternalServerError, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/duo/accounts/"
                        + global::System.Uri.EscapeDataString(accountId)
                        + "/applications/"
                        + global::System.Uri.EscapeDataString(applicationId)

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Delete, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.DuoApplicationDelete_Call(request,onOk,onBadRequest,onUnauthorized,onForbidden,onNotFound,onConflict,onInternalServerError,eventListener,sender);
            }
        }

        /// <summary>
        /// Deletes the specified Duo application, an error will be returned if the application is used in a protected resource.
        /// #### Sample Request
        /// ```
        /// curl -X DELETE https://console.jumpcloud.com/api/v2/duo/accounts/{ACCOUNT_ID}/applications/{APPLICATION_ID} \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}''
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onBadRequest">a delegate that is called when the remote service returns 400 (BadRequest).</param>
        /// <param name="onUnauthorized">a delegate that is called when the remote service returns 401 (Unauthorized).</param>
        /// <param name="onForbidden">a delegate that is called when the remote service returns 403 (Forbidden).</param>
        /// <param name="onNotFound">a delegate that is called when the remote service returns 404 (NotFound).</param>
        /// <param name="onConflict">a delegate that is called when the remote service returns 409 (Conflict).</param>
        /// <param name="onInternalServerError">a delegate that is called when the remote service returns 500 (InternalServerError).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task DuoApplicationDeleteViaIdentity(global::System.String viaIdentity, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IDuoApplication>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onBadRequest, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onUnauthorized, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onForbidden, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onNotFound, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onConflict, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onInternalServerError, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/duo/accounts/(?<account_id>[^/]+)/applications/(?<application_id>[^/]+)$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/duo/accounts/{account_id}/applications/{application_id}'");
                }

                // replace URI parameters with values from identity
                var accountId = _match.Groups["account_id"].Value;
                var applicationId = _match.Groups["application_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/duo/accounts/"
                        + accountId
                        + "/applications/"
                        + applicationId

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Delete, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.DuoApplicationDelete_Call(request,onOk,onBadRequest,onUnauthorized,onForbidden,onNotFound,onConflict,onInternalServerError,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="DuoApplicationDelete" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onBadRequest">a delegate that is called when the remote service returns 400 (BadRequest).</param>
        /// <param name="onUnauthorized">a delegate that is called when the remote service returns 401 (Unauthorized).</param>
        /// <param name="onForbidden">a delegate that is called when the remote service returns 403 (Forbidden).</param>
        /// <param name="onNotFound">a delegate that is called when the remote service returns 404 (NotFound).</param>
        /// <param name="onConflict">a delegate that is called when the remote service returns 409 (Conflict).</param>
        /// <param name="onInternalServerError">a delegate that is called when the remote service returns 500 (InternalServerError).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task DuoApplicationDelete_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IDuoApplication>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onBadRequest, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onUnauthorized, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onForbidden, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onNotFound, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onConflict, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onInternalServerError, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.DuoApplication.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.BadRequest:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onBadRequest(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.Errorresponse.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.Unauthorized:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onUnauthorized(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.Errorresponse.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.Forbidden:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onForbidden(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.Errorresponse.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.NotFound:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onNotFound(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.Errorresponse.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.Conflict:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onConflict(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.Errorresponse.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.InternalServerError:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onInternalServerError(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.Errorresponse.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="DuoApplicationDelete" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="accountId"></param>
        /// <param name="applicationId"></param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task DuoApplicationDelete_Validate(string accountId, string applicationId, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(accountId),accountId);
                await eventListener.AssertNotNull(nameof(applicationId),applicationId);
            }
        }

        /// <summary>
        /// This endpoint returns a specific Duo application that is associated with the specified Duo account.
        /// #### Sample Request
        /// ```
        /// curl https://console.jumpcloud.com/api/v2/duo/accounts/{ACCOUNT_ID}/applications/{APPLICATION_ID} \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="accountId"></param>
        /// <param name="applicationId"></param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onBadRequest">a delegate that is called when the remote service returns 400 (BadRequest).</param>
        /// <param name="onUnauthorized">a delegate that is called when the remote service returns 401 (Unauthorized).</param>
        /// <param name="onForbidden">a delegate that is called when the remote service returns 403 (Forbidden).</param>
        /// <param name="onNotFound">a delegate that is called when the remote service returns 404 (NotFound).</param>
        /// <param name="onConflict">a delegate that is called when the remote service returns 409 (Conflict).</param>
        /// <param name="onInternalServerError">a delegate that is called when the remote service returns 500 (InternalServerError).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task DuoApplicationGet(string accountId, string applicationId, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IDuoApplication>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onBadRequest, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onUnauthorized, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onForbidden, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onNotFound, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onConflict, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onInternalServerError, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/duo/accounts/"
                        + global::System.Uri.EscapeDataString(accountId)
                        + "/applications/"
                        + global::System.Uri.EscapeDataString(applicationId)

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.DuoApplicationGet_Call(request,onOk,onBadRequest,onUnauthorized,onForbidden,onNotFound,onConflict,onInternalServerError,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns a specific Duo application that is associated with the specified Duo account.
        /// #### Sample Request
        /// ```
        /// curl https://console.jumpcloud.com/api/v2/duo/accounts/{ACCOUNT_ID}/applications/{APPLICATION_ID} \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onBadRequest">a delegate that is called when the remote service returns 400 (BadRequest).</param>
        /// <param name="onUnauthorized">a delegate that is called when the remote service returns 401 (Unauthorized).</param>
        /// <param name="onForbidden">a delegate that is called when the remote service returns 403 (Forbidden).</param>
        /// <param name="onNotFound">a delegate that is called when the remote service returns 404 (NotFound).</param>
        /// <param name="onConflict">a delegate that is called when the remote service returns 409 (Conflict).</param>
        /// <param name="onInternalServerError">a delegate that is called when the remote service returns 500 (InternalServerError).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task DuoApplicationGetViaIdentity(global::System.String viaIdentity, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IDuoApplication>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onBadRequest, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onUnauthorized, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onForbidden, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onNotFound, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onConflict, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onInternalServerError, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/duo/accounts/(?<account_id>[^/]+)/applications/(?<application_id>[^/]+)$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/duo/accounts/{account_id}/applications/{application_id}'");
                }

                // replace URI parameters with values from identity
                var accountId = _match.Groups["account_id"].Value;
                var applicationId = _match.Groups["application_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/duo/accounts/"
                        + accountId
                        + "/applications/"
                        + applicationId

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.DuoApplicationGet_Call(request,onOk,onBadRequest,onUnauthorized,onForbidden,onNotFound,onConflict,onInternalServerError,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="DuoApplicationGet" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onBadRequest">a delegate that is called when the remote service returns 400 (BadRequest).</param>
        /// <param name="onUnauthorized">a delegate that is called when the remote service returns 401 (Unauthorized).</param>
        /// <param name="onForbidden">a delegate that is called when the remote service returns 403 (Forbidden).</param>
        /// <param name="onNotFound">a delegate that is called when the remote service returns 404 (NotFound).</param>
        /// <param name="onConflict">a delegate that is called when the remote service returns 409 (Conflict).</param>
        /// <param name="onInternalServerError">a delegate that is called when the remote service returns 500 (InternalServerError).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task DuoApplicationGet_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IDuoApplication>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onBadRequest, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onUnauthorized, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onForbidden, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onNotFound, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onConflict, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onInternalServerError, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.DuoApplication.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.BadRequest:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onBadRequest(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.Errorresponse.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.Unauthorized:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onUnauthorized(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.Errorresponse.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.Forbidden:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onForbidden(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.Errorresponse.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.NotFound:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onNotFound(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.Errorresponse.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.Conflict:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onConflict(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.Errorresponse.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.InternalServerError:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onInternalServerError(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.Errorresponse.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="DuoApplicationGet" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="accountId"></param>
        /// <param name="applicationId"></param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task DuoApplicationGet_Validate(string accountId, string applicationId, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(accountId),accountId);
                await eventListener.AssertNotNull(nameof(applicationId),applicationId);
            }
        }

        /// <summary>
        /// This endpoint returns all the Duo applications for the specified Duo account. Note: There can currently only be one Duo
        /// application for your organization.
        /// #### Sample Request
        /// ```
        /// curl https://console.jumpcloud.com/api/v2/duo/accounts/{ACCOUNT_ID}/applications \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="accountId"></param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onBadRequest">a delegate that is called when the remote service returns 400 (BadRequest).</param>
        /// <param name="onUnauthorized">a delegate that is called when the remote service returns 401 (Unauthorized).</param>
        /// <param name="onForbidden">a delegate that is called when the remote service returns 403 (Forbidden).</param>
        /// <param name="onNotFound">a delegate that is called when the remote service returns 404 (NotFound).</param>
        /// <param name="onConflict">a delegate that is called when the remote service returns 409 (Conflict).</param>
        /// <param name="onInternalServerError">a delegate that is called when the remote service returns 500 (InternalServerError).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task DuoApplicationList(string accountId, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IDuoApplication[]>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onBadRequest, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onUnauthorized, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onForbidden, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onNotFound, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onConflict, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onInternalServerError, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/duo/accounts/"
                        + global::System.Uri.EscapeDataString(accountId)
                        + "/applications"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.DuoApplicationList_Call(request,onOk,onBadRequest,onUnauthorized,onForbidden,onNotFound,onConflict,onInternalServerError,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns all the Duo applications for the specified Duo account. Note: There can currently only be one Duo
        /// application for your organization.
        /// #### Sample Request
        /// ```
        /// curl https://console.jumpcloud.com/api/v2/duo/accounts/{ACCOUNT_ID}/applications \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onBadRequest">a delegate that is called when the remote service returns 400 (BadRequest).</param>
        /// <param name="onUnauthorized">a delegate that is called when the remote service returns 401 (Unauthorized).</param>
        /// <param name="onForbidden">a delegate that is called when the remote service returns 403 (Forbidden).</param>
        /// <param name="onNotFound">a delegate that is called when the remote service returns 404 (NotFound).</param>
        /// <param name="onConflict">a delegate that is called when the remote service returns 409 (Conflict).</param>
        /// <param name="onInternalServerError">a delegate that is called when the remote service returns 500 (InternalServerError).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task DuoApplicationListViaIdentity(global::System.String viaIdentity, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IDuoApplication[]>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onBadRequest, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onUnauthorized, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onForbidden, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onNotFound, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onConflict, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onInternalServerError, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/duo/accounts/(?<account_id>[^/]+)/applications$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/duo/accounts/{account_id}/applications'");
                }

                // replace URI parameters with values from identity
                var accountId = _match.Groups["account_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/duo/accounts/"
                        + accountId
                        + "/applications"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.DuoApplicationList_Call(request,onOk,onBadRequest,onUnauthorized,onForbidden,onNotFound,onConflict,onInternalServerError,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="DuoApplicationList" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onBadRequest">a delegate that is called when the remote service returns 400 (BadRequest).</param>
        /// <param name="onUnauthorized">a delegate that is called when the remote service returns 401 (Unauthorized).</param>
        /// <param name="onForbidden">a delegate that is called when the remote service returns 403 (Forbidden).</param>
        /// <param name="onNotFound">a delegate that is called when the remote service returns 404 (NotFound).</param>
        /// <param name="onConflict">a delegate that is called when the remote service returns 409 (Conflict).</param>
        /// <param name="onInternalServerError">a delegate that is called when the remote service returns 500 (InternalServerError).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task DuoApplicationList_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IDuoApplication[]>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onBadRequest, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onUnauthorized, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onForbidden, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onNotFound, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onConflict, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onInternalServerError, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IDuoApplication[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IDuoApplication) (JumpCloudApiSdkV2.Models.DuoApplication.FromJson(__x) )) ))() : null));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.BadRequest:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onBadRequest(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.Errorresponse.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.Unauthorized:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onUnauthorized(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.Errorresponse.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.Forbidden:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onForbidden(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.Errorresponse.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.NotFound:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onNotFound(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.Errorresponse.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.Conflict:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onConflict(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.Errorresponse.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.InternalServerError:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onInternalServerError(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.Errorresponse.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="DuoApplicationList" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="accountId"></param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task DuoApplicationList_Validate(string accountId, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(accountId),accountId);
            }
        }

        /// <summary>
        /// Updates the specified Duo application.
        /// #### Sample Request
        /// ```
        /// curl -X PUT https://console.jumpcloud.com/api/v2/duo/accounts/{ACCOUNT_ID}/applications/{APPLICATION_ID} \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "name": "Application Name",
        /// "apiHost": "api-1234.duosecurity.com",
        /// "integrationKey": "1234",
        /// "secretKey": "5678"
        /// }'
        /// ```
        /// </summary>
        /// <param name="accountId"></param>
        /// <param name="applicationId"></param>
        /// <param name="body">DuoApplicationUpdateReq</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onBadRequest">a delegate that is called when the remote service returns 400 (BadRequest).</param>
        /// <param name="onUnauthorized">a delegate that is called when the remote service returns 401 (Unauthorized).</param>
        /// <param name="onForbidden">a delegate that is called when the remote service returns 403 (Forbidden).</param>
        /// <param name="onNotFound">a delegate that is called when the remote service returns 404 (NotFound).</param>
        /// <param name="onConflict">a delegate that is called when the remote service returns 409 (Conflict).</param>
        /// <param name="onInternalServerError">a delegate that is called when the remote service returns 500 (InternalServerError).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task DuoApplicationPut(string accountId, string applicationId, JumpCloudApiSdkV2.Models.IDuoApplicationUpdateReq body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IDuoApplication>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onBadRequest, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onUnauthorized, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onForbidden, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onNotFound, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onConflict, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onInternalServerError, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/duo/accounts/"
                        + global::System.Uri.EscapeDataString(accountId)
                        + "/applications/"
                        + global::System.Uri.EscapeDataString(applicationId)

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Put, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.DuoApplicationPut_Call(request,onOk,onBadRequest,onUnauthorized,onForbidden,onNotFound,onConflict,onInternalServerError,eventListener,sender);
            }
        }

        /// <summary>
        /// Updates the specified Duo application.
        /// #### Sample Request
        /// ```
        /// curl -X PUT https://console.jumpcloud.com/api/v2/duo/accounts/{ACCOUNT_ID}/applications/{APPLICATION_ID} \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "name": "Application Name",
        /// "apiHost": "api-1234.duosecurity.com",
        /// "integrationKey": "1234",
        /// "secretKey": "5678"
        /// }'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="body">DuoApplicationUpdateReq</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onBadRequest">a delegate that is called when the remote service returns 400 (BadRequest).</param>
        /// <param name="onUnauthorized">a delegate that is called when the remote service returns 401 (Unauthorized).</param>
        /// <param name="onForbidden">a delegate that is called when the remote service returns 403 (Forbidden).</param>
        /// <param name="onNotFound">a delegate that is called when the remote service returns 404 (NotFound).</param>
        /// <param name="onConflict">a delegate that is called when the remote service returns 409 (Conflict).</param>
        /// <param name="onInternalServerError">a delegate that is called when the remote service returns 500 (InternalServerError).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task DuoApplicationPutViaIdentity(global::System.String viaIdentity, JumpCloudApiSdkV2.Models.IDuoApplicationUpdateReq body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IDuoApplication>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onBadRequest, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onUnauthorized, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onForbidden, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onNotFound, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onConflict, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onInternalServerError, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/duo/accounts/(?<account_id>[^/]+)/applications/(?<application_id>[^/]+)$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/duo/accounts/{account_id}/applications/{application_id}'");
                }

                // replace URI parameters with values from identity
                var accountId = _match.Groups["account_id"].Value;
                var applicationId = _match.Groups["application_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/duo/accounts/"
                        + accountId
                        + "/applications/"
                        + applicationId

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Put, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.DuoApplicationPut_Call(request,onOk,onBadRequest,onUnauthorized,onForbidden,onNotFound,onConflict,onInternalServerError,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="DuoApplicationPut" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onBadRequest">a delegate that is called when the remote service returns 400 (BadRequest).</param>
        /// <param name="onUnauthorized">a delegate that is called when the remote service returns 401 (Unauthorized).</param>
        /// <param name="onForbidden">a delegate that is called when the remote service returns 403 (Forbidden).</param>
        /// <param name="onNotFound">a delegate that is called when the remote service returns 404 (NotFound).</param>
        /// <param name="onConflict">a delegate that is called when the remote service returns 409 (Conflict).</param>
        /// <param name="onInternalServerError">a delegate that is called when the remote service returns 500 (InternalServerError).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task DuoApplicationPut_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IDuoApplication>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onBadRequest, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onUnauthorized, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onForbidden, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onNotFound, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onConflict, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onInternalServerError, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.DuoApplication.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.BadRequest:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onBadRequest(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.Errorresponse.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.Unauthorized:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onUnauthorized(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.Errorresponse.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.Forbidden:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onForbidden(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.Errorresponse.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.NotFound:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onNotFound(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.Errorresponse.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.Conflict:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onConflict(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.Errorresponse.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.InternalServerError:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onInternalServerError(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.Errorresponse.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="DuoApplicationPut" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="accountId"></param>
        /// <param name="applicationId"></param>
        /// <param name="body">DuoApplicationUpdateReq</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task DuoApplicationPut_Validate(string accountId, string applicationId, JumpCloudApiSdkV2.Models.IDuoApplicationUpdateReq body, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(accountId),accountId);
                await eventListener.AssertNotNull(nameof(applicationId),applicationId);
                await eventListener.AssertNotNull(nameof(body), body);
                await eventListener.AssertObjectIsValid(nameof(body), body);
            }
        }

        /// <summary>
        /// This endpoint returns the _direct_ associations of this G Suite instance.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example G Suite and Users.
        /// #### Sample Request
        /// ```
        /// curl -X GET 'https://console.jumpcloud.com/api/v2/gsuites/{Gsuite_ID}/associations?targets=user_group \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="gsuiteId">ObjectID of the G Suite instance.</param>
        /// <param name="targets"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task GSuiteAssociationList(string gsuiteId, string[] targets, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/gsuites/"
                        + global::System.Uri.EscapeDataString(gsuiteId)
                        + "/associations"
                        + "?"
                        + (null != targets  && targets.Length > 0 ? "targets=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(targets, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.GSuiteAssociationList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns the _direct_ associations of this G Suite instance.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example G Suite and Users.
        /// #### Sample Request
        /// ```
        /// curl -X GET 'https://console.jumpcloud.com/api/v2/gsuites/{Gsuite_ID}/associations?targets=user_group \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="targets"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task GSuiteAssociationListViaIdentity(global::System.String viaIdentity, string[] targets, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/gsuites/(?<gsuite_id>[^/]+)/associations$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/gsuites/{gsuite_id}/associations'");
                }

                // replace URI parameters with values from identity
                var gsuiteId = _match.Groups["gsuite_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/gsuites/"
                        + gsuiteId
                        + "/associations"
                        + "?"
                        + (null != targets  && targets.Length > 0 ? "targets=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(targets, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.GSuiteAssociationList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="GSuiteAssociationList" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task GSuiteAssociationList_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphConnection[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphConnection) (JumpCloudApiSdkV2.Models.GraphConnection.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="GSuiteAssociationList" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="gsuiteId">ObjectID of the G Suite instance.</param>
        /// <param name="targets"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task GSuiteAssociationList_Validate(string gsuiteId, string[] targets, int? limit, int? skip, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(gsuiteId),gsuiteId);
                await eventListener.AssertNotNull(nameof(targets), targets);
                if (targets != null ) {
                        for (int __i = 0; __i < targets.Length; __i++) {
                          await eventListener.AssertEnum($"targets[{__i}]",targets[__i],@"active_directory", @"application", @"command", @"g_suite", @"ldap_server", @"office_365", @"policy", @"radius_server", @"system", @"system_group", @"user", @"user_group");
                        }
                      }
            }
        }

        /// <summary>
        /// This endpoint returns the _direct_ associations of this G Suite instance.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example G Suite and Users.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/gsuites/{Gsuite_ID}/associations \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "op": "add",
        /// "type": "user_group",
        /// "id": "{Group_ID}"
        /// }'
        /// ```
        /// </summary>
        /// <param name="gsuiteId">ObjectID of the G Suite instance.</param>
        /// <param name="body">GraphManagementReq</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task GSuiteAssociationSet(string gsuiteId, JumpCloudApiSdkV2.Models.IGraphManagementReq body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/gsuites/"
                        + global::System.Uri.EscapeDataString(gsuiteId)
                        + "/associations"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.GSuiteAssociationSet_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns the _direct_ associations of this G Suite instance.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example G Suite and Users.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/gsuites/{Gsuite_ID}/associations \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "op": "add",
        /// "type": "user_group",
        /// "id": "{Group_ID}"
        /// }'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="body">GraphManagementReq</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task GSuiteAssociationSetViaIdentity(global::System.String viaIdentity, JumpCloudApiSdkV2.Models.IGraphManagementReq body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/gsuites/(?<gsuite_id>[^/]+)/associations$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/gsuites/{gsuite_id}/associations'");
                }

                // replace URI parameters with values from identity
                var gsuiteId = _match.Groups["gsuite_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/gsuites/"
                        + gsuiteId
                        + "/associations"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.GSuiteAssociationSet_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="GSuiteAssociationSet" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task GSuiteAssociationSet_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.NoContent:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onNoContent(_response);
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="GSuiteAssociationSet" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="gsuiteId">ObjectID of the G Suite instance.</param>
        /// <param name="body">GraphManagementReq</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task GSuiteAssociationSet_Validate(string gsuiteId, JumpCloudApiSdkV2.Models.IGraphManagementReq body, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(gsuiteId),gsuiteId);
                await eventListener.AssertNotNull(nameof(body), body);
                await eventListener.AssertObjectIsValid(nameof(body), body);
            }
        }

        /// <summary>
        /// This endpoint returns a specific G Suite.
        /// ##### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/gsuites/{GSUITE_ID} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="id">Unique identifier of the GSuite.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task GSuiteGet(string id, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGsuiteOutput>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/gsuites/"
                        + global::System.Uri.EscapeDataString(id)

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.GSuiteGet_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns a specific G Suite.
        /// ##### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/gsuites/{GSUITE_ID} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task GSuiteGetViaIdentity(global::System.String viaIdentity, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGsuiteOutput>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/gsuites/(?<id>[^/]+)$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/gsuites/{id}'");
                }

                // replace URI parameters with values from identity
                var id = _match.Groups["id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/gsuites/"
                        + id

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.GSuiteGet_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="GSuiteGet" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task GSuiteGet_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGsuiteOutput>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.GsuiteOutput.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="GSuiteGet" /> method. Call this like the actual call, but you will get validation events
        /// back.
        /// </summary>
        /// <param name="id">Unique identifier of the GSuite.</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task GSuiteGet_Validate(string id, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(id),id);
            }
        }

        /// <summary>
        /// This endpoint allows updating some attributes of a G Suite.
        /// ##### Sample Request
        /// ```
        /// curl -X PATCH https://console.jumpcloud.com/api/v2/gsuites/{GSUITE_ID} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "userLockoutAction": "remove",
        /// "userPasswordExpirationAction": "disable"
        /// }'
        /// ```
        /// </summary>
        /// <param name="id">Unique identifier of the GSuite.</param>
        /// <param name="body">GSuite Patch Input</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task GSuitePatch(string id, JumpCloudApiSdkV2.Models.IGsuitePatchInput body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGsuiteOutput>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/gsuites/"
                        + global::System.Uri.EscapeDataString(id)

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Patch, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.GSuitePatch_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint allows updating some attributes of a G Suite.
        /// ##### Sample Request
        /// ```
        /// curl -X PATCH https://console.jumpcloud.com/api/v2/gsuites/{GSUITE_ID} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "userLockoutAction": "remove",
        /// "userPasswordExpirationAction": "disable"
        /// }'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="body">GSuite Patch Input</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task GSuitePatchViaIdentity(global::System.String viaIdentity, JumpCloudApiSdkV2.Models.IGsuitePatchInput body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGsuiteOutput>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/gsuites/(?<id>[^/]+)$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/gsuites/{id}'");
                }

                // replace URI parameters with values from identity
                var id = _match.Groups["id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/gsuites/"
                        + id

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Patch, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.GSuitePatch_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="GSuitePatch" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task GSuitePatch_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGsuiteOutput>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.GsuiteOutput.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="GSuitePatch" /> method. Call this like the actual call, but you will get validation events
        /// back.
        /// </summary>
        /// <param name="id">Unique identifier of the GSuite.</param>
        /// <param name="body">GSuite Patch Input</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task GSuitePatch_Validate(string id, JumpCloudApiSdkV2.Models.IGsuitePatchInput body, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(id),id);
                await eventListener.AssertNotNull(nameof(body), body);
                await eventListener.AssertObjectIsValid(nameof(body), body);
            }
        }

        /// <summary>
        /// This endpoint allows you to create a translation rule for a specific G Suite instance. These rules specify how JumpCloud
        /// attributes translate to [G Suite Admin SDK](https://developers.google.com/admin-sdk/directory/) attributes.
        /// ##### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/gsuites/{gsuite_id}/translationrules \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// {Translation Rule Parameters}
        /// }'
        /// ```
        /// </summary>
        /// <param name="gsuiteId"></param>
        /// <param name="body">G Suite Translation Rule Request</param>
        /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task GSuiteTranslationRuleCreate(string gsuiteId, JumpCloudApiSdkV2.Models.IGSuiteTranslationRuleRequest body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGSuiteTranslationRule>, global::System.Threading.Tasks.Task> onCreated, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/gsuites/"
                        + global::System.Uri.EscapeDataString(gsuiteId)
                        + "/translationrules"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.GSuiteTranslationRuleCreate_Call(request,onCreated,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint allows you to create a translation rule for a specific G Suite instance. These rules specify how JumpCloud
        /// attributes translate to [G Suite Admin SDK](https://developers.google.com/admin-sdk/directory/) attributes.
        /// ##### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/gsuites/{gsuite_id}/translationrules \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// {Translation Rule Parameters}
        /// }'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="body">G Suite Translation Rule Request</param>
        /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task GSuiteTranslationRuleCreateViaIdentity(global::System.String viaIdentity, JumpCloudApiSdkV2.Models.IGSuiteTranslationRuleRequest body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGSuiteTranslationRule>, global::System.Threading.Tasks.Task> onCreated, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/gsuites/(?<gsuite_id>[^/]+)/translationrules$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/gsuites/{gsuite_id}/translationrules'");
                }

                // replace URI parameters with values from identity
                var gsuiteId = _match.Groups["gsuite_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/gsuites/"
                        + gsuiteId
                        + "/translationrules"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.GSuiteTranslationRuleCreate_Call(request,onCreated,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="GSuiteTranslationRuleCreate" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task GSuiteTranslationRuleCreate_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGSuiteTranslationRule>, global::System.Threading.Tasks.Task> onCreated, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.Created:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onCreated(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.GSuiteTranslationRule.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="GSuiteTranslationRuleCreate" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="gsuiteId"></param>
        /// <param name="body">G Suite Translation Rule Request</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task GSuiteTranslationRuleCreate_Validate(string gsuiteId, JumpCloudApiSdkV2.Models.IGSuiteTranslationRuleRequest body, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(gsuiteId),gsuiteId);
                await eventListener.AssertNotNull(nameof(body), body);
                await eventListener.AssertObjectIsValid(nameof(body), body);
            }
        }

        /// <summary>
        /// This endpoint allows you to delete a translation rule for a specific G Suite instance. These rules specify how JumpCloud
        /// attributes translate to [G Suite Admin SDK](https://developers.google.com/admin-sdk/directory/) attributes.
        /// #### Sample Request
        /// ```
        /// curl -X DELETE https://console.jumpcloud.com/api/v2/gsuites/{gsuite_id}/translationrules/{id} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="gsuiteId"></param>
        /// <param name="id"></param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task GSuiteTranslationRuleDelete(string gsuiteId, string id, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/gsuites/"
                        + global::System.Uri.EscapeDataString(gsuiteId)
                        + "/translationrules/"
                        + global::System.Uri.EscapeDataString(id)

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Delete, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.GSuiteTranslationRuleDelete_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint allows you to delete a translation rule for a specific G Suite instance. These rules specify how JumpCloud
        /// attributes translate to [G Suite Admin SDK](https://developers.google.com/admin-sdk/directory/) attributes.
        /// #### Sample Request
        /// ```
        /// curl -X DELETE https://console.jumpcloud.com/api/v2/gsuites/{gsuite_id}/translationrules/{id} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task GSuiteTranslationRuleDeleteViaIdentity(global::System.String viaIdentity, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/gsuites/(?<gsuite_id>[^/]+)/translationrules/(?<id>[^/]+)$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/gsuites/{gsuite_id}/translationrules/{id}'");
                }

                // replace URI parameters with values from identity
                var gsuiteId = _match.Groups["gsuite_id"].Value;
                var id = _match.Groups["id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/gsuites/"
                        + gsuiteId
                        + "/translationrules/"
                        + id

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Delete, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.GSuiteTranslationRuleDelete_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="GSuiteTranslationRuleDelete" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task GSuiteTranslationRuleDelete_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.NoContent:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onNoContent(_response);
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="GSuiteTranslationRuleDelete" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="gsuiteId"></param>
        /// <param name="id"></param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task GSuiteTranslationRuleDelete_Validate(string gsuiteId, string id, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(gsuiteId),gsuiteId);
                await eventListener.AssertNotNull(nameof(id),id);
            }
        }

        /// <summary>
        /// This endpoint returns a specific translation rule for a specific G Suite instance. These rules specify how JumpCloud attributes
        /// translate to [G Suite Admin SDK](https://developers.google.com/admin-sdk/directory/) attributes.
        /// ###### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/gsuites/{gsuite_id}/translationrules/{id} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="gsuiteId"></param>
        /// <param name="id"></param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task GSuiteTranslationRuleGet(string gsuiteId, string id, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGSuiteTranslationRule>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/gsuites/"
                        + global::System.Uri.EscapeDataString(gsuiteId)
                        + "/translationrules/"
                        + global::System.Uri.EscapeDataString(id)

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.GSuiteTranslationRuleGet_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns a specific translation rule for a specific G Suite instance. These rules specify how JumpCloud attributes
        /// translate to [G Suite Admin SDK](https://developers.google.com/admin-sdk/directory/) attributes.
        /// ###### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/gsuites/{gsuite_id}/translationrules/{id} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task GSuiteTranslationRuleGetViaIdentity(global::System.String viaIdentity, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGSuiteTranslationRule>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/gsuites/(?<gsuite_id>[^/]+)/translationrules/(?<id>[^/]+)$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/gsuites/{gsuite_id}/translationrules/{id}'");
                }

                // replace URI parameters with values from identity
                var gsuiteId = _match.Groups["gsuite_id"].Value;
                var id = _match.Groups["id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/gsuites/"
                        + gsuiteId
                        + "/translationrules/"
                        + id

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.GSuiteTranslationRuleGet_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="GSuiteTranslationRuleGet" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task GSuiteTranslationRuleGet_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGSuiteTranslationRule>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.GSuiteTranslationRule.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="GSuiteTranslationRuleGet" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="gsuiteId"></param>
        /// <param name="id"></param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task GSuiteTranslationRuleGet_Validate(string gsuiteId, string id, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(gsuiteId),gsuiteId);
                await eventListener.AssertNotNull(nameof(id),id);
            }
        }

        /// <summary>
        /// This endpoint returns all graph translation rules for a specific G Suite instance. These rules specify how JumpCloud attributes
        /// translate to [G Suite Admin SDK](https://developers.google.com/admin-sdk/directory/) attributes.
        /// ##### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/gsuites/{gsuite_id}/translationrules \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="gsuiteId"></param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task GSuiteTranslationRuleList(string gsuiteId, string[] filter, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGSuiteTranslationRule[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/gsuites/"
                        + global::System.Uri.EscapeDataString(gsuiteId)
                        + "/translationrules"
                        + "?"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.GSuiteTranslationRuleList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns all graph translation rules for a specific G Suite instance. These rules specify how JumpCloud attributes
        /// translate to [G Suite Admin SDK](https://developers.google.com/admin-sdk/directory/) attributes.
        /// ##### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/gsuites/{gsuite_id}/translationrules \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task GSuiteTranslationRuleListViaIdentity(global::System.String viaIdentity, string[] filter, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGSuiteTranslationRule[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/gsuites/(?<gsuite_id>[^/]+)/translationrules$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/gsuites/{gsuite_id}/translationrules'");
                }

                // replace URI parameters with values from identity
                var gsuiteId = _match.Groups["gsuite_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/gsuites/"
                        + gsuiteId
                        + "/translationrules"
                        + "?"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.GSuiteTranslationRuleList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="GSuiteTranslationRuleList" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task GSuiteTranslationRuleList_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGSuiteTranslationRule[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGSuiteTranslationRule[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGSuiteTranslationRule) (JumpCloudApiSdkV2.Models.GSuiteTranslationRule.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="GSuiteTranslationRuleList" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="gsuiteId"></param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task GSuiteTranslationRuleList_Validate(string gsuiteId, string[] filter, int? limit, int? skip, string[] sort, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(gsuiteId),gsuiteId);
            }
        }

        /// <summary>
        /// This endpoint will return all User Groups bound to an G Suite instance, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the group's type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this G Suite instance to the corresponding User Group; this array represents
        /// all grouping and/or associations that would have to be removed to deprovision the User Group from this G Suite instance.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/gsuites/{GSuite_ID}/usergroups \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="gsuiteId">ObjectID of the G Suite instance.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task GSuiteTraverseUserGroupList(string gsuiteId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/gsuites/"
                        + global::System.Uri.EscapeDataString(gsuiteId)
                        + "/usergroups"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.GSuiteTraverseUserGroupList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all User Groups bound to an G Suite instance, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the group's type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this G Suite instance to the corresponding User Group; this array represents
        /// all grouping and/or associations that would have to be removed to deprovision the User Group from this G Suite instance.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/gsuites/{GSuite_ID}/usergroups \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task GSuiteTraverseUserGroupListViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/gsuites/(?<gsuite_id>[^/]+)/usergroups$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/gsuites/{gsuite_id}/usergroups'");
                }

                // replace URI parameters with values from identity
                var gsuiteId = _match.Groups["gsuite_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/gsuites/"
                        + gsuiteId
                        + "/usergroups"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.GSuiteTraverseUserGroupList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="GSuiteTraverseUserGroupList" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task GSuiteTraverseUserGroupList_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphObjectWithPaths) (JumpCloudApiSdkV2.Models.GraphObjectWithPaths.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="GSuiteTraverseUserGroupList" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="gsuiteId">ObjectID of the G Suite instance.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task GSuiteTraverseUserGroupList_Validate(string gsuiteId, int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(gsuiteId),gsuiteId);
            }
        }

        /// <summary>
        /// This endpoint will return all Users bound to a G Suite instance, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this G Suite instance to the corresponding User; this array represents all
        /// grouping and/or associations that would have to be removed to deprovision the User from this G Suite instance.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/gsuites/{Gsuite_ID}/users \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="gsuiteId">ObjectID of the G Suite instance.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task GSuiteTraverseUserList(string gsuiteId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/gsuites/"
                        + global::System.Uri.EscapeDataString(gsuiteId)
                        + "/users"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.GSuiteTraverseUserList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all Users bound to a G Suite instance, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this G Suite instance to the corresponding User; this array represents all
        /// grouping and/or associations that would have to be removed to deprovision the User from this G Suite instance.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/gsuites/{Gsuite_ID}/users \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task GSuiteTraverseUserListViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/gsuites/(?<gsuite_id>[^/]+)/users$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/gsuites/{gsuite_id}/users'");
                }

                // replace URI parameters with values from identity
                var gsuiteId = _match.Groups["gsuite_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/gsuites/"
                        + gsuiteId
                        + "/users"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.GSuiteTraverseUserList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="GSuiteTraverseUserList" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task GSuiteTraverseUserList_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphObjectWithPaths) (JumpCloudApiSdkV2.Models.GraphObjectWithPaths.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="GSuiteTraverseUserList" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="gsuiteId">ObjectID of the G Suite instance.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task GSuiteTraverseUserList_Validate(string gsuiteId, int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(gsuiteId),gsuiteId);
            }
        }

        /// <summary>
        /// This endpoint returns all Groups that exist in your organization.
        /// #### Available filter fields:
        /// - `name`
        /// - `disabled`
        /// - `type`
        /// #### Sample Request
        /// ```
        /// curl -X GET \
        /// https://console.jumpcloud.com/api/v2/groups \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onDefault">a delegate that is called when the remote service returns default (any response code not handled
        /// elsewhere).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task GroupList(string[] filter, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGroup[]>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IError>, global::System.Threading.Tasks.Task> onDefault, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/groups"
                        + "?"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.GroupList_Call(request,onOk,onDefault,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns all Groups that exist in your organization.
        /// #### Available filter fields:
        /// - `name`
        /// - `disabled`
        /// - `type`
        /// #### Sample Request
        /// ```
        /// curl -X GET \
        /// https://console.jumpcloud.com/api/v2/groups \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onDefault">a delegate that is called when the remote service returns default (any response code not handled
        /// elsewhere).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task GroupListViaIdentity(global::System.String viaIdentity, string[] filter, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGroup[]>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IError>, global::System.Threading.Tasks.Task> onDefault, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/groups$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/groups'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/groups"
                        + "?"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.GroupList_Call(request,onOk,onDefault,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="GroupList" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onDefault">a delegate that is called when the remote service returns default (any response code not handled
        /// elsewhere).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task GroupList_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGroup[]>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IError>, global::System.Threading.Tasks.Task> onDefault, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGroup[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGroup) (JumpCloudApiSdkV2.Models.Group.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onDefault(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.Error.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="GroupList" /> method. Call this like the actual call, but you will get validation events
        /// back.
        /// </summary>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task GroupList_Validate(string[] filter, int? limit, int? skip, string[] sort, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {

            }
        }

        /// <summary>
        /// This endpoint returns the _direct_ associations of this LDAP Server.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example LDAP and Users.
        /// #### Sample Request
        /// ```
        /// curl -X GET 'https://console.jumpcloud.com/api/v2/ldapservers/{LDAP_ID}/associations?targets=user_group \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="ldapserverId">ObjectID of the LDAP Server.</param>
        /// <param name="targets"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task LdapServerAssociationList(string ldapserverId, string[] targets, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/ldapservers/"
                        + global::System.Uri.EscapeDataString(ldapserverId)
                        + "/associations"
                        + "?"
                        + (null != targets  && targets.Length > 0 ? "targets=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(targets, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.LdapServerAssociationList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns the _direct_ associations of this LDAP Server.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example LDAP and Users.
        /// #### Sample Request
        /// ```
        /// curl -X GET 'https://console.jumpcloud.com/api/v2/ldapservers/{LDAP_ID}/associations?targets=user_group \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="targets"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task LdapServerAssociationListViaIdentity(global::System.String viaIdentity, string[] targets, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/ldapservers/(?<ldapserver_id>[^/]+)/associations$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/ldapservers/{ldapserver_id}/associations'");
                }

                // replace URI parameters with values from identity
                var ldapserverId = _match.Groups["ldapserver_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/ldapservers/"
                        + ldapserverId
                        + "/associations"
                        + "?"
                        + (null != targets  && targets.Length > 0 ? "targets=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(targets, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.LdapServerAssociationList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="LdapServerAssociationList" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task LdapServerAssociationList_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphConnection[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphConnection) (JumpCloudApiSdkV2.Models.GraphConnection.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="LdapServerAssociationList" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="ldapserverId">ObjectID of the LDAP Server.</param>
        /// <param name="targets"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task LdapServerAssociationList_Validate(string ldapserverId, string[] targets, int? limit, int? skip, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(ldapserverId),ldapserverId);
                await eventListener.AssertNotNull(nameof(targets), targets);
                if (targets != null ) {
                        for (int __i = 0; __i < targets.Length; __i++) {
                          await eventListener.AssertEnum($"targets[{__i}]",targets[__i],@"active_directory", @"application", @"command", @"g_suite", @"ldap_server", @"office_365", @"policy", @"radius_server", @"system", @"system_group", @"user", @"user_group");
                        }
                      }
            }
        }

        /// <summary>
        /// This endpoint allows you to manage the _direct_ associations of a LDAP Server.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example LDAP and Users.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/ldapservers/{LDAP_ID}/associations \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "op": "add",
        /// "type": "user",
        /// "id": "{User_ID}"
        /// }'
        /// ```
        /// </summary>
        /// <param name="ldapserverId">ObjectID of the LDAP Server.</param>
        /// <param name="body">GraphManagementReq</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task LdapServerAssociationSet(string ldapserverId, JumpCloudApiSdkV2.Models.IGraphManagementReq body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/ldapservers/"
                        + global::System.Uri.EscapeDataString(ldapserverId)
                        + "/associations"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.LdapServerAssociationSet_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint allows you to manage the _direct_ associations of a LDAP Server.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example LDAP and Users.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/ldapservers/{LDAP_ID}/associations \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "op": "add",
        /// "type": "user",
        /// "id": "{User_ID}"
        /// }'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="body">GraphManagementReq</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task LdapServerAssociationSetViaIdentity(global::System.String viaIdentity, JumpCloudApiSdkV2.Models.IGraphManagementReq body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/ldapservers/(?<ldapserver_id>[^/]+)/associations$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/ldapservers/{ldapserver_id}/associations'");
                }

                // replace URI parameters with values from identity
                var ldapserverId = _match.Groups["ldapserver_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/ldapservers/"
                        + ldapserverId
                        + "/associations"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.LdapServerAssociationSet_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="LdapServerAssociationSet" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task LdapServerAssociationSet_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.NoContent:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onNoContent(_response);
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="LdapServerAssociationSet" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="ldapserverId">ObjectID of the LDAP Server.</param>
        /// <param name="body">GraphManagementReq</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task LdapServerAssociationSet_Validate(string ldapserverId, JumpCloudApiSdkV2.Models.IGraphManagementReq body, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(ldapserverId),ldapserverId);
                await eventListener.AssertNotNull(nameof(body), body);
                await eventListener.AssertObjectIsValid(nameof(body), body);
            }
        }

        /// <summary>
        /// This endpoint returns a specific LDAP server.
        /// ##### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/ldapservers/{LDAP_ID} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="id">Unique identifier of the LDAP server.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task LdapServerGet(string id, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ILdapServerOutput>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/ldapservers/"
                        + global::System.Uri.EscapeDataString(id)

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.LdapServerGet_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns a specific LDAP server.
        /// ##### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/ldapservers/{LDAP_ID} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task LdapServerGetViaIdentity(global::System.String viaIdentity, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ILdapServerOutput>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/ldapservers/(?<id>[^/]+)$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/ldapservers/{id}'");
                }

                // replace URI parameters with values from identity
                var id = _match.Groups["id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/ldapservers/"
                        + id

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.LdapServerGet_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="LdapServerGet" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task LdapServerGet_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ILdapServerOutput>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.LdapServerOutput.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="LdapServerGet" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="id">Unique identifier of the LDAP server.</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task LdapServerGet_Validate(string id, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(id),id);
            }
        }

        /// <summary>
        /// This endpoint returns the object IDs of your LDAP servers.
        /// ##### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/ldapservers/ \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// </summary>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task LdapServerList(string[] filter, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ILdapServerOutput[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/ldapservers"
                        + "?"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.LdapServerList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns the object IDs of your LDAP servers.
        /// ##### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/ldapservers/ \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task LdapServerListViaIdentity(global::System.String viaIdentity, string[] filter, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ILdapServerOutput[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/ldapservers$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/ldapservers'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/ldapservers"
                        + "?"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.LdapServerList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="LdapServerList" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task LdapServerList_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ILdapServerOutput[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.ILdapServerOutput[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.ILdapServerOutput) (JumpCloudApiSdkV2.Models.LdapServerOutput.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="LdapServerList" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task LdapServerList_Validate(string[] filter, int? limit, int? skip, string[] sort, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {

            }
        }

        /// <summary>
        /// This endpoint allows updating some attributes of an LDAP server.
        /// Sample Request
        /// ```
        /// curl -X PATCH https://console.jumpcloud.com/api/v2/ldapservers/{LDAP_ID} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "userLockoutAction": "remove",
        /// "userPasswordExpirationAction": "disable"
        /// }'
        /// ```
        /// </summary>
        /// <param name="id">Unique identifier of the LDAP server.</param>
        /// <param name="xApiKey"></param>
        /// <param name="xOrgId"></param>
        /// <param name="body"></param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onBadRequest">a delegate that is called when the remote service returns 400 (BadRequest).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task LdapServerPatch(string id, string xApiKey, string xOrgId, JumpCloudApiSdkV2.Models.IBodyParameterLdapServerPatchRequestBody body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IPathsLdapserversIdPatchResponses200ContentApplicationJsonSchema>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IPathsLdapserversIdPatchResponses400ContentApplicationJsonSchema>, global::System.Threading.Tasks.Task> onBadRequest, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/ldapservers/"
                        + global::System.Uri.EscapeDataString(id)

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Patch, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // add headers parameters
                if (null != xApiKey)
                {
                    request.Headers.Add("x-api-key",xApiKey);
                }
                if (null != xOrgId)
                {
                    request.Headers.Add("x-org-id",xOrgId);
                }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.LdapServerPatch_Call(request,onOk,onBadRequest,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint allows updating some attributes of an LDAP server.
        /// Sample Request
        /// ```
        /// curl -X PATCH https://console.jumpcloud.com/api/v2/ldapservers/{LDAP_ID} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "userLockoutAction": "remove",
        /// "userPasswordExpirationAction": "disable"
        /// }'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="xApiKey"></param>
        /// <param name="xOrgId"></param>
        /// <param name="body"></param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onBadRequest">a delegate that is called when the remote service returns 400 (BadRequest).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task LdapServerPatchViaIdentity(global::System.String viaIdentity, string xApiKey, string xOrgId, JumpCloudApiSdkV2.Models.IBodyParameterLdapServerPatchRequestBody body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IPathsLdapserversIdPatchResponses200ContentApplicationJsonSchema>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IPathsLdapserversIdPatchResponses400ContentApplicationJsonSchema>, global::System.Threading.Tasks.Task> onBadRequest, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/ldapservers/(?<id>[^/]+)$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/ldapservers/{id}'");
                }

                // replace URI parameters with values from identity
                var id = _match.Groups["id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/ldapservers/"
                        + id

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Patch, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // add headers parameters
                if (null != xApiKey)
                {
                    request.Headers.Add("x-api-key",xApiKey);
                }
                if (null != xOrgId)
                {
                    request.Headers.Add("x-org-id",xOrgId);
                }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.LdapServerPatch_Call(request,onOk,onBadRequest,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="LdapServerPatch" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onBadRequest">a delegate that is called when the remote service returns 400 (BadRequest).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task LdapServerPatch_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IPathsLdapserversIdPatchResponses200ContentApplicationJsonSchema>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IPathsLdapserversIdPatchResponses400ContentApplicationJsonSchema>, global::System.Threading.Tasks.Task> onBadRequest, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.PathsLdapserversIdPatchResponses200ContentApplicationJsonSchema.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.BadRequest:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onBadRequest(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.PathsLdapserversIdPatchResponses400ContentApplicationJsonSchema.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="LdapServerPatch" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="id">Unique identifier of the LDAP server.</param>
        /// <param name="xApiKey"></param>
        /// <param name="xOrgId"></param>
        /// <param name="body"></param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task LdapServerPatch_Validate(string id, string xApiKey, string xOrgId, JumpCloudApiSdkV2.Models.IBodyParameterLdapServerPatchRequestBody body, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(id),id);
                await eventListener.AssertNotNull(nameof(xApiKey),xApiKey);
                await eventListener.AssertNotNull(nameof(xOrgId),xOrgId);
                await eventListener.AssertNotNull(nameof(body), body);
                await eventListener.AssertObjectIsValid(nameof(body), body);
            }
        }

        /// <summary>
        /// This endpoint allows you to create a samba domain for an LDAP server.
        /// ##### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/ldapservers/{LDAP_ID}/sambadomains \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "sid":"{SID_ID}",
        /// "name":"{WORKGROUP_NAME}"
        /// }'
        /// ```
        /// </summary>
        /// <param name="ldapserverId">Unique identifier of the LDAP server.</param>
        /// <param name="contentType"></param>
        /// <param name="accept"></param>
        /// <param name="body">Samba Domain Input</param>
        /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task LdapServerSambaDomainCreate(string ldapserverId, string contentType, string accept, JumpCloudApiSdkV2.Models.ISambaDomainInput body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISambaDomainOutput>, global::System.Threading.Tasks.Task> onCreated, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/ldapservers/"
                        + global::System.Uri.EscapeDataString(ldapserverId)
                        + "/sambadomains"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // add headers parameters
                if (null != contentType)
                {
                    request.Headers.Add("Content-Type",contentType);
                }
                if (null != accept)
                {
                    request.Headers.Add("Accept",accept);
                }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.LdapServerSambaDomainCreate_Call(request,onCreated,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint allows you to create a samba domain for an LDAP server.
        /// ##### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/ldapservers/{LDAP_ID}/sambadomains \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "sid":"{SID_ID}",
        /// "name":"{WORKGROUP_NAME}"
        /// }'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="contentType"></param>
        /// <param name="accept"></param>
        /// <param name="body">Samba Domain Input</param>
        /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task LdapServerSambaDomainCreateViaIdentity(global::System.String viaIdentity, string contentType, string accept, JumpCloudApiSdkV2.Models.ISambaDomainInput body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISambaDomainOutput>, global::System.Threading.Tasks.Task> onCreated, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/ldapservers/(?<ldapserver_id>[^/]+)/sambadomains$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/ldapservers/{ldapserver_id}/sambadomains'");
                }

                // replace URI parameters with values from identity
                var ldapserverId = _match.Groups["ldapserver_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/ldapservers/"
                        + ldapserverId
                        + "/sambadomains"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // add headers parameters
                if (null != contentType)
                {
                    request.Headers.Add("Content-Type",contentType);
                }
                if (null != accept)
                {
                    request.Headers.Add("Accept",accept);
                }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.LdapServerSambaDomainCreate_Call(request,onCreated,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="LdapServerSambaDomainCreate" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task LdapServerSambaDomainCreate_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISambaDomainOutput>, global::System.Threading.Tasks.Task> onCreated, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.Created:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onCreated(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.SambaDomainOutput.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="LdapServerSambaDomainCreate" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="ldapserverId">Unique identifier of the LDAP server.</param>
        /// <param name="contentType"></param>
        /// <param name="accept"></param>
        /// <param name="body">Samba Domain Input</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task LdapServerSambaDomainCreate_Validate(string ldapserverId, string contentType, string accept, JumpCloudApiSdkV2.Models.ISambaDomainInput body, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(ldapserverId),ldapserverId);
                await eventListener.AssertNotNull(nameof(contentType),contentType);
                await eventListener.AssertNotNull(nameof(accept),accept);
                await eventListener.AssertNotNull(nameof(body), body);
                await eventListener.AssertObjectIsValid(nameof(body), body);
            }
        }

        /// <summary>
        /// This endpoint allows you to delete a samba domain from an LDAP server.
        /// ##### Sample Request
        /// ```
        /// curl -X DELETE https://console.jumpcloud.com/api/v2/ldapservers/{LDAP_ID}/sambadomains/{SAMBA_ID} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="ldapserverId">Unique identifier of the LDAP server.</param>
        /// <param name="id">Unique identifier of the samba domain.</param>
        /// <param name="contentType"></param>
        /// <param name="accept"></param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task LdapServerSambaDomainDelete(string ldapserverId, string id, string contentType, string accept, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<string>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/ldapservers/"
                        + global::System.Uri.EscapeDataString(ldapserverId)
                        + "/sambadomains/"
                        + global::System.Uri.EscapeDataString(id)

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Delete, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // add headers parameters
                if (null != contentType)
                {
                    request.Headers.Add("Content-Type",contentType);
                }
                if (null != accept)
                {
                    request.Headers.Add("Accept",accept);
                }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.LdapServerSambaDomainDelete_Call(request,onOk,onNoContent,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint allows you to delete a samba domain from an LDAP server.
        /// ##### Sample Request
        /// ```
        /// curl -X DELETE https://console.jumpcloud.com/api/v2/ldapservers/{LDAP_ID}/sambadomains/{SAMBA_ID} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="contentType"></param>
        /// <param name="accept"></param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task LdapServerSambaDomainDeleteViaIdentity(global::System.String viaIdentity, string contentType, string accept, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<string>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/ldapservers/(?<ldapserver_id>[^/]+)/sambadomains/(?<id>[^/]+)$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/ldapservers/{ldapserver_id}/sambadomains/{id}'");
                }

                // replace URI parameters with values from identity
                var ldapserverId = _match.Groups["ldapserver_id"].Value;
                var id = _match.Groups["id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/ldapservers/"
                        + ldapserverId
                        + "/sambadomains/"
                        + id

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Delete, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // add headers parameters
                if (null != contentType)
                {
                    request.Headers.Add("Content-Type",contentType);
                }
                if (null != accept)
                {
                    request.Headers.Add("Accept",accept);
                }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.LdapServerSambaDomainDelete_Call(request,onOk,onNoContent,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="LdapServerSambaDomainDelete" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task LdapServerSambaDomainDelete_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<string>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result) is JumpCloudApiSdkV2.Runtime.Json.JsonString __y ? (string)(__y.ToString()) : null));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.NoContent:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onNoContent(_response);
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="LdapServerSambaDomainDelete" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="ldapserverId">Unique identifier of the LDAP server.</param>
        /// <param name="id">Unique identifier of the samba domain.</param>
        /// <param name="contentType"></param>
        /// <param name="accept"></param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task LdapServerSambaDomainDelete_Validate(string ldapserverId, string id, string contentType, string accept, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(ldapserverId),ldapserverId);
                await eventListener.AssertNotNull(nameof(id),id);
                await eventListener.AssertNotNull(nameof(contentType),contentType);
                await eventListener.AssertNotNull(nameof(accept),accept);
            }
        }

        /// <summary>
        /// This endpoint returns a specific samba domain for an LDAP server.
        /// ##### Sample Request
        /// ```
        /// curl -X GET \
        /// https://console.jumpcloud.com/api/v2/ldapservers/ldapservers/{LDAP_ID}/sambadomains/{SAMBA_ID} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="ldapserverId">Unique identifier of the LDAP server.</param>
        /// <param name="id">Unique identifier of the samba domain.</param>
        /// <param name="contentType"></param>
        /// <param name="accept"></param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task LdapServerSambaDomainGet(string ldapserverId, string id, string contentType, string accept, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISambaDomainOutput>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/ldapservers/"
                        + global::System.Uri.EscapeDataString(ldapserverId)
                        + "/sambadomains/"
                        + global::System.Uri.EscapeDataString(id)

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // add headers parameters
                if (null != contentType)
                {
                    request.Headers.Add("Content-Type",contentType);
                }
                if (null != accept)
                {
                    request.Headers.Add("Accept",accept);
                }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.LdapServerSambaDomainGet_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns a specific samba domain for an LDAP server.
        /// ##### Sample Request
        /// ```
        /// curl -X GET \
        /// https://console.jumpcloud.com/api/v2/ldapservers/ldapservers/{LDAP_ID}/sambadomains/{SAMBA_ID} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="contentType"></param>
        /// <param name="accept"></param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task LdapServerSambaDomainGetViaIdentity(global::System.String viaIdentity, string contentType, string accept, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISambaDomainOutput>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/ldapservers/(?<ldapserver_id>[^/]+)/sambadomains/(?<id>[^/]+)$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/ldapservers/{ldapserver_id}/sambadomains/{id}'");
                }

                // replace URI parameters with values from identity
                var ldapserverId = _match.Groups["ldapserver_id"].Value;
                var id = _match.Groups["id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/ldapservers/"
                        + ldapserverId
                        + "/sambadomains/"
                        + id

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // add headers parameters
                if (null != contentType)
                {
                    request.Headers.Add("Content-Type",contentType);
                }
                if (null != accept)
                {
                    request.Headers.Add("Accept",accept);
                }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.LdapServerSambaDomainGet_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="LdapServerSambaDomainGet" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task LdapServerSambaDomainGet_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISambaDomainOutput>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.SambaDomainOutput.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="LdapServerSambaDomainGet" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="ldapserverId">Unique identifier of the LDAP server.</param>
        /// <param name="id">Unique identifier of the samba domain.</param>
        /// <param name="contentType"></param>
        /// <param name="accept"></param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task LdapServerSambaDomainGet_Validate(string ldapserverId, string id, string contentType, string accept, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(ldapserverId),ldapserverId);
                await eventListener.AssertNotNull(nameof(id),id);
                await eventListener.AssertNotNull(nameof(contentType),contentType);
                await eventListener.AssertNotNull(nameof(accept),accept);
            }
        }

        /// <summary>
        /// This endpoint returns all samba domains for an LDAP server.
        /// ##### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/ldapservers/{LDAP_ID}/sambadomains \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="ldapserverId">Unique identifier of the LDAP server.</param>
        /// <param name="contentType"></param>
        /// <param name="accept"></param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onDefault">a delegate that is called when the remote service returns default (any response code not handled
        /// elsewhere).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task LdapServerSambaDomainList(string ldapserverId, string contentType, string accept, string[] filter, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISambaDomainOutput[]>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IError>, global::System.Threading.Tasks.Task> onDefault, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/ldapservers/"
                        + global::System.Uri.EscapeDataString(ldapserverId)
                        + "/sambadomains"
                        + "?"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // add headers parameters
                if (null != contentType)
                {
                    request.Headers.Add("Content-Type",contentType);
                }
                if (null != accept)
                {
                    request.Headers.Add("Accept",accept);
                }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.LdapServerSambaDomainList_Call(request,onOk,onDefault,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns all samba domains for an LDAP server.
        /// ##### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/ldapservers/{LDAP_ID}/sambadomains \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="contentType"></param>
        /// <param name="accept"></param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onDefault">a delegate that is called when the remote service returns default (any response code not handled
        /// elsewhere).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task LdapServerSambaDomainListViaIdentity(global::System.String viaIdentity, string contentType, string accept, string[] filter, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISambaDomainOutput[]>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IError>, global::System.Threading.Tasks.Task> onDefault, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/ldapservers/(?<ldapserver_id>[^/]+)/sambadomains$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/ldapservers/{ldapserver_id}/sambadomains'");
                }

                // replace URI parameters with values from identity
                var ldapserverId = _match.Groups["ldapserver_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/ldapservers/"
                        + ldapserverId
                        + "/sambadomains"
                        + "?"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // add headers parameters
                if (null != contentType)
                {
                    request.Headers.Add("Content-Type",contentType);
                }
                if (null != accept)
                {
                    request.Headers.Add("Accept",accept);
                }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.LdapServerSambaDomainList_Call(request,onOk,onDefault,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="LdapServerSambaDomainList" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onDefault">a delegate that is called when the remote service returns default (any response code not handled
        /// elsewhere).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task LdapServerSambaDomainList_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISambaDomainOutput[]>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IError>, global::System.Threading.Tasks.Task> onDefault, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.ISambaDomainOutput[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.ISambaDomainOutput) (JumpCloudApiSdkV2.Models.SambaDomainOutput.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onDefault(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.Error.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="LdapServerSambaDomainList" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="ldapserverId">Unique identifier of the LDAP server.</param>
        /// <param name="contentType"></param>
        /// <param name="accept"></param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task LdapServerSambaDomainList_Validate(string ldapserverId, string contentType, string accept, string[] filter, int? limit, int? skip, string[] sort, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(ldapserverId),ldapserverId);
                await eventListener.AssertNotNull(nameof(contentType),contentType);
                await eventListener.AssertNotNull(nameof(accept),accept);
            }
        }

        /// <summary>
        /// This endpoint allows you to update the samba domain information for an LDAP server.
        /// ##### Sample Request
        /// ```
        /// curl -X PUT https://console.jumpcloud.com/api/v2/ldapservers/{LDAP_ID}/sambadomains/{SAMBA_ID} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "sid":"{SID_ID}",
        /// "name":"{WORKGROUP_NAME}"
        /// }'
        /// ```
        /// </summary>
        /// <param name="ldapserverId">Unique identifier of the LDAP server.</param>
        /// <param name="id">Unique identifier of the samba domain.</param>
        /// <param name="contentType"></param>
        /// <param name="accept"></param>
        /// <param name="body">Samba Domain Input</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task LdapServerSambaDomainPut(string ldapserverId, string id, string contentType, string accept, JumpCloudApiSdkV2.Models.ISambaDomainInput body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISambaDomainOutput>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/ldapservers/"
                        + global::System.Uri.EscapeDataString(ldapserverId)
                        + "/sambadomains/"
                        + global::System.Uri.EscapeDataString(id)

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Put, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // add headers parameters
                if (null != contentType)
                {
                    request.Headers.Add("Content-Type",contentType);
                }
                if (null != accept)
                {
                    request.Headers.Add("Accept",accept);
                }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.LdapServerSambaDomainPut_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint allows you to update the samba domain information for an LDAP server.
        /// ##### Sample Request
        /// ```
        /// curl -X PUT https://console.jumpcloud.com/api/v2/ldapservers/{LDAP_ID}/sambadomains/{SAMBA_ID} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "sid":"{SID_ID}",
        /// "name":"{WORKGROUP_NAME}"
        /// }'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="contentType"></param>
        /// <param name="accept"></param>
        /// <param name="body">Samba Domain Input</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task LdapServerSambaDomainPutViaIdentity(global::System.String viaIdentity, string contentType, string accept, JumpCloudApiSdkV2.Models.ISambaDomainInput body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISambaDomainOutput>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/ldapservers/(?<ldapserver_id>[^/]+)/sambadomains/(?<id>[^/]+)$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/ldapservers/{ldapserver_id}/sambadomains/{id}'");
                }

                // replace URI parameters with values from identity
                var ldapserverId = _match.Groups["ldapserver_id"].Value;
                var id = _match.Groups["id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/ldapservers/"
                        + ldapserverId
                        + "/sambadomains/"
                        + id

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Put, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // add headers parameters
                if (null != contentType)
                {
                    request.Headers.Add("Content-Type",contentType);
                }
                if (null != accept)
                {
                    request.Headers.Add("Accept",accept);
                }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.LdapServerSambaDomainPut_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="LdapServerSambaDomainPut" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task LdapServerSambaDomainPut_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISambaDomainOutput>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.SambaDomainOutput.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="LdapServerSambaDomainPut" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="ldapserverId">Unique identifier of the LDAP server.</param>
        /// <param name="id">Unique identifier of the samba domain.</param>
        /// <param name="contentType"></param>
        /// <param name="accept"></param>
        /// <param name="body">Samba Domain Input</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task LdapServerSambaDomainPut_Validate(string ldapserverId, string id, string contentType, string accept, JumpCloudApiSdkV2.Models.ISambaDomainInput body, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(ldapserverId),ldapserverId);
                await eventListener.AssertNotNull(nameof(id),id);
                await eventListener.AssertNotNull(nameof(contentType),contentType);
                await eventListener.AssertNotNull(nameof(accept),accept);
                await eventListener.AssertNotNull(nameof(body), body);
                await eventListener.AssertObjectIsValid(nameof(body), body);
            }
        }

        /// <summary>
        /// This endpoint will return all Users Groups bound to a LDAP Server, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the group's type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this LDAP server instance to the corresponding User Group; this array represents
        /// all grouping and/or associations that would have to be removed to deprovision the User Group from this LDAP server instance.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/ldapservers/{LDAP_ID}/usergroups \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="ldapserverId">ObjectID of the LDAP Server.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task LdapServerTraverseUserGroupList(string ldapserverId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/ldapservers/"
                        + global::System.Uri.EscapeDataString(ldapserverId)
                        + "/usergroups"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.LdapServerTraverseUserGroupList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all Users Groups bound to a LDAP Server, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the group's type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this LDAP server instance to the corresponding User Group; this array represents
        /// all grouping and/or associations that would have to be removed to deprovision the User Group from this LDAP server instance.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/ldapservers/{LDAP_ID}/usergroups \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task LdapServerTraverseUserGroupListViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/ldapservers/(?<ldapserver_id>[^/]+)/usergroups$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/ldapservers/{ldapserver_id}/usergroups'");
                }

                // replace URI parameters with values from identity
                var ldapserverId = _match.Groups["ldapserver_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/ldapservers/"
                        + ldapserverId
                        + "/usergroups"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.LdapServerTraverseUserGroupList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="LdapServerTraverseUserGroupList" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task LdapServerTraverseUserGroupList_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphObjectWithPaths) (JumpCloudApiSdkV2.Models.GraphObjectWithPaths.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="LdapServerTraverseUserGroupList" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="ldapserverId">ObjectID of the LDAP Server.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task LdapServerTraverseUserGroupList_Validate(string ldapserverId, int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(ldapserverId),ldapserverId);
            }
        }

        /// <summary>
        /// This endpoint will return all Users bound to an LDAP Server, either directly or indirectly, essentially traversing the
        /// JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this LDAP server instance to the corresponding User; this array represents
        /// all grouping and/or associations that would have to be removed to deprovision the User from this LDAP server instance.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/ldapservers/{LDAP_ID}/users \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="ldapserverId">ObjectID of the LDAP Server.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task LdapServerTraverseUserList(string ldapserverId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/ldapservers/"
                        + global::System.Uri.EscapeDataString(ldapserverId)
                        + "/users"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.LdapServerTraverseUserList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all Users bound to an LDAP Server, either directly or indirectly, essentially traversing the
        /// JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this LDAP server instance to the corresponding User; this array represents
        /// all grouping and/or associations that would have to be removed to deprovision the User from this LDAP server instance.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/ldapservers/{LDAP_ID}/users \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task LdapServerTraverseUserListViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/ldapservers/(?<ldapserver_id>[^/]+)/users$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/ldapservers/{ldapserver_id}/users'");
                }

                // replace URI parameters with values from identity
                var ldapserverId = _match.Groups["ldapserver_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/ldapservers/"
                        + ldapserverId
                        + "/users"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.LdapServerTraverseUserList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="LdapServerTraverseUserList" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task LdapServerTraverseUserList_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphObjectWithPaths) (JumpCloudApiSdkV2.Models.GraphObjectWithPaths.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="LdapServerTraverseUserList" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="ldapserverId">ObjectID of the LDAP Server.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task LdapServerTraverseUserList_Validate(string ldapserverId, int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(ldapserverId),ldapserverId);
            }
        }

        /// <summary>
        /// This endpoint returns _direct_ associations of an Office 365 instance.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example Office 365 and Users.
        /// #### Sample Request
        /// ```
        /// curl -X GET 'https://console.jumpcloud.com/api/v2/office365s/{O365_ID}/associations?targets=user_group \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="office365Id">ObjectID of the Office 365 instance.</param>
        /// <param name="targets"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Office365AssociationList(string office365Id, string[] targets, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/office365s/"
                        + global::System.Uri.EscapeDataString(office365Id)
                        + "/associations"
                        + "?"
                        + (null != targets  && targets.Length > 0 ? "targets=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(targets, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.Office365AssociationList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns _direct_ associations of an Office 365 instance.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example Office 365 and Users.
        /// #### Sample Request
        /// ```
        /// curl -X GET 'https://console.jumpcloud.com/api/v2/office365s/{O365_ID}/associations?targets=user_group \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="targets"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Office365AssociationListViaIdentity(global::System.String viaIdentity, string[] targets, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/office365s/(?<office365_id>[^/]+)/associations$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/office365s/{office365_id}/associations'");
                }

                // replace URI parameters with values from identity
                var office365Id = _match.Groups["office365_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/office365s/"
                        + office365Id
                        + "/associations"
                        + "?"
                        + (null != targets  && targets.Length > 0 ? "targets=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(targets, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.Office365AssociationList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="Office365AssociationList" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task Office365AssociationList_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphConnection[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphConnection) (JumpCloudApiSdkV2.Models.GraphConnection.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="Office365AssociationList" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="office365Id">ObjectID of the Office 365 instance.</param>
        /// <param name="targets"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task Office365AssociationList_Validate(string office365Id, string[] targets, int? limit, int? skip, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(office365Id),office365Id);
                await eventListener.AssertNotNull(nameof(targets), targets);
                if (targets != null ) {
                        for (int __i = 0; __i < targets.Length; __i++) {
                          await eventListener.AssertEnum($"targets[{__i}]",targets[__i],@"active_directory", @"application", @"command", @"g_suite", @"ldap_server", @"office_365", @"policy", @"radius_server", @"system", @"system_group", @"user", @"user_group");
                        }
                      }
            }
        }

        /// <summary>
        /// This endpoint allows you to manage the _direct_ associations of a Office 365 instance.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example Office 365 and Users.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/office365s/{O365_ID}/associations \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "op": "add",
        /// "type": "user_group",
        /// "id": "{Group_ID}"
        /// }'
        /// ```
        /// </summary>
        /// <param name="office365Id">ObjectID of the Office 365 instance.</param>
        /// <param name="body">GraphManagementReq</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Office365AssociationSet(string office365Id, JumpCloudApiSdkV2.Models.IGraphManagementReq body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/office365s/"
                        + global::System.Uri.EscapeDataString(office365Id)
                        + "/associations"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.Office365AssociationSet_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint allows you to manage the _direct_ associations of a Office 365 instance.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example Office 365 and Users.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/office365s/{O365_ID}/associations \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "op": "add",
        /// "type": "user_group",
        /// "id": "{Group_ID}"
        /// }'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="body">GraphManagementReq</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Office365AssociationSetViaIdentity(global::System.String viaIdentity, JumpCloudApiSdkV2.Models.IGraphManagementReq body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/office365s/(?<office365_id>[^/]+)/associations$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/office365s/{office365_id}/associations'");
                }

                // replace URI parameters with values from identity
                var office365Id = _match.Groups["office365_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/office365s/"
                        + office365Id
                        + "/associations"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.Office365AssociationSet_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="Office365AssociationSet" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task Office365AssociationSet_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.NoContent:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onNoContent(_response);
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="Office365AssociationSet" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="office365Id">ObjectID of the Office 365 instance.</param>
        /// <param name="body">GraphManagementReq</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task Office365AssociationSet_Validate(string office365Id, JumpCloudApiSdkV2.Models.IGraphManagementReq body, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(office365Id),office365Id);
                await eventListener.AssertNotNull(nameof(body), body);
                await eventListener.AssertObjectIsValid(nameof(body), body);
            }
        }

        /// <summary>
        /// This endpoint allows you to create a translation rule for a specific Office 365 instance. These rules specify how JumpCloud
        /// attributes translate to [Microsoft Graph](https://developer.microsoft.com/en-us/graph) attributes.
        /// ##### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/office365s/{office365_id}/translationrules \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// {Translation Rule Parameters}
        /// }'
        /// ```
        /// </summary>
        /// <param name="office365Id"></param>
        /// <param name="body">Office 365 Translation Rule Request</param>
        /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Office365TranslationRuleCreate(string office365Id, JumpCloudApiSdkV2.Models.IOffice365TranslationRuleRequest body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IOffice365TranslationRule>, global::System.Threading.Tasks.Task> onCreated, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/office365s/"
                        + global::System.Uri.EscapeDataString(office365Id)
                        + "/translationrules"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.Office365TranslationRuleCreate_Call(request,onCreated,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint allows you to create a translation rule for a specific Office 365 instance. These rules specify how JumpCloud
        /// attributes translate to [Microsoft Graph](https://developer.microsoft.com/en-us/graph) attributes.
        /// ##### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/office365s/{office365_id}/translationrules \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// {Translation Rule Parameters}
        /// }'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="body">Office 365 Translation Rule Request</param>
        /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Office365TranslationRuleCreateViaIdentity(global::System.String viaIdentity, JumpCloudApiSdkV2.Models.IOffice365TranslationRuleRequest body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IOffice365TranslationRule>, global::System.Threading.Tasks.Task> onCreated, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/office365s/(?<office365_id>[^/]+)/translationrules$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/office365s/{office365_id}/translationrules'");
                }

                // replace URI parameters with values from identity
                var office365Id = _match.Groups["office365_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/office365s/"
                        + office365Id
                        + "/translationrules"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.Office365TranslationRuleCreate_Call(request,onCreated,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="Office365TranslationRuleCreate" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task Office365TranslationRuleCreate_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IOffice365TranslationRule>, global::System.Threading.Tasks.Task> onCreated, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.Created:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onCreated(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.Office365TranslationRule.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="Office365TranslationRuleCreate" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="office365Id"></param>
        /// <param name="body">Office 365 Translation Rule Request</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task Office365TranslationRuleCreate_Validate(string office365Id, JumpCloudApiSdkV2.Models.IOffice365TranslationRuleRequest body, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(office365Id),office365Id);
                await eventListener.AssertNotNull(nameof(body), body);
                await eventListener.AssertObjectIsValid(nameof(body), body);
            }
        }

        /// <summary>
        /// This endpoint allows you to delete a translation rule for a specific Office 365 instance. These rules specify how JumpCloud
        /// attributes translate to [Microsoft Graph](https://developer.microsoft.com/en-us/graph) attributes.
        /// #### Sample Request
        /// ```
        /// curl -X DELETE https://console.jumpcloud.com/api/v2/office365s/{office365_id}/translationrules/{id} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="office365Id"></param>
        /// <param name="id"></param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Office365TranslationRuleDelete(string office365Id, string id, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/office365s/"
                        + global::System.Uri.EscapeDataString(office365Id)
                        + "/translationrules/"
                        + global::System.Uri.EscapeDataString(id)

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Delete, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.Office365TranslationRuleDelete_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint allows you to delete a translation rule for a specific Office 365 instance. These rules specify how JumpCloud
        /// attributes translate to [Microsoft Graph](https://developer.microsoft.com/en-us/graph) attributes.
        /// #### Sample Request
        /// ```
        /// curl -X DELETE https://console.jumpcloud.com/api/v2/office365s/{office365_id}/translationrules/{id} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Office365TranslationRuleDeleteViaIdentity(global::System.String viaIdentity, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/office365s/(?<office365_id>[^/]+)/translationrules/(?<id>[^/]+)$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/office365s/{office365_id}/translationrules/{id}'");
                }

                // replace URI parameters with values from identity
                var office365Id = _match.Groups["office365_id"].Value;
                var id = _match.Groups["id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/office365s/"
                        + office365Id
                        + "/translationrules/"
                        + id

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Delete, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.Office365TranslationRuleDelete_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="Office365TranslationRuleDelete" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task Office365TranslationRuleDelete_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.NoContent:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onNoContent(_response);
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="Office365TranslationRuleDelete" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="office365Id"></param>
        /// <param name="id"></param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task Office365TranslationRuleDelete_Validate(string office365Id, string id, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(office365Id),office365Id);
                await eventListener.AssertNotNull(nameof(id),id);
            }
        }

        /// <summary>
        /// This endpoint returns a specific translation rule for a specific Office 365 instance. These rules specify how JumpCloud
        /// attributes translate to [Microsoft Graph](https://developer.microsoft.com/en-us/graph) attributes.
        /// ###### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/office365s/{office365_id}/translationrules/{id} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="office365Id"></param>
        /// <param name="id"></param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Office365TranslationRuleGet(string office365Id, string id, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IOffice365TranslationRule>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/office365s/"
                        + global::System.Uri.EscapeDataString(office365Id)
                        + "/translationrules/"
                        + global::System.Uri.EscapeDataString(id)

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.Office365TranslationRuleGet_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns a specific translation rule for a specific Office 365 instance. These rules specify how JumpCloud
        /// attributes translate to [Microsoft Graph](https://developer.microsoft.com/en-us/graph) attributes.
        /// ###### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/office365s/{office365_id}/translationrules/{id} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Office365TranslationRuleGetViaIdentity(global::System.String viaIdentity, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IOffice365TranslationRule>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/office365s/(?<office365_id>[^/]+)/translationrules/(?<id>[^/]+)$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/office365s/{office365_id}/translationrules/{id}'");
                }

                // replace URI parameters with values from identity
                var office365Id = _match.Groups["office365_id"].Value;
                var id = _match.Groups["id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/office365s/"
                        + office365Id
                        + "/translationrules/"
                        + id

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.Office365TranslationRuleGet_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="Office365TranslationRuleGet" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task Office365TranslationRuleGet_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IOffice365TranslationRule>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.Office365TranslationRule.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="Office365TranslationRuleGet" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="office365Id"></param>
        /// <param name="id"></param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task Office365TranslationRuleGet_Validate(string office365Id, string id, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(office365Id),office365Id);
                await eventListener.AssertNotNull(nameof(id),id);
            }
        }

        /// <summary>
        /// This endpoint returns all translation rules for a specific Office 365 instance. These rules specify how JumpCloud attributes
        /// translate to [Microsoft Graph](https://developer.microsoft.com/en-us/graph) attributes.
        /// ##### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/office365s/{office365_id}/translationrules \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="office365Id"></param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Office365TranslationRuleList(string office365Id, string[] filter, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IOffice365TranslationRule[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/office365s/"
                        + global::System.Uri.EscapeDataString(office365Id)
                        + "/translationrules"
                        + "?"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.Office365TranslationRuleList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns all translation rules for a specific Office 365 instance. These rules specify how JumpCloud attributes
        /// translate to [Microsoft Graph](https://developer.microsoft.com/en-us/graph) attributes.
        /// ##### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/office365s/{office365_id}/translationrules \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Office365TranslationRuleListViaIdentity(global::System.String viaIdentity, string[] filter, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IOffice365TranslationRule[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/office365s/(?<office365_id>[^/]+)/translationrules$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/office365s/{office365_id}/translationrules'");
                }

                // replace URI parameters with values from identity
                var office365Id = _match.Groups["office365_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/office365s/"
                        + office365Id
                        + "/translationrules"
                        + "?"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.Office365TranslationRuleList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="Office365TranslationRuleList" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task Office365TranslationRuleList_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IOffice365TranslationRule[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IOffice365TranslationRule[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IOffice365TranslationRule) (JumpCloudApiSdkV2.Models.Office365TranslationRule.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="Office365TranslationRuleList" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="office365Id"></param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task Office365TranslationRuleList_Validate(string office365Id, string[] filter, int? limit, int? skip, string[] sort, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(office365Id),office365Id);
            }
        }

        /// <summary>
        /// This endpoint will return all Users Groups bound to an Office 365 instance, either directly or indirectly, essentially
        /// traversing the JumpCloud Graph for your Organization.
        /// Each element will contain the group's type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this Office 365 instance to the corresponding User Group; this array represents
        /// all grouping and/or associations that would have to be removed to deprovision the User Group from this Office 365 instance.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/office365s/{O365_ID/usergroups \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="office365Id">ObjectID of the Office 365 suite.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Office365TraverseUserGroupList(string office365Id, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/office365s/"
                        + global::System.Uri.EscapeDataString(office365Id)
                        + "/usergroups"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.Office365TraverseUserGroupList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all Users Groups bound to an Office 365 instance, either directly or indirectly, essentially
        /// traversing the JumpCloud Graph for your Organization.
        /// Each element will contain the group's type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this Office 365 instance to the corresponding User Group; this array represents
        /// all grouping and/or associations that would have to be removed to deprovision the User Group from this Office 365 instance.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/office365s/{O365_ID/usergroups \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Office365TraverseUserGroupListViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/office365s/(?<office365_id>[^/]+)/usergroups$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/office365s/{office365_id}/usergroups'");
                }

                // replace URI parameters with values from identity
                var office365Id = _match.Groups["office365_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/office365s/"
                        + office365Id
                        + "/usergroups"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.Office365TraverseUserGroupList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="Office365TraverseUserGroupList" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task Office365TraverseUserGroupList_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphObjectWithPaths) (JumpCloudApiSdkV2.Models.GraphObjectWithPaths.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="Office365TraverseUserGroupList" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="office365Id">ObjectID of the Office 365 suite.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task Office365TraverseUserGroupList_Validate(string office365Id, int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(office365Id),office365Id);
            }
        }

        /// <summary>
        /// This endpoint will return all Users bound to an Office 365 instance, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this Office 365 instance to the corresponding User; this array represents
        /// all grouping and/or associations that would have to be removed to deprovision the User from this Office 365 instance.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/office365s/{O365_ID}/users \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="office365Id">ObjectID of the Office 365 suite.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Office365TraverseUserList(string office365Id, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/office365s/"
                        + global::System.Uri.EscapeDataString(office365Id)
                        + "/users"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.Office365TraverseUserList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all Users bound to an Office 365 instance, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this Office 365 instance to the corresponding User; this array represents
        /// all grouping and/or associations that would have to be removed to deprovision the User from this Office 365 instance.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/office365s/{O365_ID}/users \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Office365TraverseUserListViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/office365s/(?<office365_id>[^/]+)/users$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/office365s/{office365_id}/users'");
                }

                // replace URI parameters with values from identity
                var office365Id = _match.Groups["office365_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/office365s/"
                        + office365Id
                        + "/users"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.Office365TraverseUserList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="Office365TraverseUserList" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task Office365TraverseUserList_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphObjectWithPaths) (JumpCloudApiSdkV2.Models.GraphObjectWithPaths.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="Office365TraverseUserList" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="office365Id">ObjectID of the Office 365 suite.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task Office365TraverseUserList_Validate(string office365Id, int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(office365Id),office365Id);
            }
        }

        /// <summary>
        /// This endpoint returns all policies results for an organization.
        /// ##### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/policyresults \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task OrgPolicyResultList(string[] filter, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IPolicyResult[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/policyresults"
                        + "?"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.OrgPolicyResultList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns all policies results for an organization.
        /// ##### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/policyresults \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task OrgPolicyResultListViaIdentity(global::System.String viaIdentity, string[] filter, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IPolicyResult[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/policyresults$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/policyresults'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/policyresults"
                        + "?"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.OrgPolicyResultList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="OrgPolicyResultList" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task OrgPolicyResultList_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IPolicyResult[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IPolicyResult[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IPolicyResult) (JumpCloudApiSdkV2.Models.PolicyResult.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="OrgPolicyResultList" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task OrgPolicyResultList_Validate(string[] filter, int? limit, int? skip, string[] sort, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {

            }
        }

        /// <summary>
        /// This endpoint returns the _direct_ associations of a Policy.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example Policies and Systems.
        /// #### Sample Request
        /// ```
        /// curl -X GET 'https://console.jumpcloud.com/api/v2/policies/{Policy_ID}/associations?targets=system_group \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="policyId"></param>
        /// <param name="targets"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task PolicyAssociationList(string policyId, string[] targets, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/policies/"
                        + global::System.Uri.EscapeDataString(policyId)
                        + "/associations"
                        + "?"
                        + (null != targets  && targets.Length > 0 ? "targets=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(targets, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.PolicyAssociationList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns the _direct_ associations of a Policy.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example Policies and Systems.
        /// #### Sample Request
        /// ```
        /// curl -X GET 'https://console.jumpcloud.com/api/v2/policies/{Policy_ID}/associations?targets=system_group \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="targets"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task PolicyAssociationListViaIdentity(global::System.String viaIdentity, string[] targets, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/policies/(?<policy_id>[^/]+)/associations$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/policies/{policy_id}/associations'");
                }

                // replace URI parameters with values from identity
                var policyId = _match.Groups["policy_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/policies/"
                        + policyId
                        + "/associations"
                        + "?"
                        + (null != targets  && targets.Length > 0 ? "targets=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(targets, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.PolicyAssociationList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="PolicyAssociationList" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task PolicyAssociationList_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphConnection[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphConnection) (JumpCloudApiSdkV2.Models.GraphConnection.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="PolicyAssociationList" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="policyId"></param>
        /// <param name="targets"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task PolicyAssociationList_Validate(string policyId, string[] targets, int? limit, int? skip, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(policyId),policyId);
                await eventListener.AssertNotNull(nameof(targets), targets);
                if (targets != null ) {
                        for (int __i = 0; __i < targets.Length; __i++) {
                          await eventListener.AssertEnum($"targets[{__i}]",targets[__i],@"active_directory", @"application", @"command", @"g_suite", @"ldap_server", @"office_365", @"policy", @"radius_server", @"system", @"system_group", @"user", @"user_group");
                        }
                      }
            }
        }

        /// <summary>
        /// This endpoint allows you to manage the _direct_ associations of a Policy.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example Policies and Systems.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/policies/{Policy_ID}/associations/ \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "op": "add",
        /// "type": "system_group",
        /// "id": "{Group_ID}"
        /// }'
        /// ```
        /// </summary>
        /// <param name="policyId"></param>
        /// <param name="body">GraphManagementReq</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task PolicyAssociationSet(string policyId, JumpCloudApiSdkV2.Models.IGraphManagementReq body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/policies/"
                        + global::System.Uri.EscapeDataString(policyId)
                        + "/associations"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.PolicyAssociationSet_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint allows you to manage the _direct_ associations of a Policy.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example Policies and Systems.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/policies/{Policy_ID}/associations/ \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "op": "add",
        /// "type": "system_group",
        /// "id": "{Group_ID}"
        /// }'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="body">GraphManagementReq</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task PolicyAssociationSetViaIdentity(global::System.String viaIdentity, JumpCloudApiSdkV2.Models.IGraphManagementReq body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/policies/(?<policy_id>[^/]+)/associations$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/policies/{policy_id}/associations'");
                }

                // replace URI parameters with values from identity
                var policyId = _match.Groups["policy_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/policies/"
                        + policyId
                        + "/associations"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.PolicyAssociationSet_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="PolicyAssociationSet" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task PolicyAssociationSet_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.NoContent:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onNoContent(_response);
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="PolicyAssociationSet" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="policyId"></param>
        /// <param name="body">GraphManagementReq</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task PolicyAssociationSet_Validate(string policyId, JumpCloudApiSdkV2.Models.IGraphManagementReq body, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(policyId),policyId);
                await eventListener.AssertNotNull(nameof(body), body);
                await eventListener.AssertObjectIsValid(nameof(body), body);
            }
        }

        /// <summary>
        /// This endpoint allows you to create a policy. Given the amount of configurable parameters required to create a Policy,
        /// we suggest you use the JumpCloud Admin Console to create new policies.
        /// ##### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/policies \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// {Policy_Parameters}
        /// }'
        /// ```
        /// </summary>
        /// <param name="body">An instance of a policy template.</param>
        /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task PolicyCreate(JumpCloudApiSdkV2.Models.IPolicyRequest body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IPolicyWithDetails>, global::System.Threading.Tasks.Task> onCreated, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/policies"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.PolicyCreate_Call(request,onCreated,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="PolicyCreate" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task PolicyCreate_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IPolicyWithDetails>, global::System.Threading.Tasks.Task> onCreated, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.Created:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onCreated(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.PolicyWithDetails.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="PolicyCreate" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="body">An instance of a policy template.</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task PolicyCreate_Validate(JumpCloudApiSdkV2.Models.IPolicyRequest body, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(body), body);
                await eventListener.AssertObjectIsValid(nameof(body), body);
            }
        }

        /// <summary>
        /// This endpoint allows you to delete a policy.
        /// #### Sample Request
        /// ```
        /// curl -X DELETE https://console.jumpcloud.com/api/v2/policies/5a837ecd232e110d4291e6b9 \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="id">ObjectID of the Policy object.</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task PolicyDelete(string id, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/policies/"
                        + global::System.Uri.EscapeDataString(id)

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Delete, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.PolicyDelete_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint allows you to delete a policy.
        /// #### Sample Request
        /// ```
        /// curl -X DELETE https://console.jumpcloud.com/api/v2/policies/5a837ecd232e110d4291e6b9 \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task PolicyDeleteViaIdentity(global::System.String viaIdentity, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/policies/(?<id>[^/]+)$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/policies/{id}'");
                }

                // replace URI parameters with values from identity
                var id = _match.Groups["id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/policies/"
                        + id

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Delete, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.PolicyDelete_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="PolicyDelete" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task PolicyDelete_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.NoContent:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onNoContent(_response);
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="PolicyDelete" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="id">ObjectID of the Policy object.</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task PolicyDelete_Validate(string id, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(id),id);
            }
        }

        /// <summary>
        /// This endpoint returns a specific policy.
        /// ###### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/policies/{PolicyID} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="id">ObjectID of the Policy object.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task PolicyGet(string id, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IPolicyWithDetails>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/policies/"
                        + global::System.Uri.EscapeDataString(id)

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.PolicyGet_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns a specific policy.
        /// ###### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/policies/{PolicyID} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task PolicyGetViaIdentity(global::System.String viaIdentity, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IPolicyWithDetails>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/policies/(?<id>[^/]+)$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/policies/{id}'");
                }

                // replace URI parameters with values from identity
                var id = _match.Groups["id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/policies/"
                        + id

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.PolicyGet_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="PolicyGet" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task PolicyGet_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IPolicyWithDetails>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.PolicyWithDetails.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="PolicyGet" /> method. Call this like the actual call, but you will get validation events
        /// back.
        /// </summary>
        /// <param name="id">ObjectID of the Policy object.</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task PolicyGet_Validate(string id, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(id),id);
            }
        }

        /// <summary>
        /// This endpoint returns all policies.
        /// ##### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/policies \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onInternalServerError">a delegate that is called when the remote service returns 500 (InternalServerError).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task PolicyList(string[] filter, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IPolicy[]>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IError>, global::System.Threading.Tasks.Task> onInternalServerError, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/policies"
                        + "?"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.PolicyList_Call(request,onOk,onInternalServerError,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns all policies.
        /// ##### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/policies \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onInternalServerError">a delegate that is called when the remote service returns 500 (InternalServerError).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task PolicyListViaIdentity(global::System.String viaIdentity, string[] filter, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IPolicy[]>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IError>, global::System.Threading.Tasks.Task> onInternalServerError, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/policies$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/policies'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/policies"
                        + "?"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.PolicyList_Call(request,onOk,onInternalServerError,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="PolicyList" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onInternalServerError">a delegate that is called when the remote service returns 500 (InternalServerError).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task PolicyList_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IPolicy[]>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IError>, global::System.Threading.Tasks.Task> onInternalServerError, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IPolicy[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IPolicy) (JumpCloudApiSdkV2.Models.Policy.FromJson(__x) )) ))() : null));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.InternalServerError:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onInternalServerError(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.Error.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="PolicyList" /> method. Call this like the actual call, but you will get validation events
        /// back.
        /// </summary>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task PolicyList_Validate(string[] filter, int? limit, int? skip, string[] sort, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {

            }
        }

        /// <summary>
        /// This endpoint allows you to update a policy. Given the amount of configurable parameters required to update a Policy,
        /// we suggest you use the JumpCloud Admin Console to create new policies.
        /// ##### Sample Request
        /// ```
        /// curl -X PUT https://console.jumpcloud.com/api/v2/policies/59fced45c9118022172547ff \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY' \
        /// -d '{
        /// {Policy_Parameters}
        /// }'
        /// ```
        /// </summary>
        /// <param name="id">ObjectID of the Policy object.</param>
        /// <param name="body">An instance of a policy template.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task PolicyPut(string id, JumpCloudApiSdkV2.Models.IPolicyRequest body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IPolicy>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/policies/"
                        + global::System.Uri.EscapeDataString(id)

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Put, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.PolicyPut_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint allows you to update a policy. Given the amount of configurable parameters required to update a Policy,
        /// we suggest you use the JumpCloud Admin Console to create new policies.
        /// ##### Sample Request
        /// ```
        /// curl -X PUT https://console.jumpcloud.com/api/v2/policies/59fced45c9118022172547ff \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY' \
        /// -d '{
        /// {Policy_Parameters}
        /// }'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="body">An instance of a policy template.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task PolicyPutViaIdentity(global::System.String viaIdentity, JumpCloudApiSdkV2.Models.IPolicyRequest body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IPolicy>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/policies/(?<id>[^/]+)$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/policies/{id}'");
                }

                // replace URI parameters with values from identity
                var id = _match.Groups["id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/policies/"
                        + id

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Put, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.PolicyPut_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="PolicyPut" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task PolicyPut_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IPolicy>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.Policy.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="PolicyPut" /> method. Call this like the actual call, but you will get validation events
        /// back.
        /// </summary>
        /// <param name="id">ObjectID of the Policy object.</param>
        /// <param name="body">An instance of a policy template.</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task PolicyPut_Validate(string id, JumpCloudApiSdkV2.Models.IPolicyRequest body, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(id),id);
                await eventListener.AssertNotNull(nameof(body), body);
                await eventListener.AssertObjectIsValid(nameof(body), body);
            }
        }

        /// <summary>
        /// This endpoint will return the policy results for a specific policy.
        /// ##### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/policyresults/{Policy_ID} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="id">ObjectID of the Policy Result.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task PolicyResultGet(string id, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IPolicyResult>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/policyresults/"
                        + global::System.Uri.EscapeDataString(id)

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.PolicyResultGet_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return the policy results for a specific policy.
        /// ##### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/policyresults/{Policy_ID} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task PolicyResultGetViaIdentity(global::System.String viaIdentity, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IPolicyResult>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/policyresults/(?<id>[^/]+)$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/policyresults/{id}'");
                }

                // replace URI parameters with values from identity
                var id = _match.Groups["id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/policyresults/"
                        + id

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.PolicyResultGet_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="PolicyResultGet" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task PolicyResultGet_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IPolicyResult>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.PolicyResult.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="PolicyResultGet" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="id">ObjectID of the Policy Result.</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task PolicyResultGet_Validate(string id, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(id),id);
            }
        }

        /// <summary>
        /// This endpoint returns all policies results for a specific policy.
        /// ##### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/policies/{Policy_ID}/policyresults \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="policyId"></param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task PolicyResultList(string policyId, string[] filter, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IPolicyResult[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/policies/"
                        + global::System.Uri.EscapeDataString(policyId)
                        + "/policyresults"
                        + "?"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.PolicyResultList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns all policies results for a specific policy.
        /// ##### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/policies/{Policy_ID}/policyresults \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task PolicyResultListViaIdentity(global::System.String viaIdentity, string[] filter, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IPolicyResult[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/policies/(?<policy_id>[^/]+)/policyresults$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/policies/{policy_id}/policyresults'");
                }

                // replace URI parameters with values from identity
                var policyId = _match.Groups["policy_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/policies/"
                        + policyId
                        + "/policyresults"
                        + "?"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.PolicyResultList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="PolicyResultList" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task PolicyResultList_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IPolicyResult[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IPolicyResult[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IPolicyResult) (JumpCloudApiSdkV2.Models.PolicyResult.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="PolicyResultList" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="policyId"></param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task PolicyResultList_Validate(string policyId, string[] filter, int? limit, int? skip, string[] sort, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(policyId),policyId);
            }
        }

        /// <summary>
        /// This endpoint returns the policy results for a particular system.
        /// ##### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/systems/{System_ID}/policystatuses \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="systemId">ObjectID of the System.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task PolicyStatusList(string systemId, string[] filter, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IPolicyResult[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systems/"
                        + global::System.Uri.EscapeDataString(systemId)
                        + "/policystatuses"
                        + "?"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.PolicyStatusList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns the latest policies results for a specific policy.
        /// ##### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/policies/{Policy_ID}/policystatuses \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="policyId"></param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task PolicyStatusList1(string policyId, string[] filter, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IPolicyResult[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/policies/"
                        + global::System.Uri.EscapeDataString(policyId)
                        + "/policystatuses"
                        + "?"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.PolicyStatusList1_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns the latest policies results for a specific policy.
        /// ##### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/policies/{Policy_ID}/policystatuses \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task PolicyStatusList1ViaIdentity(global::System.String viaIdentity, string[] filter, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IPolicyResult[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/policies/(?<policy_id>[^/]+)/policystatuses$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/policies/{policy_id}/policystatuses'");
                }

                // replace URI parameters with values from identity
                var policyId = _match.Groups["policy_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/policies/"
                        + policyId
                        + "/policystatuses"
                        + "?"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.PolicyStatusList1_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="PolicyStatusList1" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task PolicyStatusList1_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IPolicyResult[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IPolicyResult[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IPolicyResult) (JumpCloudApiSdkV2.Models.PolicyResult.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="PolicyStatusList1" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="policyId"></param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task PolicyStatusList1_Validate(string policyId, string[] filter, int? limit, int? skip, string[] sort, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(policyId),policyId);
            }
        }

        /// <summary>
        /// This endpoint returns the policy results for a particular system.
        /// ##### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/systems/{System_ID}/policystatuses \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task PolicyStatusListViaIdentity(global::System.String viaIdentity, string[] filter, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IPolicyResult[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systems/(?<system_id>[^/]+)/policystatuses$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systems/{system_id}/policystatuses'");
                }

                // replace URI parameters with values from identity
                var systemId = _match.Groups["system_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systems/"
                        + systemId
                        + "/policystatuses"
                        + "?"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.PolicyStatusList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="PolicyStatusList" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task PolicyStatusList_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IPolicyResult[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IPolicyResult[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IPolicyResult) (JumpCloudApiSdkV2.Models.PolicyResult.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="PolicyStatusList" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="systemId">ObjectID of the System.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task PolicyStatusList_Validate(string systemId, string[] filter, int? limit, int? skip, string[] sort, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(systemId),systemId);
            }
        }

        /// <summary>
        /// This endpoint returns a specific policy template.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/policies/{Policy_ID}\
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="id">ObjectID of the Policy Template.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task PolicyTemplateGet(string id, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IPolicyTemplateWithDetails>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/policytemplates/"
                        + global::System.Uri.EscapeDataString(id)

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.PolicyTemplateGet_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns a specific policy template.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/policies/{Policy_ID}\
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task PolicyTemplateGetViaIdentity(global::System.String viaIdentity, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IPolicyTemplateWithDetails>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/policytemplates/(?<id>[^/]+)$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/policytemplates/{id}'");
                }

                // replace URI parameters with values from identity
                var id = _match.Groups["id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/policytemplates/"
                        + id

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.PolicyTemplateGet_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="PolicyTemplateGet" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task PolicyTemplateGet_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IPolicyTemplateWithDetails>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.PolicyTemplateWithDetails.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="PolicyTemplateGet" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="id">ObjectID of the Policy Template.</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task PolicyTemplateGet_Validate(string id, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(id),id);
            }
        }

        /// <summary>
        /// This endpoint returns all policy templates.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/policytemplates \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onInternalServerError">a delegate that is called when the remote service returns 500 (InternalServerError).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task PolicyTemplateList(string[] filter, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IPolicyTemplate[]>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IError>, global::System.Threading.Tasks.Task> onInternalServerError, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/policytemplates"
                        + "?"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.PolicyTemplateList_Call(request,onOk,onInternalServerError,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns all policy templates.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/policytemplates \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onInternalServerError">a delegate that is called when the remote service returns 500 (InternalServerError).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task PolicyTemplateListViaIdentity(global::System.String viaIdentity, string[] filter, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IPolicyTemplate[]>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IError>, global::System.Threading.Tasks.Task> onInternalServerError, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/policytemplates$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/policytemplates'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/policytemplates"
                        + "?"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.PolicyTemplateList_Call(request,onOk,onInternalServerError,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="PolicyTemplateList" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onInternalServerError">a delegate that is called when the remote service returns 500 (InternalServerError).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task PolicyTemplateList_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IPolicyTemplate[]>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IError>, global::System.Threading.Tasks.Task> onInternalServerError, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IPolicyTemplate[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IPolicyTemplate) (JumpCloudApiSdkV2.Models.PolicyTemplate.FromJson(__x) )) ))() : null));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.InternalServerError:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onInternalServerError(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.Error.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="PolicyTemplateList" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task PolicyTemplateList_Validate(string[] filter, int? limit, int? skip, string[] sort, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {

            }
        }

        /// <summary>
        /// This endpoint will return all Systems Groups bound to a Policy, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the group's type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this Policy to the corresponding System Group; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the System Group from this Policy.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/policies/{Policy_ID}/systemgroups \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="policyId">ObjectID of the Command.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task PolicyTraverseSystemGroupList(string policyId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/policies/"
                        + global::System.Uri.EscapeDataString(policyId)
                        + "/systemgroups"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.PolicyTraverseSystemGroupList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all Systems Groups bound to a Policy, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the group's type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this Policy to the corresponding System Group; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the System Group from this Policy.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/policies/{Policy_ID}/systemgroups \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task PolicyTraverseSystemGroupListViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/policies/(?<policy_id>[^/]+)/systemgroups$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/policies/{policy_id}/systemgroups'");
                }

                // replace URI parameters with values from identity
                var policyId = _match.Groups["policy_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/policies/"
                        + policyId
                        + "/systemgroups"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.PolicyTraverseSystemGroupList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="PolicyTraverseSystemGroupList" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task PolicyTraverseSystemGroupList_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphObjectWithPaths) (JumpCloudApiSdkV2.Models.GraphObjectWithPaths.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="PolicyTraverseSystemGroupList" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="policyId">ObjectID of the Command.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task PolicyTraverseSystemGroupList_Validate(string policyId, int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(policyId),policyId);
            }
        }

        /// <summary>
        /// This endpoint will return all Systems bound to a Policy, either directly or indirectly, essentially traversing the JumpCloud
        /// Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this Policy to the corresponding System; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the System from this Policy.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/policies/{Policy_ID}/systems \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="policyId">ObjectID of the Command.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task PolicyTraverseSystemList(string policyId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/policies/"
                        + global::System.Uri.EscapeDataString(policyId)
                        + "/systems"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.PolicyTraverseSystemList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all Systems bound to a Policy, either directly or indirectly, essentially traversing the JumpCloud
        /// Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this Policy to the corresponding System; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the System from this Policy.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/policies/{Policy_ID}/systems \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task PolicyTraverseSystemListViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/policies/(?<policy_id>[^/]+)/systems$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/policies/{policy_id}/systems'");
                }

                // replace URI parameters with values from identity
                var policyId = _match.Groups["policy_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/policies/"
                        + policyId
                        + "/systems"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.PolicyTraverseSystemList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="PolicyTraverseSystemList" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task PolicyTraverseSystemList_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphObjectWithPaths) (JumpCloudApiSdkV2.Models.GraphObjectWithPaths.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="PolicyTraverseSystemList" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="policyId">ObjectID of the Command.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task PolicyTraverseSystemList_Validate(string policyId, int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(policyId),policyId);
            }
        }

        /// <summary>
        /// This endpoint allows you to create a provider administrator. You must be associated to the provider to use this route.
        /// **Sample Request**
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/providers/{ProviderID}/administrators \
        /// -H 'Accept: application/json' \
        /// -H 'Context-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "email":"{ADMIN_EMAIL}"
        /// }'
        /// ```
        /// </summary>
        /// <param name="providerId"></param>
        /// <param name="body">ProviderAdminReq</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onUnauthorized">a delegate that is called when the remote service returns 401 (Unauthorized).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ProviderAdminCreate(string providerId, JumpCloudApiSdkV2.Models.IProviderAdminReq body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IAdministrator>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IPathsProvidersProviderIdAdministratorsPostResponses401ContentApplicationJsonSchema>, global::System.Threading.Tasks.Task> onUnauthorized, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/providers/"
                        + global::System.Uri.EscapeDataString(providerId)
                        + "/administrators"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ProviderAdminCreate_Call(request,onOk,onUnauthorized,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint allows you to create a provider administrator. You must be associated to the provider to use this route.
        /// **Sample Request**
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/providers/{ProviderID}/administrators \
        /// -H 'Accept: application/json' \
        /// -H 'Context-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "email":"{ADMIN_EMAIL}"
        /// }'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="body">ProviderAdminReq</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onUnauthorized">a delegate that is called when the remote service returns 401 (Unauthorized).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ProviderAdminCreateViaIdentity(global::System.String viaIdentity, JumpCloudApiSdkV2.Models.IProviderAdminReq body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IAdministrator>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IPathsProvidersProviderIdAdministratorsPostResponses401ContentApplicationJsonSchema>, global::System.Threading.Tasks.Task> onUnauthorized, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/providers/(?<provider_id>[^/]+)/administrators$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/providers/{provider_id}/administrators'");
                }

                // replace URI parameters with values from identity
                var providerId = _match.Groups["provider_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/providers/"
                        + providerId
                        + "/administrators"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ProviderAdminCreate_Call(request,onOk,onUnauthorized,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ProviderAdminCreate" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onUnauthorized">a delegate that is called when the remote service returns 401 (Unauthorized).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ProviderAdminCreate_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IAdministrator>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IPathsProvidersProviderIdAdministratorsPostResponses401ContentApplicationJsonSchema>, global::System.Threading.Tasks.Task> onUnauthorized, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.Administrator.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.Unauthorized:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onUnauthorized(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.PathsProvidersProviderIdAdministratorsPostResponses401ContentApplicationJsonSchema.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ProviderAdminCreate" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="providerId"></param>
        /// <param name="body">ProviderAdminReq</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ProviderAdminCreate_Validate(string providerId, JumpCloudApiSdkV2.Models.IProviderAdminReq body, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(providerId),providerId);
                await eventListener.AssertNotNull(nameof(body), body);
                await eventListener.AssertObjectIsValid(nameof(body), body);
            }
        }

        /// <summary>
        /// This endpoint returns a list of the Administrators associated with the Provider.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/providers/{ProviderID}/administrators \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="providerId"></param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onUnauthorized">a delegate that is called when the remote service returns 401 (Unauthorized).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ProviderAdministratorList(string providerId, string[] filter, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IPathsProvidersProviderIdAdministratorsGetResponses200ContentApplicationJsonSchema>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IPathsProvidersProviderIdAdministratorsGetResponses401ContentApplicationJsonSchema>, global::System.Threading.Tasks.Task> onUnauthorized, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/providers/"
                        + global::System.Uri.EscapeDataString(providerId)
                        + "/administrators"
                        + "?"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ProviderAdministratorList_Call(request,onOk,onUnauthorized,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns a list of the Administrators associated with the Provider.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/providers/{ProviderID}/administrators \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onUnauthorized">a delegate that is called when the remote service returns 401 (Unauthorized).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ProviderAdministratorListViaIdentity(global::System.String viaIdentity, string[] filter, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IPathsProvidersProviderIdAdministratorsGetResponses200ContentApplicationJsonSchema>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IPathsProvidersProviderIdAdministratorsGetResponses401ContentApplicationJsonSchema>, global::System.Threading.Tasks.Task> onUnauthorized, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/providers/(?<provider_id>[^/]+)/administrators$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/providers/{provider_id}/administrators'");
                }

                // replace URI parameters with values from identity
                var providerId = _match.Groups["provider_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/providers/"
                        + providerId
                        + "/administrators"
                        + "?"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ProviderAdministratorList_Call(request,onOk,onUnauthorized,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ProviderAdministratorList" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onUnauthorized">a delegate that is called when the remote service returns 401 (Unauthorized).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ProviderAdministratorList_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IPathsProvidersProviderIdAdministratorsGetResponses200ContentApplicationJsonSchema>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IPathsProvidersProviderIdAdministratorsGetResponses401ContentApplicationJsonSchema>, global::System.Threading.Tasks.Task> onUnauthorized, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.PathsProvidersProviderIdAdministratorsGetResponses200ContentApplicationJsonSchema.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.Unauthorized:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onUnauthorized(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.PathsProvidersProviderIdAdministratorsGetResponses401ContentApplicationJsonSchema.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ProviderAdministratorList" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="providerId"></param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ProviderAdministratorList_Validate(string providerId, string[] filter, int? limit, int? skip, string[] sort, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(providerId),providerId);
            }
        }

        /// <summary>
        /// This endpoint returns the _direct_ associations of a Radius Server.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example Radius Servers and
        /// Users.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/radiusservers/{RADIUS_ID}/associations?targets=user_group \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="radiusserverId">ObjectID of the Radius Server.</param>
        /// <param name="targets"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task RadiusServerAssociationList(string radiusserverId, string[] targets, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/radiusservers/"
                        + global::System.Uri.EscapeDataString(radiusserverId)
                        + "/associations"
                        + "?"
                        + (null != targets  && targets.Length > 0 ? "targets=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(targets, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.RadiusServerAssociationList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns the _direct_ associations of a Radius Server.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example Radius Servers and
        /// Users.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/radiusservers/{RADIUS_ID}/associations?targets=user_group \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="targets"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task RadiusServerAssociationListViaIdentity(global::System.String viaIdentity, string[] targets, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/radiusservers/(?<radiusserver_id>[^/]+)/associations$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/radiusservers/{radiusserver_id}/associations'");
                }

                // replace URI parameters with values from identity
                var radiusserverId = _match.Groups["radiusserver_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/radiusservers/"
                        + radiusserverId
                        + "/associations"
                        + "?"
                        + (null != targets  && targets.Length > 0 ? "targets=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(targets, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.RadiusServerAssociationList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="RadiusServerAssociationList" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task RadiusServerAssociationList_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphConnection[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphConnection) (JumpCloudApiSdkV2.Models.GraphConnection.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="RadiusServerAssociationList" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="radiusserverId">ObjectID of the Radius Server.</param>
        /// <param name="targets"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task RadiusServerAssociationList_Validate(string radiusserverId, string[] targets, int? limit, int? skip, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(radiusserverId),radiusserverId);
                await eventListener.AssertNotNull(nameof(targets), targets);
                if (targets != null ) {
                        for (int __i = 0; __i < targets.Length; __i++) {
                          await eventListener.AssertEnum($"targets[{__i}]",targets[__i],@"active_directory", @"application", @"command", @"g_suite", @"ldap_server", @"office_365", @"policy", @"radius_server", @"system", @"system_group", @"user", @"user_group");
                        }
                      }
            }
        }

        /// <summary>
        /// This endpoint allows you to manage the _direct_ associations of a Radius Server.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example Radius Servers and
        /// Users.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/radiusservers/{RADIUS_ID}/associations \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        ///
        /// "type":"user",
        /// "id":"{USER_ID}",
        /// "op":"add"
        ///
        /// }'
        /// ```
        /// </summary>
        /// <param name="radiusserverId">ObjectID of the Radius Server.</param>
        /// <param name="body">GraphManagementReq</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task RadiusServerAssociationSet(string radiusserverId, JumpCloudApiSdkV2.Models.IGraphManagementReq body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/radiusservers/"
                        + global::System.Uri.EscapeDataString(radiusserverId)
                        + "/associations"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.RadiusServerAssociationSet_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint allows you to manage the _direct_ associations of a Radius Server.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example Radius Servers and
        /// Users.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/radiusservers/{RADIUS_ID}/associations \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        ///
        /// "type":"user",
        /// "id":"{USER_ID}",
        /// "op":"add"
        ///
        /// }'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="body">GraphManagementReq</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task RadiusServerAssociationSetViaIdentity(global::System.String viaIdentity, JumpCloudApiSdkV2.Models.IGraphManagementReq body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/radiusservers/(?<radiusserver_id>[^/]+)/associations$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/radiusservers/{radiusserver_id}/associations'");
                }

                // replace URI parameters with values from identity
                var radiusserverId = _match.Groups["radiusserver_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/radiusservers/"
                        + radiusserverId
                        + "/associations"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.RadiusServerAssociationSet_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="RadiusServerAssociationSet" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task RadiusServerAssociationSet_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.NoContent:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onNoContent(_response);
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="RadiusServerAssociationSet" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="radiusserverId">ObjectID of the Radius Server.</param>
        /// <param name="body">GraphManagementReq</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task RadiusServerAssociationSet_Validate(string radiusserverId, JumpCloudApiSdkV2.Models.IGraphManagementReq body, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(radiusserverId),radiusserverId);
                await eventListener.AssertNotNull(nameof(body), body);
                await eventListener.AssertObjectIsValid(nameof(body), body);
            }
        }

        /// <summary>
        /// This endpoint will return all Users Groups bound to a RADIUS Server, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the group's type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this RADIUS server instance to the corresponding User Group; this array represents
        /// all grouping and/or associations that would have to be removed to deprovision the User Group from this RADIUS server instance.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/radiusservers/{RADIUS_ID}/usergroups \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="radiusserverId">ObjectID of the Radius Server.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task RadiusServerTraverseUserGroupList(string radiusserverId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/radiusservers/"
                        + global::System.Uri.EscapeDataString(radiusserverId)
                        + "/usergroups"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.RadiusServerTraverseUserGroupList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all Users Groups bound to a RADIUS Server, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the group's type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this RADIUS server instance to the corresponding User Group; this array represents
        /// all grouping and/or associations that would have to be removed to deprovision the User Group from this RADIUS server instance.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/radiusservers/{RADIUS_ID}/usergroups \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task RadiusServerTraverseUserGroupListViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/radiusservers/(?<radiusserver_id>[^/]+)/usergroups$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/radiusservers/{radiusserver_id}/usergroups'");
                }

                // replace URI parameters with values from identity
                var radiusserverId = _match.Groups["radiusserver_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/radiusservers/"
                        + radiusserverId
                        + "/usergroups"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.RadiusServerTraverseUserGroupList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="RadiusServerTraverseUserGroupList" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task RadiusServerTraverseUserGroupList_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphObjectWithPaths) (JumpCloudApiSdkV2.Models.GraphObjectWithPaths.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="RadiusServerTraverseUserGroupList" /> method. Call this like the actual call, but you
        /// will get validation events back.
        /// </summary>
        /// <param name="radiusserverId">ObjectID of the Radius Server.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task RadiusServerTraverseUserGroupList_Validate(string radiusserverId, int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(radiusserverId),radiusserverId);
            }
        }

        /// <summary>
        /// This endpoint will return all Users bound to a RADIUS Server, either directly or indirectly, essentially traversing the
        /// JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this RADIUS server instance to the corresponding User; this array represents
        /// all grouping and/or associations that would have to be removed to deprovision the User from this RADIUS server instance.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/ldapservers/{LDAP_ID}/users \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="radiusserverId">ObjectID of the Radius Server.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task RadiusServerTraverseUserList(string radiusserverId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/radiusservers/"
                        + global::System.Uri.EscapeDataString(radiusserverId)
                        + "/users"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.RadiusServerTraverseUserList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all Users bound to a RADIUS Server, either directly or indirectly, essentially traversing the
        /// JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this RADIUS server instance to the corresponding User; this array represents
        /// all grouping and/or associations that would have to be removed to deprovision the User from this RADIUS server instance.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/ldapservers/{LDAP_ID}/users \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task RadiusServerTraverseUserListViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/radiusservers/(?<radiusserver_id>[^/]+)/users$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/radiusservers/{radiusserver_id}/users'");
                }

                // replace URI parameters with values from identity
                var radiusserverId = _match.Groups["radiusserver_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/radiusservers/"
                        + radiusserverId
                        + "/users"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.RadiusServerTraverseUserList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="RadiusServerTraverseUserList" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task RadiusServerTraverseUserList_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphObjectWithPaths) (JumpCloudApiSdkV2.Models.GraphObjectWithPaths.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="RadiusServerTraverseUserList" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="radiusserverId">ObjectID of the Radius Server.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task RadiusServerTraverseUserList_Validate(string radiusserverId, int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(radiusserverId),radiusserverId);
            }
        }

        /// <summary>
        /// This endpoint returns the _direct_ associations of a System.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example Systems and Users.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/systems/{System_ID}/associations?targets=user \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="systemId">ObjectID of the System.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="date">Current date header for the System Context API</param>
        /// <param name="authorization">Authorization header for the System Context API</param>
        /// <param name="targets"></param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SystemAssociationList(string systemId, int? limit, int? skip, string date, string authorization, string[] targets, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systems/"
                        + global::System.Uri.EscapeDataString(systemId)
                        + "/associations"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != targets  && targets.Length > 0 ? "targets=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(targets, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // add headers parameters
                if (null != date)
                {
                    request.Headers.Add("Date",date);
                }
                if (null != authorization)
                {
                    request.Headers.Add("Authorization",authorization);
                }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SystemAssociationList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns the _direct_ associations of a System.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example Systems and Users.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/systems/{System_ID}/associations?targets=user \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="date">Current date header for the System Context API</param>
        /// <param name="authorization">Authorization header for the System Context API</param>
        /// <param name="targets"></param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SystemAssociationListViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string date, string authorization, string[] targets, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systems/(?<system_id>[^/]+)/associations$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systems/{system_id}/associations'");
                }

                // replace URI parameters with values from identity
                var systemId = _match.Groups["system_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systems/"
                        + systemId
                        + "/associations"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != targets  && targets.Length > 0 ? "targets=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(targets, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // add headers parameters
                if (null != date)
                {
                    request.Headers.Add("Date",date);
                }
                if (null != authorization)
                {
                    request.Headers.Add("Authorization",authorization);
                }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SystemAssociationList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="SystemAssociationList" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SystemAssociationList_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphConnection[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphConnection) (JumpCloudApiSdkV2.Models.GraphConnection.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="SystemAssociationList" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="systemId">ObjectID of the System.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="date">Current date header for the System Context API</param>
        /// <param name="authorization">Authorization header for the System Context API</param>
        /// <param name="targets"></param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SystemAssociationList_Validate(string systemId, int? limit, int? skip, string date, string authorization, string[] targets, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(systemId),systemId);
                await eventListener.AssertNotNull(nameof(date),date);
                await eventListener.AssertNotNull(nameof(authorization),authorization);
                await eventListener.AssertNotNull(nameof(targets), targets);
                if (targets != null ) {
                        for (int __i = 0; __i < targets.Length; __i++) {
                          await eventListener.AssertEnum($"targets[{__i}]",targets[__i],@"active_directory", @"application", @"command", @"g_suite", @"ldap_server", @"office_365", @"policy", @"radius_server", @"user", @"user_group");
                        }
                      }
            }
        }

        /// <summary>
        /// This endpoint allows you to manage the _direct_ associations of a System.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example Systems and Users.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/systems/{System_ID}/associations \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "attributes": {
        /// "sudo": {
        /// "enabled": true,
        /// "withoutPassword": false
        /// }
        /// },
        /// "op": "add",
        /// "type": "user",
        /// "id": "UserID"
        /// }'
        /// ```
        /// </summary>
        /// <param name="systemId">ObjectID of the System.</param>
        /// <param name="date">Current date header for the System Context API</param>
        /// <param name="authorization">Authorization header for the System Context API</param>
        /// <param name="body">SystemGraphManagementReq</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SystemAssociationSet(string systemId, string date, string authorization, JumpCloudApiSdkV2.Models.ISystemGraphManagementReq body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systems/"
                        + global::System.Uri.EscapeDataString(systemId)
                        + "/associations"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // add headers parameters
                if (null != date)
                {
                    request.Headers.Add("Date",date);
                }
                if (null != authorization)
                {
                    request.Headers.Add("Authorization",authorization);
                }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SystemAssociationSet_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint allows you to manage the _direct_ associations of a System.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example Systems and Users.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/systems/{System_ID}/associations \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "attributes": {
        /// "sudo": {
        /// "enabled": true,
        /// "withoutPassword": false
        /// }
        /// },
        /// "op": "add",
        /// "type": "user",
        /// "id": "UserID"
        /// }'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="date">Current date header for the System Context API</param>
        /// <param name="authorization">Authorization header for the System Context API</param>
        /// <param name="body">SystemGraphManagementReq</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SystemAssociationSetViaIdentity(global::System.String viaIdentity, string date, string authorization, JumpCloudApiSdkV2.Models.ISystemGraphManagementReq body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systems/(?<system_id>[^/]+)/associations$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systems/{system_id}/associations'");
                }

                // replace URI parameters with values from identity
                var systemId = _match.Groups["system_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systems/"
                        + systemId
                        + "/associations"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // add headers parameters
                if (null != date)
                {
                    request.Headers.Add("Date",date);
                }
                if (null != authorization)
                {
                    request.Headers.Add("Authorization",authorization);
                }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SystemAssociationSet_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="SystemAssociationSet" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SystemAssociationSet_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.NoContent:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onNoContent(_response);
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="SystemAssociationSet" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="systemId">ObjectID of the System.</param>
        /// <param name="date">Current date header for the System Context API</param>
        /// <param name="authorization">Authorization header for the System Context API</param>
        /// <param name="body">SystemGraphManagementReq</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SystemAssociationSet_Validate(string systemId, string date, string authorization, JumpCloudApiSdkV2.Models.ISystemGraphManagementReq body, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(systemId),systemId);
                await eventListener.AssertNotNull(nameof(date),date);
                await eventListener.AssertNotNull(nameof(authorization),authorization);
                await eventListener.AssertNotNull(nameof(body), body);
                await eventListener.AssertObjectIsValid(nameof(body), body);
            }
        }

        /// <summary>This endpoint will return the current (latest) fde key saved for a system.</summary>
        /// <param name="systemId"></param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onBadRequest">a delegate that is called when the remote service returns 400 (BadRequest).</param>
        /// <param name="onUnauthorized">a delegate that is called when the remote service returns 401 (Unauthorized).</param>
        /// <param name="onForbidden">a delegate that is called when the remote service returns 403 (Forbidden).</param>
        /// <param name="onNotFound">a delegate that is called when the remote service returns 404 (NotFound).</param>
        /// <param name="onConflict">a delegate that is called when the remote service returns 409 (Conflict).</param>
        /// <param name="onInternalServerError">a delegate that is called when the remote service returns 500 (InternalServerError).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SystemFdeKeyGet(string systemId, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemfdekey>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onBadRequest, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onUnauthorized, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onForbidden, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onNotFound, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onConflict, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onInternalServerError, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systems/"
                        + global::System.Uri.EscapeDataString(systemId)
                        + "/fdekey"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SystemFdeKeyGet_Call(request,onOk,onBadRequest,onUnauthorized,onForbidden,onNotFound,onConflict,onInternalServerError,eventListener,sender);
            }
        }

        /// <summary>This endpoint will return the current (latest) fde key saved for a system.</summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onBadRequest">a delegate that is called when the remote service returns 400 (BadRequest).</param>
        /// <param name="onUnauthorized">a delegate that is called when the remote service returns 401 (Unauthorized).</param>
        /// <param name="onForbidden">a delegate that is called when the remote service returns 403 (Forbidden).</param>
        /// <param name="onNotFound">a delegate that is called when the remote service returns 404 (NotFound).</param>
        /// <param name="onConflict">a delegate that is called when the remote service returns 409 (Conflict).</param>
        /// <param name="onInternalServerError">a delegate that is called when the remote service returns 500 (InternalServerError).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SystemFdeKeyGetViaIdentity(global::System.String viaIdentity, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemfdekey>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onBadRequest, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onUnauthorized, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onForbidden, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onNotFound, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onConflict, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onInternalServerError, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systems/(?<system_id>[^/]+)/fdekey$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systems/{system_id}/fdekey'");
                }

                // replace URI parameters with values from identity
                var systemId = _match.Groups["system_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systems/"
                        + systemId
                        + "/fdekey"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SystemFdeKeyGet_Call(request,onOk,onBadRequest,onUnauthorized,onForbidden,onNotFound,onConflict,onInternalServerError,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="SystemFdeKeyGet" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onBadRequest">a delegate that is called when the remote service returns 400 (BadRequest).</param>
        /// <param name="onUnauthorized">a delegate that is called when the remote service returns 401 (Unauthorized).</param>
        /// <param name="onForbidden">a delegate that is called when the remote service returns 403 (Forbidden).</param>
        /// <param name="onNotFound">a delegate that is called when the remote service returns 404 (NotFound).</param>
        /// <param name="onConflict">a delegate that is called when the remote service returns 409 (Conflict).</param>
        /// <param name="onInternalServerError">a delegate that is called when the remote service returns 500 (InternalServerError).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SystemFdeKeyGet_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemfdekey>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onBadRequest, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onUnauthorized, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onForbidden, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onNotFound, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onConflict, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onInternalServerError, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.Systemfdekey.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.BadRequest:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onBadRequest(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.Errorresponse.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.Unauthorized:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onUnauthorized(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.Errorresponse.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.Forbidden:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onForbidden(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.Errorresponse.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.NotFound:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onNotFound(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.Errorresponse.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.Conflict:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onConflict(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.Errorresponse.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.InternalServerError:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onInternalServerError(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.Errorresponse.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="SystemFdeKeyGet" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="systemId"></param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SystemFdeKeyGet_Validate(string systemId, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(systemId),systemId);
            }
        }

        /// <summary>
        /// This endpoint returns the _direct_ associations of a System Group.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example System Groups and
        /// Users.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/systemgroups/{GroupID}/associations?targets=user \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="groupId">ObjectID of the System Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="targets"></param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SystemGroupAssociationList(string groupId, int? limit, int? skip, string[] targets, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systemgroups/"
                        + global::System.Uri.EscapeDataString(groupId)
                        + "/associations"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != targets  && targets.Length > 0 ? "targets=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(targets, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SystemGroupAssociationList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns the _direct_ associations of a System Group.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example System Groups and
        /// Users.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/systemgroups/{GroupID}/associations?targets=user \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="targets"></param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SystemGroupAssociationListViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] targets, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systemgroups/(?<group_id>[^/]+)/associations$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systemgroups/{group_id}/associations'");
                }

                // replace URI parameters with values from identity
                var groupId = _match.Groups["group_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systemgroups/"
                        + groupId
                        + "/associations"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != targets  && targets.Length > 0 ? "targets=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(targets, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SystemGroupAssociationList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="SystemGroupAssociationList" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SystemGroupAssociationList_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphConnection[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphConnection) (JumpCloudApiSdkV2.Models.GraphConnection.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="SystemGroupAssociationList" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="groupId">ObjectID of the System Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="targets"></param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SystemGroupAssociationList_Validate(string groupId, int? limit, int? skip, string[] targets, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(groupId),groupId);
                await eventListener.AssertNotNull(nameof(targets), targets);
                if (targets != null ) {
                        for (int __i = 0; __i < targets.Length; __i++) {
                          await eventListener.AssertEnum($"targets[{__i}]",targets[__i],@"active_directory", @"application", @"command", @"g_suite", @"ldap_server", @"office_365", @"policy", @"radius_server", @"user", @"user_group");
                        }
                      }
            }
        }

        /// <summary>
        /// This endpoint allows you to manage the _direct_ associations of a System Group.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example System Groups and
        /// Users.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/systemgroups/{GroupID}/associations \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "op": "add",
        /// "type": "user",
        /// "id": "{UserID}"
        /// }'
        /// ```
        /// </summary>
        /// <param name="groupId">ObjectID of the System Group.</param>
        /// <param name="body">SystemGroupGraphManagementReq</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SystemGroupAssociationSet(string groupId, JumpCloudApiSdkV2.Models.ISystemGroupGraphManagementReq body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systemgroups/"
                        + global::System.Uri.EscapeDataString(groupId)
                        + "/associations"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SystemGroupAssociationSet_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint allows you to manage the _direct_ associations of a System Group.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example System Groups and
        /// Users.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/systemgroups/{GroupID}/associations \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "op": "add",
        /// "type": "user",
        /// "id": "{UserID}"
        /// }'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="body">SystemGroupGraphManagementReq</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SystemGroupAssociationSetViaIdentity(global::System.String viaIdentity, JumpCloudApiSdkV2.Models.ISystemGroupGraphManagementReq body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systemgroups/(?<group_id>[^/]+)/associations$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systemgroups/{group_id}/associations'");
                }

                // replace URI parameters with values from identity
                var groupId = _match.Groups["group_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systemgroups/"
                        + groupId
                        + "/associations"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SystemGroupAssociationSet_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="SystemGroupAssociationSet" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SystemGroupAssociationSet_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.NoContent:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onNoContent(_response);
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="SystemGroupAssociationSet" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="groupId">ObjectID of the System Group.</param>
        /// <param name="body">SystemGroupGraphManagementReq</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SystemGroupAssociationSet_Validate(string groupId, JumpCloudApiSdkV2.Models.ISystemGroupGraphManagementReq body, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(groupId),groupId);
                await eventListener.AssertNotNull(nameof(body), body);
                await eventListener.AssertObjectIsValid(nameof(body), body);
            }
        }

        /// <summary>
        /// This endpoint allows you to create a new System Group.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/systemgroups \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "name": "{Group_Name}"
        /// }'
        /// ```
        /// </summary>
        /// <param name="body">SystemGroupData</param>
        /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SystemGroupCreate(JumpCloudApiSdkV2.Models.ISystemGroupData body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemGroup>, global::System.Threading.Tasks.Task> onCreated, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systemgroups"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SystemGroupCreate_Call(request,onCreated,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="SystemGroupCreate" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SystemGroupCreate_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemGroup>, global::System.Threading.Tasks.Task> onCreated, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.Created:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onCreated(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.SystemGroup.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="SystemGroupCreate" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="body">SystemGroupData</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SystemGroupCreate_Validate(JumpCloudApiSdkV2.Models.ISystemGroupData body, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(body), body);
                await eventListener.AssertObjectIsValid(nameof(body), body);
            }
        }

        /// <summary>
        /// This endpoint allows you to delete a System Group.
        /// #### Sample Request
        /// ```
        /// curl -X DELETE https://console.jumpcloud.com/api/v2/systemgroups/{Group_ID} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="id">ObjectID of the System Group.</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SystemGroupDelete(string id, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systemgroups/"
                        + global::System.Uri.EscapeDataString(id)

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Delete, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SystemGroupDelete_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint allows you to delete a System Group.
        /// #### Sample Request
        /// ```
        /// curl -X DELETE https://console.jumpcloud.com/api/v2/systemgroups/{Group_ID} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SystemGroupDeleteViaIdentity(global::System.String viaIdentity, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systemgroups/(?<id>[^/]+)$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systemgroups/{id}'");
                }

                // replace URI parameters with values from identity
                var id = _match.Groups["id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systemgroups/"
                        + id

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Delete, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SystemGroupDelete_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="SystemGroupDelete" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SystemGroupDelete_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.NoContent:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onNoContent(_response);
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="SystemGroupDelete" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="id">ObjectID of the System Group.</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SystemGroupDelete_Validate(string id, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(id),id);
            }
        }

        /// <summary>
        /// This endpoint returns the details of a System Group.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/systemgroups/{Group_ID} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="id">ObjectID of the System Group.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SystemGroupGet(string id, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemGroup>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systemgroups/"
                        + global::System.Uri.EscapeDataString(id)

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SystemGroupGet_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns the details of a System Group.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/systemgroups/{Group_ID} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SystemGroupGetViaIdentity(global::System.String viaIdentity, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemGroup>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systemgroups/(?<id>[^/]+)$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systemgroups/{id}'");
                }

                // replace URI parameters with values from identity
                var id = _match.Groups["id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systemgroups/"
                        + id

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SystemGroupGet_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="SystemGroupGet" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SystemGroupGet_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemGroup>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.SystemGroup.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="SystemGroupGet" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="id">ObjectID of the System Group.</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SystemGroupGet_Validate(string id, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(id),id);
            }
        }

        /// <summary>
        /// This endpoint returns all System Groups.
        /// Available filter fields:
        /// - `name`
        /// - `disabled`
        /// - `type`
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/systemgroups \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onDefault">a delegate that is called when the remote service returns default (any response code not handled
        /// elsewhere).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SystemGroupList(string[] filter, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemGroup[]>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IError>, global::System.Threading.Tasks.Task> onDefault, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systemgroups"
                        + "?"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SystemGroupList_Call(request,onOk,onDefault,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns all System Groups.
        /// Available filter fields:
        /// - `name`
        /// - `disabled`
        /// - `type`
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/systemgroups \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onDefault">a delegate that is called when the remote service returns default (any response code not handled
        /// elsewhere).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SystemGroupListViaIdentity(global::System.String viaIdentity, string[] filter, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemGroup[]>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IError>, global::System.Threading.Tasks.Task> onDefault, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systemgroups$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systemgroups'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systemgroups"
                        + "?"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SystemGroupList_Call(request,onOk,onDefault,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="SystemGroupList" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onDefault">a delegate that is called when the remote service returns default (any response code not handled
        /// elsewhere).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SystemGroupList_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemGroup[]>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IError>, global::System.Threading.Tasks.Task> onDefault, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.ISystemGroup[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.ISystemGroup) (JumpCloudApiSdkV2.Models.SystemGroup.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onDefault(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.Error.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="SystemGroupList" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SystemGroupList_Validate(string[] filter, int? limit, int? skip, string[] sort, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {

            }
        }

        /// <summary>
        /// This endpoint returns the system members of a System Group.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/systemgroups/{Group_ID}/members \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="groupId">ObjectID of the System Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SystemGroupMembersList(string groupId, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systemgroups/"
                        + global::System.Uri.EscapeDataString(groupId)
                        + "/members"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SystemGroupMembersList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns the system members of a System Group.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/systemgroups/{Group_ID}/members \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SystemGroupMembersListViaIdentity(global::System.String viaIdentity, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systemgroups/(?<group_id>[^/]+)/members$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systemgroups/{group_id}/members'");
                }

                // replace URI parameters with values from identity
                var groupId = _match.Groups["group_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systemgroups/"
                        + groupId
                        + "/members"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SystemGroupMembersList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="SystemGroupMembersList" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SystemGroupMembersList_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphConnection[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphConnection) (JumpCloudApiSdkV2.Models.GraphConnection.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="SystemGroupMembersList" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="groupId">ObjectID of the System Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SystemGroupMembersList_Validate(string groupId, int? limit, int? skip, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(groupId),groupId);
            }
        }

        /// <summary>
        /// This endpoint allows you to manage the system members of a System Group.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/systemgroups/{Group_ID}/members \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "op": "add",
        /// "type": "system",
        /// "id": "{System_ID}"
        /// }'
        /// ```
        /// </summary>
        /// <param name="groupId">ObjectID of the System Group.</param>
        /// <param name="date">Current date header for the System Context API</param>
        /// <param name="authorization">Authorization header for the System Context API</param>
        /// <param name="body">SystemGroupMembersReq</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SystemGroupMembersSet(string groupId, string date, string authorization, JumpCloudApiSdkV2.Models.ISystemGroupMembersReq body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systemgroups/"
                        + global::System.Uri.EscapeDataString(groupId)
                        + "/members"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // add headers parameters
                if (null != date)
                {
                    request.Headers.Add("Date",date);
                }
                if (null != authorization)
                {
                    request.Headers.Add("Authorization",authorization);
                }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SystemGroupMembersSet_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint allows you to manage the system members of a System Group.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/systemgroups/{Group_ID}/members \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "op": "add",
        /// "type": "system",
        /// "id": "{System_ID}"
        /// }'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="date">Current date header for the System Context API</param>
        /// <param name="authorization">Authorization header for the System Context API</param>
        /// <param name="body">SystemGroupMembersReq</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SystemGroupMembersSetViaIdentity(global::System.String viaIdentity, string date, string authorization, JumpCloudApiSdkV2.Models.ISystemGroupMembersReq body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systemgroups/(?<group_id>[^/]+)/members$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systemgroups/{group_id}/members'");
                }

                // replace URI parameters with values from identity
                var groupId = _match.Groups["group_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systemgroups/"
                        + groupId
                        + "/members"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // add headers parameters
                if (null != date)
                {
                    request.Headers.Add("Date",date);
                }
                if (null != authorization)
                {
                    request.Headers.Add("Authorization",authorization);
                }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SystemGroupMembersSet_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="SystemGroupMembersSet" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SystemGroupMembersSet_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.NoContent:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onNoContent(_response);
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="SystemGroupMembersSet" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="groupId">ObjectID of the System Group.</param>
        /// <param name="date">Current date header for the System Context API</param>
        /// <param name="authorization">Authorization header for the System Context API</param>
        /// <param name="body">SystemGroupMembersReq</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SystemGroupMembersSet_Validate(string groupId, string date, string authorization, JumpCloudApiSdkV2.Models.ISystemGroupMembersReq body, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(groupId),groupId);
                await eventListener.AssertNotNull(nameof(date),date);
                await eventListener.AssertNotNull(nameof(authorization),authorization);
                await eventListener.AssertNotNull(nameof(body), body);
                await eventListener.AssertObjectIsValid(nameof(body), body);
            }
        }

        /// <summary>
        /// This endpoint returns all Systems that are a member of this System Group.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/systemgroups/{Group_ID/membership \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="groupId">ObjectID of the System Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SystemGroupMembershipList(string groupId, int? limit, int? skip, string[] sort, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systemgroups/"
                        + global::System.Uri.EscapeDataString(groupId)
                        + "/membership"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SystemGroupMembershipList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns all Systems that are a member of this System Group.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/systemgroups/{Group_ID/membership \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SystemGroupMembershipListViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] sort, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systemgroups/(?<group_id>[^/]+)/membership$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systemgroups/{group_id}/membership'");
                }

                // replace URI parameters with values from identity
                var groupId = _match.Groups["group_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systemgroups/"
                        + groupId
                        + "/membership"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SystemGroupMembershipList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="SystemGroupMembershipList" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SystemGroupMembershipList_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphObjectWithPaths) (JumpCloudApiSdkV2.Models.GraphObjectWithPaths.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="SystemGroupMembershipList" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="groupId">ObjectID of the System Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SystemGroupMembershipList_Validate(string groupId, int? limit, int? skip, string[] sort, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(groupId),groupId);
            }
        }

        /// <summary>
        /// This endpoint allows you to do a full update of the System Group.
        /// #### Sample Request
        /// ```
        /// curl -X PUT https://console.jumpcloud.com/api/v2/systemgroups/{Group_ID} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "name": "Name_Update"
        /// }'
        /// ```
        /// </summary>
        /// <param name="id">ObjectID of the System Group.</param>
        /// <param name="body">SystemGroupData</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SystemGroupPut(string id, JumpCloudApiSdkV2.Models.ISystemGroupData body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemGroup>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systemgroups/"
                        + global::System.Uri.EscapeDataString(id)

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Put, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SystemGroupPut_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint allows you to do a full update of the System Group.
        /// #### Sample Request
        /// ```
        /// curl -X PUT https://console.jumpcloud.com/api/v2/systemgroups/{Group_ID} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "name": "Name_Update"
        /// }'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="body">SystemGroupData</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SystemGroupPutViaIdentity(global::System.String viaIdentity, JumpCloudApiSdkV2.Models.ISystemGroupData body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemGroup>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systemgroups/(?<id>[^/]+)$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systemgroups/{id}'");
                }

                // replace URI parameters with values from identity
                var id = _match.Groups["id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systemgroups/"
                        + id

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Put, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SystemGroupPut_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="SystemGroupPut" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SystemGroupPut_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemGroup>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.SystemGroup.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="SystemGroupPut" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="id">ObjectID of the System Group.</param>
        /// <param name="body">SystemGroupData</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SystemGroupPut_Validate(string id, JumpCloudApiSdkV2.Models.ISystemGroupData body, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(id),id);
                await eventListener.AssertNotNull(nameof(body), body);
                await eventListener.AssertObjectIsValid(nameof(body), body);
            }
        }

        /// <summary>
        /// This endpoint will return all Commands bound to a System Group, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the group's type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this System Group to the corresponding Command; this array represents all
        /// grouping and/or associations that would have to be removed to deprovision the Command from this System Group.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/systemgroups/{GroupID}/commands \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="groupId">ObjectID of the System Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SystemGroupTraverseCommandList(string groupId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systemgroups/"
                        + global::System.Uri.EscapeDataString(groupId)
                        + "/commands"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SystemGroupTraverseCommandList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all Commands bound to a System Group, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the group's type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this System Group to the corresponding Command; this array represents all
        /// grouping and/or associations that would have to be removed to deprovision the Command from this System Group.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/systemgroups/{GroupID}/commands \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SystemGroupTraverseCommandListViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systemgroups/(?<group_id>[^/]+)/commands$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systemgroups/{group_id}/commands'");
                }

                // replace URI parameters with values from identity
                var groupId = _match.Groups["group_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systemgroups/"
                        + groupId
                        + "/commands"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SystemGroupTraverseCommandList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="SystemGroupTraverseCommandList" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SystemGroupTraverseCommandList_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphObjectWithPaths) (JumpCloudApiSdkV2.Models.GraphObjectWithPaths.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="SystemGroupTraverseCommandList" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="groupId">ObjectID of the System Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SystemGroupTraverseCommandList_Validate(string groupId, int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(groupId),groupId);
            }
        }

        /// <summary>
        /// This endpoint will return all Policies bound to a System Group, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this System Group to the corresponding Policy; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the Policy from this System Group.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// This endpoint is not public yet as we haven't finished the code.
        /// ##### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/systemgroups/{GroupID}/policies \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="groupId">ObjectID of the System Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SystemGroupTraversePolicyList(string groupId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systemgroups/"
                        + global::System.Uri.EscapeDataString(groupId)
                        + "/policies"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SystemGroupTraversePolicyList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all Policies bound to a System Group, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this System Group to the corresponding Policy; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the Policy from this System Group.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// This endpoint is not public yet as we haven't finished the code.
        /// ##### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/systemgroups/{GroupID}/policies \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SystemGroupTraversePolicyListViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systemgroups/(?<group_id>[^/]+)/policies$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systemgroups/{group_id}/policies'");
                }

                // replace URI parameters with values from identity
                var groupId = _match.Groups["group_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systemgroups/"
                        + groupId
                        + "/policies"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SystemGroupTraversePolicyList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="SystemGroupTraversePolicyList" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SystemGroupTraversePolicyList_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphObjectWithPaths) (JumpCloudApiSdkV2.Models.GraphObjectWithPaths.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="SystemGroupTraversePolicyList" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="groupId">ObjectID of the System Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SystemGroupTraversePolicyList_Validate(string groupId, int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(groupId),groupId);
            }
        }

        /// <summary>
        /// This endpoint will return all User Groups bound to a System Group, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this System Group to the corresponding User Group; this array represents all
        /// grouping and/or associations that would have to be removed to deprovision the User Group from this System Group.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/systemgroups/{GroupID}/usergroups \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="groupId">ObjectID of the System Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SystemGroupTraverseUserGroupList(string groupId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systemgroups/"
                        + global::System.Uri.EscapeDataString(groupId)
                        + "/usergroups"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SystemGroupTraverseUserGroupList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all User Groups bound to a System Group, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this System Group to the corresponding User Group; this array represents all
        /// grouping and/or associations that would have to be removed to deprovision the User Group from this System Group.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/systemgroups/{GroupID}/usergroups \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SystemGroupTraverseUserGroupListViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systemgroups/(?<group_id>[^/]+)/usergroups$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systemgroups/{group_id}/usergroups'");
                }

                // replace URI parameters with values from identity
                var groupId = _match.Groups["group_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systemgroups/"
                        + groupId
                        + "/usergroups"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SystemGroupTraverseUserGroupList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="SystemGroupTraverseUserGroupList" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SystemGroupTraverseUserGroupList_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphObjectWithPaths) (JumpCloudApiSdkV2.Models.GraphObjectWithPaths.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="SystemGroupTraverseUserGroupList" /> method. Call this like the actual call, but you
        /// will get validation events back.
        /// </summary>
        /// <param name="groupId">ObjectID of the System Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SystemGroupTraverseUserGroupList_Validate(string groupId, int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(groupId),groupId);
            }
        }

        /// <summary>
        /// This endpoint will return all Users bound to a System Group, either directly or indirectly, essentially traversing the
        /// JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this System Group to the corresponding User; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the User from this System Group.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/systemgroups/{GroupID}/users \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="groupId">ObjectID of the System Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SystemGroupTraverseUserList(string groupId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systemgroups/"
                        + global::System.Uri.EscapeDataString(groupId)
                        + "/users"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SystemGroupTraverseUserList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all Users bound to a System Group, either directly or indirectly, essentially traversing the
        /// JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this System Group to the corresponding User; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the User from this System Group.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/systemgroups/{GroupID}/users \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SystemGroupTraverseUserListViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systemgroups/(?<group_id>[^/]+)/users$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systemgroups/{group_id}/users'");
                }

                // replace URI parameters with values from identity
                var groupId = _match.Groups["group_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systemgroups/"
                        + groupId
                        + "/users"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SystemGroupTraverseUserList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="SystemGroupTraverseUserList" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SystemGroupTraverseUserList_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphObjectWithPaths) (JumpCloudApiSdkV2.Models.GraphObjectWithPaths.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="SystemGroupTraverseUserList" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="groupId">ObjectID of the System Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SystemGroupTraverseUserList_Validate(string groupId, int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(groupId),groupId);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `bundle_name`.</summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SystemInsightsAppsList(int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsApps[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/apps"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SystemInsightsAppsList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `bundle_name`.</summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SystemInsightsAppsListViaIdentity(global::System.String viaIdentity, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsApps[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systeminsights/apps$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systeminsights/apps'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/apps"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SystemInsightsAppsList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="SystemInsightsAppsList" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SystemInsightsAppsList_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsApps[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.ISystemInsightsApps[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.ISystemInsightsApps) (JumpCloudApiSdkV2.Models.SystemInsightsApps.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="SystemInsightsAppsList" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SystemInsightsAppsList_Validate(int? limit, int? skip, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertIsLessThanOrEqual(nameof(limit),limit,100);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `protection_status`.</summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SystemInsightsBitlockerInfoList(int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsBitlockerInfo[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/bitlocker_info"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SystemInsightsBitlockerInfoList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `protection_status`.</summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SystemInsightsBitlockerInfoListViaIdentity(global::System.String viaIdentity, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsBitlockerInfo[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systeminsights/bitlocker_info$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systeminsights/bitlocker_info'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/bitlocker_info"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SystemInsightsBitlockerInfoList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="SystemInsightsBitlockerInfoList" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SystemInsightsBitlockerInfoList_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsBitlockerInfo[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.ISystemInsightsBitlockerInfo[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.ISystemInsightsBitlockerInfo) (JumpCloudApiSdkV2.Models.SystemInsightsBitlockerInfo.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="SystemInsightsBitlockerInfoList" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SystemInsightsBitlockerInfoList_Validate(int? limit, int? skip, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertIsLessThanOrEqual(nameof(limit),limit,100);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `name`.</summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SystemInsightsBrowserPluginsList(int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsBrowserPlugins[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/browser_plugins"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SystemInsightsBrowserPluginsList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `name`.</summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SystemInsightsBrowserPluginsListViaIdentity(global::System.String viaIdentity, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsBrowserPlugins[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systeminsights/browser_plugins$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systeminsights/browser_plugins'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/browser_plugins"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SystemInsightsBrowserPluginsList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="SystemInsightsBrowserPluginsList" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SystemInsightsBrowserPluginsList_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsBrowserPlugins[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.ISystemInsightsBrowserPlugins[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.ISystemInsightsBrowserPlugins) (JumpCloudApiSdkV2.Models.SystemInsightsBrowserPlugins.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="SystemInsightsBrowserPluginsList" /> method. Call this like the actual call, but you
        /// will get validation events back.
        /// </summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SystemInsightsBrowserPluginsList_Validate(int? limit, int? skip, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertIsLessThanOrEqual(nameof(limit),limit,100);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `name`.</summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SystemInsightsChromeExtensionsList(int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsChromeExtensions[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/chrome_extensions"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SystemInsightsChromeExtensionsList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `name`.</summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SystemInsightsChromeExtensionsListViaIdentity(global::System.String viaIdentity, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsChromeExtensions[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systeminsights/chrome_extensions$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systeminsights/chrome_extensions'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/chrome_extensions"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SystemInsightsChromeExtensionsList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="SystemInsightsChromeExtensionsList" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SystemInsightsChromeExtensionsList_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsChromeExtensions[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.ISystemInsightsChromeExtensions[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.ISystemInsightsChromeExtensions) (JumpCloudApiSdkV2.Models.SystemInsightsChromeExtensions.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="SystemInsightsChromeExtensionsList" /> method. Call this like the actual call, but you
        /// will get validation events back.
        /// </summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SystemInsightsChromeExtensionsList_Validate(int? limit, int? skip, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertIsLessThanOrEqual(nameof(limit),limit,100);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `encryption_status`.</summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SystemInsightsDiskEncryptionList(int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsDiskEncryption[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/disk_encryption"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SystemInsightsDiskEncryptionList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `encryption_status`.</summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SystemInsightsDiskEncryptionListViaIdentity(global::System.String viaIdentity, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsDiskEncryption[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systeminsights/disk_encryption$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systeminsights/disk_encryption'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/disk_encryption"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SystemInsightsDiskEncryptionList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="SystemInsightsDiskEncryptionList" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SystemInsightsDiskEncryptionList_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsDiskEncryption[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.ISystemInsightsDiskEncryption[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.ISystemInsightsDiskEncryption) (JumpCloudApiSdkV2.Models.SystemInsightsDiskEncryption.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="SystemInsightsDiskEncryptionList" /> method. Call this like the actual call, but you
        /// will get validation events back.
        /// </summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SystemInsightsDiskEncryptionList_Validate(int? limit, int? skip, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertIsLessThanOrEqual(nameof(limit),limit,100);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `disk_index`.</summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SystemInsightsDiskInfoList(int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsDiskInfo[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/disk_info"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SystemInsightsDiskInfoList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `disk_index`.</summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SystemInsightsDiskInfoListViaIdentity(global::System.String viaIdentity, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsDiskInfo[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systeminsights/disk_info$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systeminsights/disk_info'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/disk_info"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SystemInsightsDiskInfoList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="SystemInsightsDiskInfoList" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SystemInsightsDiskInfoList_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsDiskInfo[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.ISystemInsightsDiskInfo[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.ISystemInsightsDiskInfo) (JumpCloudApiSdkV2.Models.SystemInsightsDiskInfo.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="SystemInsightsDiskInfoList" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SystemInsightsDiskInfoList_Validate(int? limit, int? skip, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertIsLessThanOrEqual(nameof(limit),limit,100);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `address`.</summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SystemInsightsEtcHostsList(int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsEtcHosts[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/etc_hosts"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SystemInsightsEtcHostsList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `address`.</summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SystemInsightsEtcHostsListViaIdentity(global::System.String viaIdentity, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsEtcHosts[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systeminsights/etc_hosts$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systeminsights/etc_hosts'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/etc_hosts"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SystemInsightsEtcHostsList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="SystemInsightsEtcHostsList" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SystemInsightsEtcHostsList_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsEtcHosts[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.ISystemInsightsEtcHosts[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.ISystemInsightsEtcHosts) (JumpCloudApiSdkV2.Models.SystemInsightsEtcHosts.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="SystemInsightsEtcHostsList" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SystemInsightsEtcHostsList_Validate(int? limit, int? skip, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertIsLessThanOrEqual(nameof(limit),limit,100);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `name`.</summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SystemInsightsFirefoxAddonsList(int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsFirefoxAddons[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/firefox_addons"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SystemInsightsFirefoxAddonsList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `name`.</summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SystemInsightsFirefoxAddonsListViaIdentity(global::System.String viaIdentity, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsFirefoxAddons[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systeminsights/firefox_addons$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systeminsights/firefox_addons'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/firefox_addons"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SystemInsightsFirefoxAddonsList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="SystemInsightsFirefoxAddonsList" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SystemInsightsFirefoxAddonsList_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsFirefoxAddons[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.ISystemInsightsFirefoxAddons[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.ISystemInsightsFirefoxAddons) (JumpCloudApiSdkV2.Models.SystemInsightsFirefoxAddons.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="SystemInsightsFirefoxAddonsList" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SystemInsightsFirefoxAddonsList_Validate(int? limit, int? skip, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertIsLessThanOrEqual(nameof(limit),limit,100);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `groupname`.</summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SystemInsightsGroupsList(int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsGroups[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/groups"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SystemInsightsGroupsList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `groupname`.</summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SystemInsightsGroupsListViaIdentity(global::System.String viaIdentity, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsGroups[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systeminsights/groups$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systeminsights/groups'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/groups"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SystemInsightsGroupsList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="SystemInsightsGroupsList" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SystemInsightsGroupsList_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsGroups[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.ISystemInsightsGroups[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.ISystemInsightsGroups) (JumpCloudApiSdkV2.Models.SystemInsightsGroups.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="SystemInsightsGroupsList" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SystemInsightsGroupsList_Validate(int? limit, int? skip, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertIsLessThanOrEqual(nameof(limit),limit,100);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `address`.</summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SystemInsightsInterfaceAddressesList(int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsInterfaceAddresses[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/interface_addresses"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SystemInsightsInterfaceAddressesList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `address`.</summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SystemInsightsInterfaceAddressesListViaIdentity(global::System.String viaIdentity, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsInterfaceAddresses[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systeminsights/interface_addresses$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systeminsights/interface_addresses'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/interface_addresses"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SystemInsightsInterfaceAddressesList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// Actual wire call for <see cref="SystemInsightsInterfaceAddressesList" /> method.
        /// </summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SystemInsightsInterfaceAddressesList_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsInterfaceAddresses[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.ISystemInsightsInterfaceAddresses[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.ISystemInsightsInterfaceAddresses) (JumpCloudApiSdkV2.Models.SystemInsightsInterfaceAddresses.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="SystemInsightsInterfaceAddressesList" /> method. Call this like the actual call, but
        /// you will get validation events back.
        /// </summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SystemInsightsInterfaceAddressesList_Validate(int? limit, int? skip, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertIsLessThanOrEqual(nameof(limit),limit,100);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `version`.</summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SystemInsightsKernelInfoList(int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsKernelInfo[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/kernel_info"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SystemInsightsKernelInfoList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `version`.</summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SystemInsightsKernelInfoListViaIdentity(global::System.String viaIdentity, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsKernelInfo[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systeminsights/kernel_info$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systeminsights/kernel_info'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/kernel_info"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SystemInsightsKernelInfoList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="SystemInsightsKernelInfoList" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SystemInsightsKernelInfoList_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsKernelInfo[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.ISystemInsightsKernelInfo[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.ISystemInsightsKernelInfo) (JumpCloudApiSdkV2.Models.SystemInsightsKernelInfo.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="SystemInsightsKernelInfoList" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SystemInsightsKernelInfoList_Validate(int? limit, int? skip, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertIsLessThanOrEqual(nameof(limit),limit,100);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `device_id`.</summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SystemInsightsLogicalDrivesList(int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsLogicalDrvies[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/logical_drives"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SystemInsightsLogicalDrivesList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `device_id`.</summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SystemInsightsLogicalDrivesListViaIdentity(global::System.String viaIdentity, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsLogicalDrvies[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systeminsights/logical_drives$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systeminsights/logical_drives'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/logical_drives"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SystemInsightsLogicalDrivesList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="SystemInsightsLogicalDrivesList" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SystemInsightsLogicalDrivesList_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsLogicalDrvies[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.ISystemInsightsLogicalDrvies[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.ISystemInsightsLogicalDrvies) (JumpCloudApiSdkV2.Models.SystemInsightsLogicalDrvies.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="SystemInsightsLogicalDrivesList" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SystemInsightsLogicalDrivesList_Validate(int? limit, int? skip, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertIsLessThanOrEqual(nameof(limit),limit,100);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `path`.</summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SystemInsightsMountsList(int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsMounts[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/mounts"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SystemInsightsMountsList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `path`.</summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SystemInsightsMountsListViaIdentity(global::System.String viaIdentity, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsMounts[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systeminsights/mounts$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systeminsights/mounts'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/mounts"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SystemInsightsMountsList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="SystemInsightsMountsList" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SystemInsightsMountsList_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsMounts[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.ISystemInsightsMounts[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.ISystemInsightsMounts) (JumpCloudApiSdkV2.Models.SystemInsightsMounts.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="SystemInsightsMountsList" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SystemInsightsMountsList_Validate(int? limit, int? skip, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertIsLessThanOrEqual(nameof(limit),limit,100);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `version`.</summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SystemInsightsOSVersionList(int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsOSVersion[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/os_version"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SystemInsightsOSVersionList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `version`.</summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SystemInsightsOSVersionListViaIdentity(global::System.String viaIdentity, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsOSVersion[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systeminsights/os_version$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systeminsights/os_version'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/os_version"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SystemInsightsOSVersionList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="SystemInsightsOSVersionList" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SystemInsightsOSVersionList_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsOSVersion[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.ISystemInsightsOSVersion[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.ISystemInsightsOSVersion) (JumpCloudApiSdkV2.Models.SystemInsightsOSVersion.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="SystemInsightsOSVersionList" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SystemInsightsOSVersionList_Validate(int? limit, int? skip, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertIsLessThanOrEqual(nameof(limit),limit,100);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `hotfix_id`.</summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SystemInsightsPatchesList(int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsPatches[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/patches"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SystemInsightsPatchesList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `hotfix_id`.</summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SystemInsightsPatchesListViaIdentity(global::System.String viaIdentity, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsPatches[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systeminsights/patches$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systeminsights/patches'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/patches"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SystemInsightsPatchesList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="SystemInsightsPatchesList" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SystemInsightsPatchesList_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsPatches[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.ISystemInsightsPatches[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.ISystemInsightsPatches) (JumpCloudApiSdkV2.Models.SystemInsightsPatches.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="SystemInsightsPatchesList" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SystemInsightsPatchesList_Validate(int? limit, int? skip, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertIsLessThanOrEqual(nameof(limit),limit,100);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `name`.</summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SystemInsightsProgramsList(int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsPrograms[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/programs"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SystemInsightsProgramsList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `name`.</summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SystemInsightsProgramsListViaIdentity(global::System.String viaIdentity, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsPrograms[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systeminsights/programs$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systeminsights/programs'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/programs"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SystemInsightsProgramsList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="SystemInsightsProgramsList" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SystemInsightsProgramsList_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsPrograms[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.ISystemInsightsPrograms[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.ISystemInsightsPrograms) (JumpCloudApiSdkV2.Models.SystemInsightsPrograms.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="SystemInsightsProgramsList" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SystemInsightsProgramsList_Validate(int? limit, int? skip, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertIsLessThanOrEqual(nameof(limit),limit,100);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `name`.</summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SystemInsightsSafariExtensionsList(int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsSafariExtensions[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/safari_extensions"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SystemInsightsSafariExtensionsList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `name`.</summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SystemInsightsSafariExtensionsListViaIdentity(global::System.String viaIdentity, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsSafariExtensions[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systeminsights/safari_extensions$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systeminsights/safari_extensions'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/safari_extensions"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SystemInsightsSafariExtensionsList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="SystemInsightsSafariExtensionsList" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SystemInsightsSafariExtensionsList_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsSafariExtensions[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.ISystemInsightsSafariExtensions[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.ISystemInsightsSafariExtensions) (JumpCloudApiSdkV2.Models.SystemInsightsSafariExtensions.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="SystemInsightsSafariExtensionsList" /> method. Call this like the actual call, but you
        /// will get validation events back.
        /// </summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SystemInsightsSafariExtensionsList_Validate(int? limit, int? skip, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertIsLessThanOrEqual(nameof(limit),limit,100);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `name`.</summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SystemInsightsSystemControlsList(int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsSystemControls[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/system_controls"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SystemInsightsSystemControlsList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `name`.</summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SystemInsightsSystemControlsListViaIdentity(global::System.String viaIdentity, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsSystemControls[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systeminsights/system_controls$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systeminsights/system_controls'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/system_controls"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SystemInsightsSystemControlsList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="SystemInsightsSystemControlsList" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SystemInsightsSystemControlsList_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsSystemControls[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.ISystemInsightsSystemControls[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.ISystemInsightsSystemControls) (JumpCloudApiSdkV2.Models.SystemInsightsSystemControls.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="SystemInsightsSystemControlsList" /> method. Call this like the actual call, but you
        /// will get validation events back.
        /// </summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SystemInsightsSystemControlsList_Validate(int? limit, int? skip, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertIsLessThanOrEqual(nameof(limit),limit,100);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `cpu_subtype`.</summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SystemInsightsSystemInfoList(int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsSystemInfo[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/system_info"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SystemInsightsSystemInfoList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `cpu_subtype`.</summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SystemInsightsSystemInfoListViaIdentity(global::System.String viaIdentity, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsSystemInfo[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systeminsights/system_info$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systeminsights/system_info'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/system_info"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SystemInsightsSystemInfoList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="SystemInsightsSystemInfoList" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SystemInsightsSystemInfoList_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsSystemInfo[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.ISystemInsightsSystemInfo[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.ISystemInsightsSystemInfo) (JumpCloudApiSdkV2.Models.SystemInsightsSystemInfo.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="SystemInsightsSystemInfoList" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SystemInsightsSystemInfoList_Validate(int? limit, int? skip, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertIsLessThanOrEqual(nameof(limit),limit,100);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `days`.</summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SystemInsightsUptimeList(int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsUptime[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/uptime"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SystemInsightsUptimeList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `days`.</summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SystemInsightsUptimeListViaIdentity(global::System.String viaIdentity, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsUptime[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systeminsights/uptime$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systeminsights/uptime'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/uptime"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SystemInsightsUptimeList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="SystemInsightsUptimeList" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SystemInsightsUptimeList_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsUptime[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.ISystemInsightsUptime[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.ISystemInsightsUptime) (JumpCloudApiSdkV2.Models.SystemInsightsUptime.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="SystemInsightsUptimeList" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SystemInsightsUptimeList_Validate(int? limit, int? skip, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertIsLessThanOrEqual(nameof(limit),limit,100);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `username`.</summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SystemInsightsUsersList(int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsUsers[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/users"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SystemInsightsUsersList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `username`.</summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SystemInsightsUsersListViaIdentity(global::System.String viaIdentity, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsUsers[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systeminsights/users$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systeminsights/users'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/users"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SystemInsightsUsersList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="SystemInsightsUsersList" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SystemInsightsUsersList_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.ISystemInsightsUsers[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.ISystemInsightsUsers[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.ISystemInsightsUsers) (JumpCloudApiSdkV2.Models.SystemInsightsUsers.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="SystemInsightsUsersList" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SystemInsightsUsersList_Validate(int? limit, int? skip, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertIsLessThanOrEqual(nameof(limit),limit,100);
            }
        }

        /// <summary>
        /// This endpoint returns all the System Groups a System is a member of.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/systems/{System_ID}/memberof \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="systemId">ObjectID of the System.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="date">Current date header for the System Context API</param>
        /// <param name="authorization">Authorization header for the System Context API</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SystemMemberOfList(string systemId, string[] filter, int? limit, int? skip, string date, string authorization, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systems/"
                        + global::System.Uri.EscapeDataString(systemId)
                        + "/memberof"
                        + "?"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // add headers parameters
                if (null != date)
                {
                    request.Headers.Add("Date",date);
                }
                if (null != authorization)
                {
                    request.Headers.Add("Authorization",authorization);
                }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SystemMemberOfList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns all the System Groups a System is a member of.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/systems/{System_ID}/memberof \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="date">Current date header for the System Context API</param>
        /// <param name="authorization">Authorization header for the System Context API</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SystemMemberOfListViaIdentity(global::System.String viaIdentity, string[] filter, int? limit, int? skip, string date, string authorization, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systems/(?<system_id>[^/]+)/memberof$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systems/{system_id}/memberof'");
                }

                // replace URI parameters with values from identity
                var systemId = _match.Groups["system_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systems/"
                        + systemId
                        + "/memberof"
                        + "?"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // add headers parameters
                if (null != date)
                {
                    request.Headers.Add("Date",date);
                }
                if (null != authorization)
                {
                    request.Headers.Add("Authorization",authorization);
                }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SystemMemberOfList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="SystemMemberOfList" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SystemMemberOfList_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphObjectWithPaths) (JumpCloudApiSdkV2.Models.GraphObjectWithPaths.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="SystemMemberOfList" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="systemId">ObjectID of the System.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="date">Current date header for the System Context API</param>
        /// <param name="authorization">Authorization header for the System Context API</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SystemMemberOfList_Validate(string systemId, string[] filter, int? limit, int? skip, string date, string authorization, string[] sort, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(systemId),systemId);
                await eventListener.AssertNotNull(nameof(date),date);
                await eventListener.AssertNotNull(nameof(authorization),authorization);
            }
        }

        /// <summary>
        /// This endpoint will return all Commands bound to a System, either directly or indirectly, essentially traversing the JumpCloud
        /// Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this System to the corresponding Command; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the Command from this System.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/systems/{System_ID}/commands \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="systemId">ObjectID of the System.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SystemTraverseCommandList(string systemId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systems/"
                        + global::System.Uri.EscapeDataString(systemId)
                        + "/commands"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SystemTraverseCommandList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all Commands bound to a System, either directly or indirectly, essentially traversing the JumpCloud
        /// Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this System to the corresponding Command; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the Command from this System.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/systems/{System_ID}/commands \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SystemTraverseCommandListViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systems/(?<system_id>[^/]+)/commands$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systems/{system_id}/commands'");
                }

                // replace URI parameters with values from identity
                var systemId = _match.Groups["system_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systems/"
                        + systemId
                        + "/commands"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SystemTraverseCommandList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="SystemTraverseCommandList" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SystemTraverseCommandList_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphObjectWithPaths) (JumpCloudApiSdkV2.Models.GraphObjectWithPaths.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="SystemTraverseCommandList" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="systemId">ObjectID of the System.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SystemTraverseCommandList_Validate(string systemId, int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(systemId),systemId);
            }
        }

        /// <summary>
        /// This endpoint will return all Policies bound to a System, either directly or indirectly, essentially traversing the JumpCloud
        /// Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this System to the corresponding Policy; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the Policy from this System.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// This endpoint is not yet public as we have finish the code.
        /// ##### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/{System_ID}/policies \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="systemId">ObjectID of the System.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SystemTraversePolicyList(string systemId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systems/"
                        + global::System.Uri.EscapeDataString(systemId)
                        + "/policies"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SystemTraversePolicyList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all Policies bound to a System, either directly or indirectly, essentially traversing the JumpCloud
        /// Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this System to the corresponding Policy; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the Policy from this System.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// This endpoint is not yet public as we have finish the code.
        /// ##### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/{System_ID}/policies \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SystemTraversePolicyListViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systems/(?<system_id>[^/]+)/policies$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systems/{system_id}/policies'");
                }

                // replace URI parameters with values from identity
                var systemId = _match.Groups["system_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systems/"
                        + systemId
                        + "/policies"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SystemTraversePolicyList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="SystemTraversePolicyList" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SystemTraversePolicyList_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphObjectWithPaths) (JumpCloudApiSdkV2.Models.GraphObjectWithPaths.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="SystemTraversePolicyList" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="systemId">ObjectID of the System.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SystemTraversePolicyList_Validate(string systemId, int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(systemId),systemId);
            }
        }

        /// <summary>
        /// This endpoint will return all User Groups bound to a System, either directly or indirectly essentially traversing the
        /// JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this System to the corresponding User Group; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the User Group from this System.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/systems/{System_ID}/usergroups \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="systemId">ObjectID of the System.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="date">Current date header for the System Context API</param>
        /// <param name="authorization">Authorization header for the System Context API</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SystemTraverseUserGroupList(string systemId, int? limit, int? skip, string date, string authorization, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systems/"
                        + global::System.Uri.EscapeDataString(systemId)
                        + "/usergroups"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // add headers parameters
                if (null != date)
                {
                    request.Headers.Add("Date",date);
                }
                if (null != authorization)
                {
                    request.Headers.Add("Authorization",authorization);
                }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SystemTraverseUserGroupList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all User Groups bound to a System, either directly or indirectly essentially traversing the
        /// JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this System to the corresponding User Group; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the User Group from this System.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/systems/{System_ID}/usergroups \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="date">Current date header for the System Context API</param>
        /// <param name="authorization">Authorization header for the System Context API</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SystemTraverseUserGroupListViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string date, string authorization, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systems/(?<system_id>[^/]+)/usergroups$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systems/{system_id}/usergroups'");
                }

                // replace URI parameters with values from identity
                var systemId = _match.Groups["system_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systems/"
                        + systemId
                        + "/usergroups"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // add headers parameters
                if (null != date)
                {
                    request.Headers.Add("Date",date);
                }
                if (null != authorization)
                {
                    request.Headers.Add("Authorization",authorization);
                }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SystemTraverseUserGroupList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="SystemTraverseUserGroupList" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SystemTraverseUserGroupList_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphObjectWithPaths) (JumpCloudApiSdkV2.Models.GraphObjectWithPaths.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="SystemTraverseUserGroupList" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="systemId">ObjectID of the System.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="date">Current date header for the System Context API</param>
        /// <param name="authorization">Authorization header for the System Context API</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SystemTraverseUserGroupList_Validate(string systemId, int? limit, int? skip, string date, string authorization, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(systemId),systemId);
                await eventListener.AssertNotNull(nameof(date),date);
                await eventListener.AssertNotNull(nameof(authorization),authorization);
            }
        }

        /// <summary>
        /// This endpoint will return all Users bound to a System, either directly or indirectly essentially traversing the JumpCloud
        /// Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this System to the corresponding User; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the User from this System.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/systems/{System_ID}/users \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="systemId">ObjectID of the System.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="date">Current date header for the System Context API</param>
        /// <param name="authorization">Authorization header for the System Context API</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SystemTraverseUserList(string systemId, int? limit, int? skip, string date, string authorization, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systems/"
                        + global::System.Uri.EscapeDataString(systemId)
                        + "/users"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // add headers parameters
                if (null != date)
                {
                    request.Headers.Add("Date",date);
                }
                if (null != authorization)
                {
                    request.Headers.Add("Authorization",authorization);
                }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SystemTraverseUserList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all Users bound to a System, either directly or indirectly essentially traversing the JumpCloud
        /// Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this System to the corresponding User; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the User from this System.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/systems/{System_ID}/users \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="date">Current date header for the System Context API</param>
        /// <param name="authorization">Authorization header for the System Context API</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SystemTraverseUserListViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string date, string authorization, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systems/(?<system_id>[^/]+)/users$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systems/{system_id}/users'");
                }

                // replace URI parameters with values from identity
                var systemId = _match.Groups["system_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systems/"
                        + systemId
                        + "/users"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // add headers parameters
                if (null != date)
                {
                    request.Headers.Add("Date",date);
                }
                if (null != authorization)
                {
                    request.Headers.Add("Authorization",authorization);
                }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SystemTraverseUserList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="SystemTraverseUserList" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SystemTraverseUserList_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphObjectWithPaths) (JumpCloudApiSdkV2.Models.GraphObjectWithPaths.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="SystemTraverseUserList" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="systemId">ObjectID of the System.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="date">Current date header for the System Context API</param>
        /// <param name="authorization">Authorization header for the System Context API</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SystemTraverseUserList_Validate(string systemId, int? limit, int? skip, string date, string authorization, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(systemId),systemId);
                await eventListener.AssertNotNull(nameof(date),date);
                await eventListener.AssertNotNull(nameof(authorization),authorization);
            }
        }

        /// <summary>
        /// This endpoint returns the _direct_ associations of a User.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example Users and Systems.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/users/{UserID}/associations?targets=system_group \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="userId">ObjectID of the User.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="targets"></param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task UserAssociationList(string userId, int? limit, int? skip, string[] targets, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/users/"
                        + global::System.Uri.EscapeDataString(userId)
                        + "/associations"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != targets  && targets.Length > 0 ? "targets=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(targets, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.UserAssociationList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns the _direct_ associations of a User.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example Users and Systems.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/users/{UserID}/associations?targets=system_group \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="targets"></param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task UserAssociationListViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] targets, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/users/(?<user_id>[^/]+)/associations$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/users/{user_id}/associations'");
                }

                // replace URI parameters with values from identity
                var userId = _match.Groups["user_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/users/"
                        + userId
                        + "/associations"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != targets  && targets.Length > 0 ? "targets=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(targets, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.UserAssociationList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="UserAssociationList" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task UserAssociationList_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphConnection[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphConnection) (JumpCloudApiSdkV2.Models.GraphConnection.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="UserAssociationList" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="userId">ObjectID of the User.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="targets"></param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task UserAssociationList_Validate(string userId, int? limit, int? skip, string[] targets, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(userId),userId);
                await eventListener.AssertNotNull(nameof(targets), targets);
                if (targets != null ) {
                        for (int __i = 0; __i < targets.Length; __i++) {
                          await eventListener.AssertEnum($"targets[{__i}]",targets[__i],@"active_directory", @"application", @"command", @"g_suite", @"ldap_server", @"office_365", @"policy", @"radius_server", @"system", @"system_group");
                        }
                      }
            }
        }

        /// <summary>
        /// This endpoint allows you to manage the _direct_ associations of a User.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example Users and Systems.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/users/{UserID}/associations \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "attributes": {
        /// "sudo": {
        /// "enabled": true,
        /// "withoutPassword": false
        /// }
        /// },
        /// "op": "add",
        /// "type": "system_group",
        /// "id": "{GroupID}"
        /// }'
        /// </summary>
        /// <param name="userId">ObjectID of the User.</param>
        /// <param name="body">UserGraphManagementReq</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task UserAssociationSet(string userId, JumpCloudApiSdkV2.Models.IUserGraphManagementReq body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/users/"
                        + global::System.Uri.EscapeDataString(userId)
                        + "/associations"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.UserAssociationSet_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint allows you to manage the _direct_ associations of a User.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example Users and Systems.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/users/{UserID}/associations \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "attributes": {
        /// "sudo": {
        /// "enabled": true,
        /// "withoutPassword": false
        /// }
        /// },
        /// "op": "add",
        /// "type": "system_group",
        /// "id": "{GroupID}"
        /// }'
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="body">UserGraphManagementReq</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task UserAssociationSetViaIdentity(global::System.String viaIdentity, JumpCloudApiSdkV2.Models.IUserGraphManagementReq body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/users/(?<user_id>[^/]+)/associations$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/users/{user_id}/associations'");
                }

                // replace URI parameters with values from identity
                var userId = _match.Groups["user_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/users/"
                        + userId
                        + "/associations"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.UserAssociationSet_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="UserAssociationSet" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task UserAssociationSet_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.NoContent:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onNoContent(_response);
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="UserAssociationSet" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="userId">ObjectID of the User.</param>
        /// <param name="body">UserGraphManagementReq</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task UserAssociationSet_Validate(string userId, JumpCloudApiSdkV2.Models.IUserGraphManagementReq body, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(userId),userId);
                await eventListener.AssertNotNull(nameof(body), body);
                await eventListener.AssertObjectIsValid(nameof(body), body);
            }
        }

        /// <summary>
        /// This endpoint returns the _direct_ associations of this User Group.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example User Groups and Users.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/usergroups/{GroupID}/associations?targets=system \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="groupId">ObjectID of the User Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="targets"></param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task UserGroupAssociationList(string groupId, int? limit, int? skip, string[] targets, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/usergroups/"
                        + global::System.Uri.EscapeDataString(groupId)
                        + "/associations"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != targets  && targets.Length > 0 ? "targets=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(targets, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.UserGroupAssociationList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns the _direct_ associations of this User Group.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example User Groups and Users.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/usergroups/{GroupID}/associations?targets=system \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="targets"></param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task UserGroupAssociationListViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] targets, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/usergroups/(?<group_id>[^/]+)/associations$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/usergroups/{group_id}/associations'");
                }

                // replace URI parameters with values from identity
                var groupId = _match.Groups["group_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/usergroups/"
                        + groupId
                        + "/associations"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != targets  && targets.Length > 0 ? "targets=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(targets, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.UserGroupAssociationList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="UserGroupAssociationList" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task UserGroupAssociationList_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphConnection[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphConnection) (JumpCloudApiSdkV2.Models.GraphConnection.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="UserGroupAssociationList" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="groupId">ObjectID of the User Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="targets"></param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task UserGroupAssociationList_Validate(string groupId, int? limit, int? skip, string[] targets, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(groupId),groupId);
                await eventListener.AssertNotNull(nameof(targets), targets);
                if (targets != null ) {
                        for (int __i = 0; __i < targets.Length; __i++) {
                          await eventListener.AssertEnum($"targets[{__i}]",targets[__i],@"active_directory", @"application", @"command", @"g_suite", @"ldap_server", @"office_365", @"policy", @"radius_server", @"system", @"system_group");
                        }
                      }
            }
        }

        /// <summary>
        /// This endpoint manages the _direct_ associations of this User Group.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example User Groups and Users.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/usergroups/{GroupID}/associations \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "op": "add",
        /// "type": "system",
        /// "id": "{SystemID}"
        /// }'
        /// ```
        /// </summary>
        /// <param name="groupId">ObjectID of the User Group.</param>
        /// <param name="body">UserGroupGraphManagementReq</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task UserGroupAssociationSet(string groupId, JumpCloudApiSdkV2.Models.IUserGroupGraphManagementReq body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/usergroups/"
                        + global::System.Uri.EscapeDataString(groupId)
                        + "/associations"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.UserGroupAssociationSet_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint manages the _direct_ associations of this User Group.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example User Groups and Users.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/usergroups/{GroupID}/associations \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "op": "add",
        /// "type": "system",
        /// "id": "{SystemID}"
        /// }'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="body">UserGroupGraphManagementReq</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task UserGroupAssociationSetViaIdentity(global::System.String viaIdentity, JumpCloudApiSdkV2.Models.IUserGroupGraphManagementReq body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/usergroups/(?<group_id>[^/]+)/associations$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/usergroups/{group_id}/associations'");
                }

                // replace URI parameters with values from identity
                var groupId = _match.Groups["group_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/usergroups/"
                        + groupId
                        + "/associations"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.UserGroupAssociationSet_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="UserGroupAssociationSet" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task UserGroupAssociationSet_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.NoContent:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onNoContent(_response);
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="UserGroupAssociationSet" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="groupId">ObjectID of the User Group.</param>
        /// <param name="body">UserGroupGraphManagementReq</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task UserGroupAssociationSet_Validate(string groupId, JumpCloudApiSdkV2.Models.IUserGroupGraphManagementReq body, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(groupId),groupId);
                await eventListener.AssertNotNull(nameof(body), body);
                await eventListener.AssertObjectIsValid(nameof(body), body);
            }
        }

        /// <summary>
        /// This endpoint allows you to create a new User Group.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/usergroups \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "name": "{Group_Name}"
        /// }'
        /// ```
        /// </summary>
        /// <param name="body">UserGroupPost</param>
        /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task UserGroupCreate(JumpCloudApiSdkV2.Models.IUserGroupPost body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IUserGroup>, global::System.Threading.Tasks.Task> onCreated, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/usergroups"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.UserGroupCreate_Call(request,onCreated,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="UserGroupCreate" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task UserGroupCreate_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IUserGroup>, global::System.Threading.Tasks.Task> onCreated, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.Created:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onCreated(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.UserGroup.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="UserGroupCreate" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="body">UserGroupPost</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task UserGroupCreate_Validate(JumpCloudApiSdkV2.Models.IUserGroupPost body, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(body), body);
                await eventListener.AssertObjectIsValid(nameof(body), body);
            }
        }

        /// <summary>
        /// This endpoint allows you to delete a User Group.
        /// #### Sample Request
        /// ```
        /// curl -X DELETE https://console.jumpcloud.com/api/v2/usergroups/{GroupID} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="id">ObjectID of the User Group.</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task UserGroupDelete(string id, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/usergroups/"
                        + global::System.Uri.EscapeDataString(id)

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Delete, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.UserGroupDelete_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint allows you to delete a User Group.
        /// #### Sample Request
        /// ```
        /// curl -X DELETE https://console.jumpcloud.com/api/v2/usergroups/{GroupID} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task UserGroupDeleteViaIdentity(global::System.String viaIdentity, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/usergroups/(?<id>[^/]+)$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/usergroups/{id}'");
                }

                // replace URI parameters with values from identity
                var id = _match.Groups["id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/usergroups/"
                        + id

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Delete, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.UserGroupDelete_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="UserGroupDelete" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task UserGroupDelete_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.NoContent:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onNoContent(_response);
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="UserGroupDelete" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="id">ObjectID of the User Group.</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task UserGroupDelete_Validate(string id, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(id),id);
            }
        }

        /// <summary>
        /// This endpoint returns the details of a User Group.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/usergroups/{GroupID} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="id">ObjectID of the User Group.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task UserGroupGet(string id, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IUserGroup>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/usergroups/"
                        + global::System.Uri.EscapeDataString(id)

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.UserGroupGet_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns the details of a User Group.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/usergroups/{GroupID} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task UserGroupGetViaIdentity(global::System.String viaIdentity, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IUserGroup>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/usergroups/(?<id>[^/]+)$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/usergroups/{id}'");
                }

                // replace URI parameters with values from identity
                var id = _match.Groups["id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/usergroups/"
                        + id

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.UserGroupGet_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="UserGroupGet" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task UserGroupGet_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IUserGroup>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.UserGroup.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="UserGroupGet" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="id">ObjectID of the User Group.</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task UserGroupGet_Validate(string id, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(id),id);
            }
        }

        /// <summary>
        /// This endpoint returns all User Groups.
        /// Available filter fields:
        /// - `name`
        /// - `disabled`
        /// - `type`
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/usergroups \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onDefault">a delegate that is called when the remote service returns default (any response code not handled
        /// elsewhere).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task UserGroupList(string[] filter, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IUserGroup[]>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IError>, global::System.Threading.Tasks.Task> onDefault, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/usergroups"
                        + "?"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.UserGroupList_Call(request,onOk,onDefault,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns all User Groups.
        /// Available filter fields:
        /// - `name`
        /// - `disabled`
        /// - `type`
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/usergroups \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onDefault">a delegate that is called when the remote service returns default (any response code not handled
        /// elsewhere).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task UserGroupListViaIdentity(global::System.String viaIdentity, string[] filter, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IUserGroup[]>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IError>, global::System.Threading.Tasks.Task> onDefault, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/usergroups$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/usergroups'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/usergroups"
                        + "?"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.UserGroupList_Call(request,onOk,onDefault,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="UserGroupList" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onDefault">a delegate that is called when the remote service returns default (any response code not handled
        /// elsewhere).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task UserGroupList_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IUserGroup[]>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IError>, global::System.Threading.Tasks.Task> onDefault, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IUserGroup[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IUserGroup) (JumpCloudApiSdkV2.Models.UserGroup.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onDefault(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.Error.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="UserGroupList" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task UserGroupList_Validate(string[] filter, int? limit, int? skip, string[] sort, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {

            }
        }

        /// <summary>
        /// This endpoint returns the user members of a User Group.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/usergroups/{GroupID}/members \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="groupId">ObjectID of the User Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task UserGroupMembersList(string groupId, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/usergroups/"
                        + global::System.Uri.EscapeDataString(groupId)
                        + "/members"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.UserGroupMembersList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns the user members of a User Group.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/usergroups/{GroupID}/members \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task UserGroupMembersListViaIdentity(global::System.String viaIdentity, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/usergroups/(?<group_id>[^/]+)/members$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/usergroups/{group_id}/members'");
                }

                // replace URI parameters with values from identity
                var groupId = _match.Groups["group_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/usergroups/"
                        + groupId
                        + "/members"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.UserGroupMembersList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="UserGroupMembersList" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task UserGroupMembersList_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphConnection[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphConnection) (JumpCloudApiSdkV2.Models.GraphConnection.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="UserGroupMembersList" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="groupId">ObjectID of the User Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task UserGroupMembersList_Validate(string groupId, int? limit, int? skip, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(groupId),groupId);
            }
        }

        /// <summary>
        /// This endpoint allows you to manage the user members of a User Group.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/usergroups/{GroupID}/members \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "op": "add",
        /// "type": "user",
        /// "id": "{User_ID}"
        /// }'
        /// ```
        /// </summary>
        /// <param name="groupId">ObjectID of the User Group.</param>
        /// <param name="body">UserGroupMembersReq</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task UserGroupMembersSet(string groupId, JumpCloudApiSdkV2.Models.IUserGroupMembersReq body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/usergroups/"
                        + global::System.Uri.EscapeDataString(groupId)
                        + "/members"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.UserGroupMembersSet_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint allows you to manage the user members of a User Group.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/usergroups/{GroupID}/members \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "op": "add",
        /// "type": "user",
        /// "id": "{User_ID}"
        /// }'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="body">UserGroupMembersReq</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task UserGroupMembersSetViaIdentity(global::System.String viaIdentity, JumpCloudApiSdkV2.Models.IUserGroupMembersReq body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/usergroups/(?<group_id>[^/]+)/members$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/usergroups/{group_id}/members'");
                }

                // replace URI parameters with values from identity
                var groupId = _match.Groups["group_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/usergroups/"
                        + groupId
                        + "/members"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.UserGroupMembersSet_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="UserGroupMembersSet" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task UserGroupMembersSet_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.NoContent:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onNoContent(_response);
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="UserGroupMembersSet" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="groupId">ObjectID of the User Group.</param>
        /// <param name="body">UserGroupMembersReq</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task UserGroupMembersSet_Validate(string groupId, JumpCloudApiSdkV2.Models.IUserGroupMembersReq body, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(groupId),groupId);
                await eventListener.AssertNotNull(nameof(body), body);
                await eventListener.AssertObjectIsValid(nameof(body), body);
            }
        }

        /// <summary>
        /// This endpoint returns all users members that are a member of this User Group.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/usergroups/{GroupID}/membership \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="groupId">ObjectID of the User Group.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task UserGroupMembershipList(string groupId, string[] filter, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/usergroups/"
                        + global::System.Uri.EscapeDataString(groupId)
                        + "/membership"
                        + "?"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.UserGroupMembershipList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns all users members that are a member of this User Group.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/usergroups/{GroupID}/membership \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task UserGroupMembershipListViaIdentity(global::System.String viaIdentity, string[] filter, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/usergroups/(?<group_id>[^/]+)/membership$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/usergroups/{group_id}/membership'");
                }

                // replace URI parameters with values from identity
                var groupId = _match.Groups["group_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/usergroups/"
                        + groupId
                        + "/membership"
                        + "?"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.UserGroupMembershipList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="UserGroupMembershipList" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task UserGroupMembershipList_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphObjectWithPaths) (JumpCloudApiSdkV2.Models.GraphObjectWithPaths.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="UserGroupMembershipList" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="groupId">ObjectID of the User Group.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task UserGroupMembershipList_Validate(string groupId, string[] filter, int? limit, int? skip, string[] sort, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(groupId),groupId);
            }
        }

        /// <summary>
        /// This endpoint allows you to do a full update of the User Group.
        /// #### Sample Request
        /// ```
        /// curl -X PUT https://console.jumpcloud.com/api/v2/usergroups/{Group_ID} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY' \
        /// -d '{
        /// "name": "group_update"
        /// }'
        /// ```
        /// </summary>
        /// <param name="id">ObjectID of the User Group.</param>
        /// <param name="body">UserGroupPut</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task UserGroupPut(string id, JumpCloudApiSdkV2.Models.IUserGroupPut body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IUserGroup>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/usergroups/"
                        + global::System.Uri.EscapeDataString(id)

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Put, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.UserGroupPut_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint allows you to do a full update of the User Group.
        /// #### Sample Request
        /// ```
        /// curl -X PUT https://console.jumpcloud.com/api/v2/usergroups/{Group_ID} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY' \
        /// -d '{
        /// "name": "group_update"
        /// }'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="body">UserGroupPut</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task UserGroupPutViaIdentity(global::System.String viaIdentity, JumpCloudApiSdkV2.Models.IUserGroupPut body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IUserGroup>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/usergroups/(?<id>[^/]+)$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/usergroups/{id}'");
                }

                // replace URI parameters with values from identity
                var id = _match.Groups["id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/usergroups/"
                        + id

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Put, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.UserGroupPut_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="UserGroupPut" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task UserGroupPut_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IUserGroup>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.UserGroup.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="UserGroupPut" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="id">ObjectID of the User Group.</param>
        /// <param name="body">UserGroupPut</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task UserGroupPut_Validate(string id, JumpCloudApiSdkV2.Models.IUserGroupPut body, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(id),id);
                await eventListener.AssertNotNull(nameof(body), body);
                await eventListener.AssertObjectIsValid(nameof(body), body);
            }
        }

        /// <summary>
        /// This endpoint will return all Applications bound to a User Group, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this User Group to the corresponding Application; this array represents all
        /// grouping and/or associations that would have to be removed to deprovision the Application from this User Group.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/usergroups/{GroupID}/applications \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="groupId">ObjectID of the User Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task UserGroupTraverseApplicationList(string groupId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/usergroups/"
                        + global::System.Uri.EscapeDataString(groupId)
                        + "/applications"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.UserGroupTraverseApplicationList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all Applications bound to a User Group, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this User Group to the corresponding Application; this array represents all
        /// grouping and/or associations that would have to be removed to deprovision the Application from this User Group.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/usergroups/{GroupID}/applications \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task UserGroupTraverseApplicationListViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/usergroups/(?<group_id>[^/]+)/applications$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/usergroups/{group_id}/applications'");
                }

                // replace URI parameters with values from identity
                var groupId = _match.Groups["group_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/usergroups/"
                        + groupId
                        + "/applications"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.UserGroupTraverseApplicationList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="UserGroupTraverseApplicationList" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task UserGroupTraverseApplicationList_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphObjectWithPaths) (JumpCloudApiSdkV2.Models.GraphObjectWithPaths.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="UserGroupTraverseApplicationList" /> method. Call this like the actual call, but you
        /// will get validation events back.
        /// </summary>
        /// <param name="groupId">ObjectID of the User Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task UserGroupTraverseApplicationList_Validate(string groupId, int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(groupId),groupId);
            }
        }

        /// <summary>
        /// This endpoint will return all Directories bound to a User Group, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this User Group to the corresponding Directory; this array represents all
        /// grouping and/or associations that would have to be removed to deprovision the Directories from this User Group.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/usergroups/{GroupID}/directories \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="groupId">ObjectID of the User Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task UserGroupTraverseDirectoryList(string groupId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/usergroups/"
                        + global::System.Uri.EscapeDataString(groupId)
                        + "/directories"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.UserGroupTraverseDirectoryList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all Directories bound to a User Group, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this User Group to the corresponding Directory; this array represents all
        /// grouping and/or associations that would have to be removed to deprovision the Directories from this User Group.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/usergroups/{GroupID}/directories \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task UserGroupTraverseDirectoryListViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/usergroups/(?<group_id>[^/]+)/directories$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/usergroups/{group_id}/directories'");
                }

                // replace URI parameters with values from identity
                var groupId = _match.Groups["group_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/usergroups/"
                        + groupId
                        + "/directories"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.UserGroupTraverseDirectoryList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="UserGroupTraverseDirectoryList" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task UserGroupTraverseDirectoryList_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphObjectWithPaths) (JumpCloudApiSdkV2.Models.GraphObjectWithPaths.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="UserGroupTraverseDirectoryList" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="groupId">ObjectID of the User Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task UserGroupTraverseDirectoryList_Validate(string groupId, int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(groupId),groupId);
            }
        }

        /// <summary>
        /// This endpoint will return all G Suite Instances bound to a User Group, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this User Group to the corresponding G Suite instance; this array represents
        /// all grouping and/or associations that would have to be removed to deprovision the G Suite instance from this User Group.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/usergroups/{GroupID/gsuites \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="groupId">ObjectID of the User Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task UserGroupTraverseGSuiteList(string groupId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/usergroups/"
                        + global::System.Uri.EscapeDataString(groupId)
                        + "/gsuites"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.UserGroupTraverseGSuiteList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all G Suite Instances bound to a User Group, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this User Group to the corresponding G Suite instance; this array represents
        /// all grouping and/or associations that would have to be removed to deprovision the G Suite instance from this User Group.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/usergroups/{GroupID/gsuites \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task UserGroupTraverseGSuiteListViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/usergroups/(?<group_id>[^/]+)/gsuites$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/usergroups/{group_id}/gsuites'");
                }

                // replace URI parameters with values from identity
                var groupId = _match.Groups["group_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/usergroups/"
                        + groupId
                        + "/gsuites"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.UserGroupTraverseGSuiteList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="UserGroupTraverseGSuiteList" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task UserGroupTraverseGSuiteList_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphObjectWithPaths) (JumpCloudApiSdkV2.Models.GraphObjectWithPaths.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="UserGroupTraverseGSuiteList" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="groupId">ObjectID of the User Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task UserGroupTraverseGSuiteList_Validate(string groupId, int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(groupId),groupId);
            }
        }

        /// <summary>
        /// This endpoint will return all LDAP Servers bound to a User Group, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this User Group to the corresponding LDAP Server; this array represents all
        /// grouping and/or associations that would have to be removed to deprovision the LDAP Server from this User Group.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/usergroups/{GroupID}/ldapservers \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="groupId">ObjectID of the User Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task UserGroupTraverseLdapServerList(string groupId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/usergroups/"
                        + global::System.Uri.EscapeDataString(groupId)
                        + "/ldapservers"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.UserGroupTraverseLdapServerList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all LDAP Servers bound to a User Group, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this User Group to the corresponding LDAP Server; this array represents all
        /// grouping and/or associations that would have to be removed to deprovision the LDAP Server from this User Group.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/usergroups/{GroupID}/ldapservers \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task UserGroupTraverseLdapServerListViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/usergroups/(?<group_id>[^/]+)/ldapservers$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/usergroups/{group_id}/ldapservers'");
                }

                // replace URI parameters with values from identity
                var groupId = _match.Groups["group_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/usergroups/"
                        + groupId
                        + "/ldapservers"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.UserGroupTraverseLdapServerList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="UserGroupTraverseLdapServerList" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task UserGroupTraverseLdapServerList_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphObjectWithPaths) (JumpCloudApiSdkV2.Models.GraphObjectWithPaths.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="UserGroupTraverseLdapServerList" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="groupId">ObjectID of the User Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task UserGroupTraverseLdapServerList_Validate(string groupId, int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(groupId),groupId);
            }
        }

        /// <summary>
        /// This endpoint will return all Office 365 instances bound to a User Group, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this User Group to the corresponding Office 365 instance; this array represents
        /// all grouping and/or associations that would have to be removed to deprovision the Office 365 instance from this User Group.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/usergroups/{GroupID}/office365s \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="groupId">ObjectID of the User Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task UserGroupTraverseOffice365List(string groupId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/usergroups/"
                        + global::System.Uri.EscapeDataString(groupId)
                        + "/office365s"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.UserGroupTraverseOffice365List_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all Office 365 instances bound to a User Group, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this User Group to the corresponding Office 365 instance; this array represents
        /// all grouping and/or associations that would have to be removed to deprovision the Office 365 instance from this User Group.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/usergroups/{GroupID}/office365s \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task UserGroupTraverseOffice365ListViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/usergroups/(?<group_id>[^/]+)/office365s$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/usergroups/{group_id}/office365s'");
                }

                // replace URI parameters with values from identity
                var groupId = _match.Groups["group_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/usergroups/"
                        + groupId
                        + "/office365s"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.UserGroupTraverseOffice365List_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="UserGroupTraverseOffice365List" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task UserGroupTraverseOffice365List_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphObjectWithPaths) (JumpCloudApiSdkV2.Models.GraphObjectWithPaths.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="UserGroupTraverseOffice365List" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="groupId">ObjectID of the User Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task UserGroupTraverseOffice365List_Validate(string groupId, int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(groupId),groupId);
            }
        }

        /// <summary>
        /// This endpoint will return all RADIUS servers bound to a User Group, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this User Group to the corresponding RADIUS Server; this array represents
        /// all grouping and/or associations that would have to be removed to deprovision the RADIUS Server from this User Group.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/usergroups/{GroupID}/radiusservers \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="groupId">ObjectID of the User Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task UserGroupTraverseRadiusServerList(string groupId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/usergroups/"
                        + global::System.Uri.EscapeDataString(groupId)
                        + "/radiusservers"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.UserGroupTraverseRadiusServerList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all RADIUS servers bound to a User Group, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this User Group to the corresponding RADIUS Server; this array represents
        /// all grouping and/or associations that would have to be removed to deprovision the RADIUS Server from this User Group.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/usergroups/{GroupID}/radiusservers \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task UserGroupTraverseRadiusServerListViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/usergroups/(?<group_id>[^/]+)/radiusservers$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/usergroups/{group_id}/radiusservers'");
                }

                // replace URI parameters with values from identity
                var groupId = _match.Groups["group_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/usergroups/"
                        + groupId
                        + "/radiusservers"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.UserGroupTraverseRadiusServerList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="UserGroupTraverseRadiusServerList" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task UserGroupTraverseRadiusServerList_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphObjectWithPaths) (JumpCloudApiSdkV2.Models.GraphObjectWithPaths.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="UserGroupTraverseRadiusServerList" /> method. Call this like the actual call, but you
        /// will get validation events back.
        /// </summary>
        /// <param name="groupId">ObjectID of the User Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task UserGroupTraverseRadiusServerList_Validate(string groupId, int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(groupId),groupId);
            }
        }

        /// <summary>
        /// This endpoint will return all System Groups bound to a User Group, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this User Group to the corresponding System Group; this array represents all
        /// grouping and/or associations that would have to be removed to deprovision the System Group from this User Group.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/usergroups/{GroupID}/systemgroups \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="groupId">ObjectID of the User Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task UserGroupTraverseSystemGroupList(string groupId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/usergroups/"
                        + global::System.Uri.EscapeDataString(groupId)
                        + "/systemgroups"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.UserGroupTraverseSystemGroupList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all System Groups bound to a User Group, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this User Group to the corresponding System Group; this array represents all
        /// grouping and/or associations that would have to be removed to deprovision the System Group from this User Group.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/usergroups/{GroupID}/systemgroups \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task UserGroupTraverseSystemGroupListViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/usergroups/(?<group_id>[^/]+)/systemgroups$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/usergroups/{group_id}/systemgroups'");
                }

                // replace URI parameters with values from identity
                var groupId = _match.Groups["group_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/usergroups/"
                        + groupId
                        + "/systemgroups"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.UserGroupTraverseSystemGroupList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="UserGroupTraverseSystemGroupList" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task UserGroupTraverseSystemGroupList_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphObjectWithPaths) (JumpCloudApiSdkV2.Models.GraphObjectWithPaths.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="UserGroupTraverseSystemGroupList" /> method. Call this like the actual call, but you
        /// will get validation events back.
        /// </summary>
        /// <param name="groupId">ObjectID of the User Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task UserGroupTraverseSystemGroupList_Validate(string groupId, int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(groupId),groupId);
            }
        }

        /// <summary>
        /// This endpoint will return all Systems bound to a User Group, either directly or indirectly, essentially traversing the
        /// JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this User Group to the corresponding System; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the System from this User Group.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/usergroups/{GroupID}/systems \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="groupId">ObjectID of the User Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task UserGroupTraverseSystemList(string groupId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/usergroups/"
                        + global::System.Uri.EscapeDataString(groupId)
                        + "/systems"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.UserGroupTraverseSystemList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all Systems bound to a User Group, either directly or indirectly, essentially traversing the
        /// JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this User Group to the corresponding System; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the System from this User Group.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/usergroups/{GroupID}/systems \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task UserGroupTraverseSystemListViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/usergroups/(?<group_id>[^/]+)/systems$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/usergroups/{group_id}/systems'");
                }

                // replace URI parameters with values from identity
                var groupId = _match.Groups["group_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/usergroups/"
                        + groupId
                        + "/systems"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.UserGroupTraverseSystemList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="UserGroupTraverseSystemList" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task UserGroupTraverseSystemList_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphObjectWithPaths) (JumpCloudApiSdkV2.Models.GraphObjectWithPaths.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="UserGroupTraverseSystemList" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="groupId">ObjectID of the User Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task UserGroupTraverseSystemList_Validate(string groupId, int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(groupId),groupId);
            }
        }

        /// <summary>
        /// This endpoint returns all the User Groups a User is a member of.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/users/{UserID}/memberof \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="userId">ObjectID of the User.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task UserMemberOfList(string userId, string[] filter, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/users/"
                        + global::System.Uri.EscapeDataString(userId)
                        + "/memberof"
                        + "?"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.UserMemberOfList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns all the User Groups a User is a member of.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/users/{UserID}/memberof \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task UserMemberOfListViaIdentity(global::System.String viaIdentity, string[] filter, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/users/(?<user_id>[^/]+)/memberof$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/users/{user_id}/memberof'");
                }

                // replace URI parameters with values from identity
                var userId = _match.Groups["user_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/users/"
                        + userId
                        + "/memberof"
                        + "?"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.UserMemberOfList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="UserMemberOfList" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task UserMemberOfList_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphObjectWithPaths) (JumpCloudApiSdkV2.Models.GraphObjectWithPaths.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="UserMemberOfList" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="userId">ObjectID of the User.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task UserMemberOfList_Validate(string userId, string[] filter, int? limit, int? skip, string[] sort, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(userId),userId);
            }
        }

        /// <summary>
        /// This endpoint will return all Applications bound to a User, either directly or indirectly, essentially traversing the
        /// JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this User to the corresponding Application; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the Application from this User.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/users/{UserID}/applications \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="userId">ObjectID of the User.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task UserTraverseApplicationList(string userId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/users/"
                        + global::System.Uri.EscapeDataString(userId)
                        + "/applications"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.UserTraverseApplicationList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all Applications bound to a User, either directly or indirectly, essentially traversing the
        /// JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this User to the corresponding Application; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the Application from this User.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/users/{UserID}/applications \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task UserTraverseApplicationListViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/users/(?<user_id>[^/]+)/applications$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/users/{user_id}/applications'");
                }

                // replace URI parameters with values from identity
                var userId = _match.Groups["user_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/users/"
                        + userId
                        + "/applications"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.UserTraverseApplicationList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="UserTraverseApplicationList" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task UserTraverseApplicationList_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphObjectWithPaths) (JumpCloudApiSdkV2.Models.GraphObjectWithPaths.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="UserTraverseApplicationList" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="userId">ObjectID of the User.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task UserTraverseApplicationList_Validate(string userId, int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(userId),userId);
            }
        }

        /// <summary>
        /// This endpoint will return all Directories bound to a User, either directly or indirectly, essentially traversing the JumpCloud
        /// Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this User to the corresponding Directory; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the Directory from this User.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/users/{UserID}/directories \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="userId">ObjectID of the User.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task UserTraverseDirectoryList(string userId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/users/"
                        + global::System.Uri.EscapeDataString(userId)
                        + "/directories"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.UserTraverseDirectoryList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all Directories bound to a User, either directly or indirectly, essentially traversing the JumpCloud
        /// Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this User to the corresponding Directory; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the Directory from this User.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/users/{UserID}/directories \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task UserTraverseDirectoryListViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/users/(?<user_id>[^/]+)/directories$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/users/{user_id}/directories'");
                }

                // replace URI parameters with values from identity
                var userId = _match.Groups["user_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/users/"
                        + userId
                        + "/directories"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.UserTraverseDirectoryList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="UserTraverseDirectoryList" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task UserTraverseDirectoryList_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphObjectWithPaths) (JumpCloudApiSdkV2.Models.GraphObjectWithPaths.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="UserTraverseDirectoryList" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="userId">ObjectID of the User.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task UserTraverseDirectoryList_Validate(string userId, int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(userId),userId);
            }
        }

        /// <summary>
        /// This endpoint will return all G-Suite Instances bound to a User, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this User to the corresponding G Suite instance; this array represents all
        /// grouping and/or associations that would have to be removed to deprovision the G Suite instance from this User.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/users/{UserID}/gsuites \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="userId">ObjectID of the User.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task UserTraverseGSuiteList(string userId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/users/"
                        + global::System.Uri.EscapeDataString(userId)
                        + "/gsuites"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.UserTraverseGSuiteList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all G-Suite Instances bound to a User, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this User to the corresponding G Suite instance; this array represents all
        /// grouping and/or associations that would have to be removed to deprovision the G Suite instance from this User.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/users/{UserID}/gsuites \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task UserTraverseGSuiteListViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/users/(?<user_id>[^/]+)/gsuites$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/users/{user_id}/gsuites'");
                }

                // replace URI parameters with values from identity
                var userId = _match.Groups["user_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/users/"
                        + userId
                        + "/gsuites"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.UserTraverseGSuiteList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="UserTraverseGSuiteList" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task UserTraverseGSuiteList_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphObjectWithPaths) (JumpCloudApiSdkV2.Models.GraphObjectWithPaths.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="UserTraverseGSuiteList" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="userId">ObjectID of the User.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task UserTraverseGSuiteList_Validate(string userId, int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(userId),userId);
            }
        }

        /// <summary>
        /// This endpoint will return all LDAP Servers bound to a User, either directly or indirectly, essentially traversing the
        /// JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this User to the corresponding LDAP Server; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the LDAP Server from this User.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/users/{UserID}/ldapservers \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="userId">ObjectID of the User.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task UserTraverseLdapServerList(string userId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/users/"
                        + global::System.Uri.EscapeDataString(userId)
                        + "/ldapservers"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.UserTraverseLdapServerList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all LDAP Servers bound to a User, either directly or indirectly, essentially traversing the
        /// JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this User to the corresponding LDAP Server; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the LDAP Server from this User.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/users/{UserID}/ldapservers \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task UserTraverseLdapServerListViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/users/(?<user_id>[^/]+)/ldapservers$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/users/{user_id}/ldapservers'");
                }

                // replace URI parameters with values from identity
                var userId = _match.Groups["user_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/users/"
                        + userId
                        + "/ldapservers"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.UserTraverseLdapServerList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="UserTraverseLdapServerList" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task UserTraverseLdapServerList_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphObjectWithPaths) (JumpCloudApiSdkV2.Models.GraphObjectWithPaths.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="UserTraverseLdapServerList" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="userId">ObjectID of the User.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task UserTraverseLdapServerList_Validate(string userId, int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(userId),userId);
            }
        }

        /// <summary>
        /// This endpoint will return all Office 365 Instances bound to a User, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this User to the corresponding Office 365 instance; this array represents
        /// all grouping and/or associations that would have to be removed to deprovision the Office 365 instance from this User.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/users/{UserID}/office365s \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="userId">ObjectID of the User.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task UserTraverseOffice365List(string userId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/users/"
                        + global::System.Uri.EscapeDataString(userId)
                        + "/office365s"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.UserTraverseOffice365List_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all Office 365 Instances bound to a User, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this User to the corresponding Office 365 instance; this array represents
        /// all grouping and/or associations that would have to be removed to deprovision the Office 365 instance from this User.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/users/{UserID}/office365s \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task UserTraverseOffice365ListViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/users/(?<user_id>[^/]+)/office365s$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/users/{user_id}/office365s'");
                }

                // replace URI parameters with values from identity
                var userId = _match.Groups["user_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/users/"
                        + userId
                        + "/office365s"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.UserTraverseOffice365List_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="UserTraverseOffice365List" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task UserTraverseOffice365List_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphObjectWithPaths) (JumpCloudApiSdkV2.Models.GraphObjectWithPaths.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="UserTraverseOffice365List" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="userId">ObjectID of the User.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task UserTraverseOffice365List_Validate(string userId, int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(userId),userId);
            }
        }

        /// <summary>
        /// This endpoint will return all RADIUS Servers bound to a User, either directly or indirectly, essentially traversing the
        /// JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this User to the corresponding RADIUS Server; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the RADIUS Server from this User.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/users/{UserID}/radiusservers \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="userId">ObjectID of the User.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task UserTraverseRadiusServerList(string userId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/users/"
                        + global::System.Uri.EscapeDataString(userId)
                        + "/radiusservers"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.UserTraverseRadiusServerList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all RADIUS Servers bound to a User, either directly or indirectly, essentially traversing the
        /// JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this User to the corresponding RADIUS Server; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the RADIUS Server from this User.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/users/{UserID}/radiusservers \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task UserTraverseRadiusServerListViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/users/(?<user_id>[^/]+)/radiusservers$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/users/{user_id}/radiusservers'");
                }

                // replace URI parameters with values from identity
                var userId = _match.Groups["user_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/users/"
                        + userId
                        + "/radiusservers"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.UserTraverseRadiusServerList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="UserTraverseRadiusServerList" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task UserTraverseRadiusServerList_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphObjectWithPaths) (JumpCloudApiSdkV2.Models.GraphObjectWithPaths.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="UserTraverseRadiusServerList" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="userId">ObjectID of the User.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task UserTraverseRadiusServerList_Validate(string userId, int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(userId),userId);
            }
        }

        /// <summary>
        /// This endpoint will return all System Groups bound to a User, either directly or indirectly, essentially traversing the
        /// JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this User to the corresponding System Group; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the System Group from this User.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/users/{UserID}/systemgroups\
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="userId">ObjectID of the User.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task UserTraverseSystemGroupList(string userId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/users/"
                        + global::System.Uri.EscapeDataString(userId)
                        + "/systemgroups"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.UserTraverseSystemGroupList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all System Groups bound to a User, either directly or indirectly, essentially traversing the
        /// JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this User to the corresponding System Group; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the System Group from this User.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/users/{UserID}/systemgroups\
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task UserTraverseSystemGroupListViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/users/(?<user_id>[^/]+)/systemgroups$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/users/{user_id}/systemgroups'");
                }

                // replace URI parameters with values from identity
                var userId = _match.Groups["user_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/users/"
                        + userId
                        + "/systemgroups"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.UserTraverseSystemGroupList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="UserTraverseSystemGroupList" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task UserTraverseSystemGroupList_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphObjectWithPaths) (JumpCloudApiSdkV2.Models.GraphObjectWithPaths.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="UserTraverseSystemGroupList" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="userId">ObjectID of the User.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task UserTraverseSystemGroupList_Validate(string userId, int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(userId),userId);
            }
        }

        /// <summary>
        /// This endpoint will return all Systems bound to a User, either directly or indirectly, essentially traversing the JumpCloud
        /// Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this User to the corresponding System; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the System from this User.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/users/{UserID}/systems\
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="userId">ObjectID of the User.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task UserTraverseSystemList(string userId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/users/"
                        + global::System.Uri.EscapeDataString(userId)
                        + "/systems"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.UserTraverseSystemList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all Systems bound to a User, either directly or indirectly, essentially traversing the JumpCloud
        /// Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this User to the corresponding System; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the System from this User.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/users/{UserID}/systems\
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task UserTraverseSystemListViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/users/(?<user_id>[^/]+)/systems$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/users/{user_id}/systems'");
                }

                // replace URI parameters with values from identity
                var userId = _match.Groups["user_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/users/"
                        + userId
                        + "/systems"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.UserTraverseSystemList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="UserTraverseSystemList" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task UserTraverseSystemList_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IGraphObjectWithPaths[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IGraphObjectWithPaths) (JumpCloudApiSdkV2.Models.GraphObjectWithPaths.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="UserTraverseSystemList" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="userId">ObjectID of the User.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task UserTraverseSystemList_Validate(string userId, int? limit, int? skip, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(userId),userId);
            }
        }

        /// <summary>
        /// Removes any and all authorization methods from the workday instance
        /// ##### Sample Request
        /// ```
        /// curl -X DELETE https://console.jumpcloud.com/api/v2/workdays/{WorkDayID}/auth \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="workdayId"></param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task WorkdayAuthorizationRemove(string workdayId, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/workdays/"
                        + global::System.Uri.EscapeDataString(workdayId)
                        + "/auth"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Delete, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.WorkdayAuthorizationRemove_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>
        /// Removes any and all authorization methods from the workday instance
        /// ##### Sample Request
        /// ```
        /// curl -X DELETE https://console.jumpcloud.com/api/v2/workdays/{WorkDayID}/auth \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task WorkdayAuthorizationRemoveViaIdentity(global::System.String viaIdentity, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/workdays/(?<workday_id>[^/]+)/auth$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/workdays/{workday_id}/auth'");
                }

                // replace URI parameters with values from identity
                var workdayId = _match.Groups["workday_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/workdays/"
                        + workdayId
                        + "/auth"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Delete, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.WorkdayAuthorizationRemove_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="WorkdayAuthorizationRemove" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task WorkdayAuthorizationRemove_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.NoContent:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onNoContent(_response);
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="WorkdayAuthorizationRemove" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="workdayId"></param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task WorkdayAuthorizationRemove_Validate(string workdayId, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(workdayId),workdayId);
            }
        }

        /// <summary>
        /// This endpoint adds an authorization method to a workday instance.
        /// You must supply a username and password for `Basic Authentication` that is the same as your WorkDay Integrator System
        /// User. Failure to provide these credentials will result in the request being rejected.
        /// Currently `O-Auth` isn't a supported authentication protocol for WorkDay, but will be in the future.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/workdays/{WorkDayID}/auth \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "auth":{
        /// "basic": {
        /// "username": "someDeveloper",
        /// "password": "notTheRealPassword"
        /// }
        /// }
        /// }'
        /// ```
        /// </summary>
        /// <param name="workdayId"></param>
        /// <param name="body">Auth Input Object</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task WorkdayAuthorize(string workdayId, JumpCloudApiSdkV2.Models.IAuthInputObject body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/workdays/"
                        + global::System.Uri.EscapeDataString(workdayId)
                        + "/auth"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.WorkdayAuthorize_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint adds an authorization method to a workday instance.
        /// You must supply a username and password for `Basic Authentication` that is the same as your WorkDay Integrator System
        /// User. Failure to provide these credentials will result in the request being rejected.
        /// Currently `O-Auth` isn't a supported authentication protocol for WorkDay, but will be in the future.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/workdays/{WorkDayID}/auth \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "auth":{
        /// "basic": {
        /// "username": "someDeveloper",
        /// "password": "notTheRealPassword"
        /// }
        /// }
        /// }'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="body">Auth Input Object</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task WorkdayAuthorizeViaIdentity(global::System.String viaIdentity, JumpCloudApiSdkV2.Models.IAuthInputObject body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/workdays/(?<workday_id>[^/]+)/auth$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/workdays/{workday_id}/auth'");
                }

                // replace URI parameters with values from identity
                var workdayId = _match.Groups["workday_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/workdays/"
                        + workdayId
                        + "/auth"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.WorkdayAuthorize_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="WorkdayAuthorize" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task WorkdayAuthorize_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.NoContent:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onNoContent(_response);
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="WorkdayAuthorize" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="workdayId"></param>
        /// <param name="body">Auth Input Object</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task WorkdayAuthorize_Validate(string workdayId, JumpCloudApiSdkV2.Models.IAuthInputObject body, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(workdayId),workdayId);
                await eventListener.AssertNotNull(nameof(body), body);
                await eventListener.AssertObjectIsValid(nameof(body), body);
            }
        }

        /// <summary>
        /// This endpoint allows you to create a new workday instance.
        /// You must supply a username and password for `Basic Authentication` that is the same as your WorkDay Integrator System
        /// User. Failure to provide these credentials will result in the request being rejected.
        /// Currently `O-Auth` isn't a supported authentication protocol for WorkDay, but will be in the future.
        /// Currently, only one instance is allowed and it must be `Workday Import`.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/workdays/ \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "name": "Workday2",
        /// "reportUrl":"https://workday.com/ccx/service/customreport2/gms/user/reportname?format=json",
        /// "auth": {
        /// "basic": {
        /// "username": "someDeveloper",
        /// "password": "notTheRealPassword"
        /// }
        /// }
        /// }'
        /// ```
        /// </summary>
        /// <param name="body">Workday Input</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task WorkdayCreate(JumpCloudApiSdkV2.Models.IWorkdayInput body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IWorkdayOutput>, global::System.Threading.Tasks.Task> onCreated, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/workdays"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.WorkdayCreate_Call(request,onOk,onCreated,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="WorkdayCreate" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task WorkdayCreate_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IWorkdayOutput>, global::System.Threading.Tasks.Task> onCreated, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response);
                            break;
                        }
                        case global::System.Net.HttpStatusCode.Created:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onCreated(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.WorkdayOutput.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="WorkdayCreate" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="body">Workday Input</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task WorkdayCreate_Validate(JumpCloudApiSdkV2.Models.IWorkdayInput body, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(body), body);
                await eventListener.AssertObjectIsValid(nameof(body), body);
            }
        }

        /// <summary>
        /// This endpoint will return all the available information about an instance of Workday.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/workdays/ \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="id"></param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task WorkdayGet(string id, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IWorkdayOutput>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/workdays/"
                        + global::System.Uri.EscapeDataString(id)

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.WorkdayGet_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all the available information about an instance of Workday.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/workdays/ \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task WorkdayGetViaIdentity(global::System.String viaIdentity, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IWorkdayOutput>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/workdays/(?<id>[^/]+)$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/workdays/{id}'");
                }

                // replace URI parameters with values from identity
                var id = _match.Groups["id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/workdays/"
                        + id

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.WorkdayGet_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="WorkdayGet" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task WorkdayGet_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IWorkdayOutput>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.WorkdayOutput.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="WorkdayGet" /> method. Call this like the actual call, but you will get validation events
        /// back.
        /// </summary>
        /// <param name="id"></param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task WorkdayGet_Validate(string id, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(id),id);
            }
        }

        /// <summary>
        /// The endpoint allows you to create a Workday Import request.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/workdays/{WorkdayID}/import \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '[
        /// {
        /// "email":"{email}",
        /// "firstname":"{firstname}",
        /// "lastname":"{firstname}",
        /// "username":"{username}",
        /// "attributes":[
        /// {"name":"EmployeeID","value":"0000"},
        /// {"name":"WorkdayID","value":"name.name"}
        /// ]
        ///
        /// }
        /// ]
        /// ```
        /// </summary>
        /// <param name="workdayId"></param>
        /// <param name="body"></param>
        /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task WorkdayImport(string workdayId, JumpCloudApiSdkV2.Models.IBulkUserCreate[] body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IJobId>, global::System.Threading.Tasks.Task> onCreated, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/workdays/"
                        + global::System.Uri.EscapeDataString(workdayId)
                        + "/import"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? new JumpCloudApiSdkV2.Runtime.Json.XNodeArray(null != body ? new JumpCloudApiSdkV2.Runtime.Json.XNodeArray(global::System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Select(body, (__x) => __x?.ToJson(null, JumpCloudApiSdkV2.Runtime.SerializationMode.None)))) : null).ToString() : global::System.String.Empty, global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.WorkdayImport_Call(request,onCreated,eventListener,sender);
            }
        }

        /// <summary>
        /// The endpoint allows you to create a Workday Import request.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/workdays/{WorkdayID}/import \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '[
        /// {
        /// "email":"{email}",
        /// "firstname":"{firstname}",
        /// "lastname":"{firstname}",
        /// "username":"{username}",
        /// "attributes":[
        /// {"name":"EmployeeID","value":"0000"},
        /// {"name":"WorkdayID","value":"name.name"}
        /// ]
        ///
        /// }
        /// ]
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="body"></param>
        /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task WorkdayImportViaIdentity(global::System.String viaIdentity, JumpCloudApiSdkV2.Models.IBulkUserCreate[] body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IJobId>, global::System.Threading.Tasks.Task> onCreated, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/workdays/(?<workday_id>[^/]+)/import$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/workdays/{workday_id}/import'");
                }

                // replace URI parameters with values from identity
                var workdayId = _match.Groups["workday_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/workdays/"
                        + workdayId
                        + "/import"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? new JumpCloudApiSdkV2.Runtime.Json.XNodeArray(null != body ? new JumpCloudApiSdkV2.Runtime.Json.XNodeArray(global::System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Select(body, (__x) => __x?.ToJson(null, JumpCloudApiSdkV2.Runtime.SerializationMode.None)))) : null).ToString() : global::System.String.Empty, global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.WorkdayImport_Call(request,onCreated,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="WorkdayImport" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task WorkdayImport_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IJobId>, global::System.Threading.Tasks.Task> onCreated, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.Created:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onCreated(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.JobId.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="WorkdayImport" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="workdayId"></param>
        /// <param name="body"></param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task WorkdayImport_Validate(string workdayId, JumpCloudApiSdkV2.Models.IBulkUserCreate[] body, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(workdayId),workdayId);
                if (body != null ) {
                        for (int __i = 0; __i < body.Length; __i++) {
                          await eventListener.AssertObjectIsValid($"body[{__i}]", body[__i]);
                        }
                      }
            }
        }

        /// <summary>
        /// This endpoint will return all the available information about all your instances of Workday.
        /// ##### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/workdays/ \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task WorkdayList(int? limit, int? skip, string[] sort, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IWorkdayOutput[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/workdays"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.WorkdayList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all the available information about all your instances of Workday.
        /// ##### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/workdays/ \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task WorkdayListViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] sort, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IWorkdayOutput[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/workdays$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/workdays'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/workdays"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.WorkdayList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="WorkdayList" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task WorkdayList_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IWorkdayOutput[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IWorkdayOutput[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IWorkdayOutput) (JumpCloudApiSdkV2.Models.WorkdayOutput.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="WorkdayList" /> method. Call this like the actual call, but you will get validation events
        /// back.
        /// </summary>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task WorkdayList_Validate(int? limit, int? skip, string[] sort, string[] filter, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {

            }
        }

        /// <summary>
        /// This endpoint allows you to update the name and Custom Report URL for a Workday Instance.
        /// Currently, the name can not be changed from the default of `Workday Import`.
        /// ##### Sample Request
        /// ```
        /// curl -X PUT https://console.jumpcloud.com/api/v2/workdays/{WorkdayID} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "reportUrl":"{Report_URL}",
        /// "name":"{Name}"
        /// } '
        /// ```
        /// </summary>
        /// <param name="id"></param>
        /// <param name="body">Workday Fields</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task WorkdayPut(string id, JumpCloudApiSdkV2.Models.IWorkdayFields body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IWorkdayOutput>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/workdays/"
                        + global::System.Uri.EscapeDataString(id)

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Put, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.WorkdayPut_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint allows you to update the name and Custom Report URL for a Workday Instance.
        /// Currently, the name can not be changed from the default of `Workday Import`.
        /// ##### Sample Request
        /// ```
        /// curl -X PUT https://console.jumpcloud.com/api/v2/workdays/{WorkdayID} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "reportUrl":"{Report_URL}",
        /// "name":"{Name}"
        /// } '
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="body">Workday Fields</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task WorkdayPutViaIdentity(global::System.String viaIdentity, JumpCloudApiSdkV2.Models.IWorkdayFields body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IWorkdayOutput>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/workdays/(?<id>[^/]+)$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/workdays/{id}'");
                }

                // replace URI parameters with values from identity
                var id = _match.Groups["id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/workdays/"
                        + id

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Put, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.WorkdayPut_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="WorkdayPut" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task WorkdayPut_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IWorkdayOutput>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloudApiSdkV2.Models.WorkdayOutput.FromJson(JumpCloudApiSdkV2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="WorkdayPut" /> method. Call this like the actual call, but you will get validation events
        /// back.
        /// </summary>
        /// <param name="id"></param>
        /// <param name="body">Workday Fields</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task WorkdayPut_Validate(string id, JumpCloudApiSdkV2.Models.IWorkdayFields body, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(id),id);
                await eventListener.AssertNotNull(nameof(body), body);
                await eventListener.AssertObjectIsValid(nameof(body), body);
            }
        }

        /// <summary>
        /// This endpoint provides a list of job results from the workday import and will contain all imported data from Workday.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/workdays/{WorkdayID}/import/{ImportJobID}/results \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="id"></param>
        /// <param name="jobId"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task WorkdayResultImport(string id, string jobId, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IJobWorkresult[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/workdays/"
                        + global::System.Uri.EscapeDataString(id)
                        + "/import/"
                        + global::System.Uri.EscapeDataString(jobId)
                        + "/results"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.WorkdayResultImport_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint provides a list of job results from the workday import and will contain all imported data from Workday.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/workdays/{WorkdayID}/import/{ImportJobID}/results \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task WorkdayResultImportViaIdentity(global::System.String viaIdentity, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IJobWorkresult[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/workdays/(?<id>[^/]+)/import/(?<job_id>[^/]+)/results$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/workdays/{id}/import/{job_id}/results'");
                }

                // replace URI parameters with values from identity
                var id = _match.Groups["id"].Value;
                var jobId = _match.Groups["job_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/workdays/"
                        + id
                        + "/import/"
                        + jobId
                        + "/results"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.WorkdayResultImport_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="WorkdayResultImport" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task WorkdayResultImport_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IJobWorkresult[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IJobWorkresult[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IJobWorkresult) (JumpCloudApiSdkV2.Models.JobWorkresult.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="WorkdayResultImport" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="id"></param>
        /// <param name="jobId"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task WorkdayResultImport_Validate(string id, string jobId, int? limit, int? skip, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(id),id);
                await eventListener.AssertNotNull(nameof(jobId),jobId);
            }
        }

        /// <summary>
        /// This endpoint will return all of the data in your WorkDay Custom Report that has been associated with your WorkDay Instance
        /// in JumpCloud.
        /// ##### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/workdays/{WorkDayID}/workers \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="workdayId"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task WorkdayWorkerList(string workdayId, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IWorkdayWorker[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/workdays/"
                        + global::System.Uri.EscapeDataString(workdayId)
                        + "/workers"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.WorkdayWorkerList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all of the data in your WorkDay Custom Report that has been associated with your WorkDay Instance
        /// in JumpCloud.
        /// ##### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/workdays/{WorkDayID}/workers \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity">FIXME: Parameter viaIdentity is MISSING DESCRIPTION</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task WorkdayWorkerListViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IWorkdayWorker[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/workdays/(?<workday_id>[^/]+)/workers$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/workdays/{workday_id}/workers'");
                }

                // replace URI parameters with values from identity
                var workdayId = _match.Groups["workday_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/workdays/"
                        + workdayId
                        + "/workers"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloudApiSdkV2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.WorkdayWorkerList_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="WorkdayWorkerList" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloudApiSdkV2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task WorkdayWorkerList_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloudApiSdkV2.Models.IWorkdayWorker[]>, global::System.Threading.Tasks.Task> onOk, JumpCloudApiSdkV2.Runtime.IEventListener eventListener, JumpCloudApiSdkV2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloudApiSdkV2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloudApiSdkV2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloudApiSdkV2.Models.IWorkdayWorker[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloudApiSdkV2.Models.IWorkdayWorker) (JumpCloudApiSdkV2.Models.WorkdayWorker.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloudApiSdkV2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloudApiSdkV2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="WorkdayWorkerList" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="workdayId"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="eventListener">an <see cref="JumpCloudApiSdkV2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task WorkdayWorkerList_Validate(string workdayId, int? limit, int? skip, string[] sort, JumpCloudApiSdkV2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(workdayId),workdayId);
            }
        }
    }
}