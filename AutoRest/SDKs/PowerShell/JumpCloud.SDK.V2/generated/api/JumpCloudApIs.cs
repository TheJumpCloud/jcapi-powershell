// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.0.6231, generator: {generator})
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace JumpCloud.SDK.V2
{
    using static JumpCloud.SDK.V2.Runtime.Extensions;

    /// <summary>
    /// Low-level API implementation for the JumpCloud APIs service.
    /// </summary>
    public partial class JumpCloudApIs
    {

        /// <summary>
        /// This endpoint adds an authorization method to a workday instance.
        /// You must supply a username and password for `Basic Authentication` that is the same as your WorkDay Integrator System
        /// User. Failure to provide these credentials will result in the request being rejected.
        /// Currently `O-Auth` isn't a supported authentication protocol for WorkDay, but will be in the future.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/workdays/{WorkDayID}/auth \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "auth":{
        /// "basic": {
        /// "username": "someDeveloper",
        /// "password": "notTheRealPassword"
        /// }
        /// }
        /// }'
        /// ```
        /// </summary>
        /// <param name="workdayId"></param>
        /// <param name="body">Auth Input Object</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task AuthorizeWorkday(string workdayId, JumpCloud.SDK.V2.Models.IAuthInputObject body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/workdays/"
                        + global::System.Uri.EscapeDataString(workdayId)
                        + "/auth"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.AuthorizeWorkday_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint adds an authorization method to a workday instance.
        /// You must supply a username and password for `Basic Authentication` that is the same as your WorkDay Integrator System
        /// User. Failure to provide these credentials will result in the request being rejected.
        /// Currently `O-Auth` isn't a supported authentication protocol for WorkDay, but will be in the future.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/workdays/{WorkDayID}/auth \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "auth":{
        /// "basic": {
        /// "username": "someDeveloper",
        /// "password": "notTheRealPassword"
        /// }
        /// }
        /// }'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="body">Auth Input Object</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task AuthorizeWorkdayViaIdentity(global::System.String viaIdentity, JumpCloud.SDK.V2.Models.IAuthInputObject body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/workdays/(?<workday_id>[^/]+)/auth$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/workdays/{workday_id}/auth'");
                }

                // replace URI parameters with values from identity
                var workdayId = _match.Groups["workday_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/workdays/"
                        + workdayId
                        + "/auth"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.AuthorizeWorkday_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="AuthorizeWorkday" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task AuthorizeWorkday_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.NoContent:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onNoContent(_response);
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="AuthorizeWorkday" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="workdayId"></param>
        /// <param name="body">Auth Input Object</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task AuthorizeWorkday_Validate(string workdayId, JumpCloud.SDK.V2.Models.IAuthInputObject body, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(workdayId),workdayId);
                await eventListener.AssertNotNull(nameof(body), body);
                await eventListener.AssertObjectIsValid(nameof(body), body);
            }
        }

        /// <summary>
        /// The endpoint allows you to create a bulk job to asynchronously create users. See [Create a System User](https://docs.jumpcloud.com/1.0/systemusers/create-a-system-user)
        /// for full list of attributes.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/bulk/users \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '[
        /// {
        /// "email":"{email}",
        /// "firstname":"{firstname}",
        /// "lastname":"{firstname}",
        /// "username":"{username}",
        /// "attributes":[
        /// {"name":"EmployeeID","value":"0000"},
        /// {"name":"Custom","value":"attribute"}
        /// ]
        /// }
        /// ]
        /// ```
        /// </summary>
        /// <param name="body"></param>
        /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task CreateBulkUsers(JumpCloud.SDK.V2.Models.IBulkUserCreate[] body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IJobId>, global::System.Threading.Tasks.Task> onCreated, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/bulk/users"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? new JumpCloud.SDK.V2.Runtime.Json.XNodeArray(global::System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Select(body, (__x) => __x?.ToJson(null, JumpCloud.SDK.V2.Runtime.SerializationMode.None)))) : null, global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.CreateBulkUsers_Call(request,onCreated,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="CreateBulkUsers" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task CreateBulkUsers_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IJobId>, global::System.Threading.Tasks.Task> onCreated, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.Created:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onCreated(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloud.SDK.V2.Models.JobId.FromJson(JumpCloud.SDK.V2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="CreateBulkUsers" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="body"></param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task CreateBulkUsers_Validate(JumpCloud.SDK.V2.Models.IBulkUserCreate[] body, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                if (body != null ) {
                        for (int __i = 0; __i < body.Length; __i++) {
                          await eventListener.AssertObjectIsValid($"body[{__i}]", body[__i]);
                        }
                      }
            }
        }

        /// <summary>
        /// Registers a Duo account for an organization. Only one Duo account will be allowed,
        /// in case an organization has a Duo account already a 409 (Conflict) code will be returned.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/duo/accounts \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{}'
        /// ```
        /// </summary>
        /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        /// <param name="onBadRequest">a delegate that is called when the remote service returns 400 (BadRequest).</param>
        /// <param name="onUnauthorized">a delegate that is called when the remote service returns 401 (Unauthorized).</param>
        /// <param name="onForbidden">a delegate that is called when the remote service returns 403 (Forbidden).</param>
        /// <param name="onNotFound">a delegate that is called when the remote service returns 404 (NotFound).</param>
        /// <param name="onConflict">a delegate that is called when the remote service returns 409 (Conflict).</param>
        /// <param name="onInternalServerError">a delegate that is called when the remote service returns 500 (InternalServerError).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task CreateDuoAccount(global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IDuoAccount>, global::System.Threading.Tasks.Task> onCreated, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onBadRequest, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onUnauthorized, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onForbidden, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onNotFound, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onConflict, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onInternalServerError, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/duo/accounts"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.CreateDuoAccount_Call(request,onCreated,onBadRequest,onUnauthorized,onForbidden,onNotFound,onConflict,onInternalServerError,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="CreateDuoAccount" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        /// <param name="onBadRequest">a delegate that is called when the remote service returns 400 (BadRequest).</param>
        /// <param name="onUnauthorized">a delegate that is called when the remote service returns 401 (Unauthorized).</param>
        /// <param name="onForbidden">a delegate that is called when the remote service returns 403 (Forbidden).</param>
        /// <param name="onNotFound">a delegate that is called when the remote service returns 404 (NotFound).</param>
        /// <param name="onConflict">a delegate that is called when the remote service returns 409 (Conflict).</param>
        /// <param name="onInternalServerError">a delegate that is called when the remote service returns 500 (InternalServerError).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task CreateDuoAccount_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IDuoAccount>, global::System.Threading.Tasks.Task> onCreated, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onBadRequest, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onUnauthorized, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onForbidden, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onNotFound, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onConflict, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onInternalServerError, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.Created:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onCreated(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloud.SDK.V2.Models.DuoAccount.FromJson(JumpCloud.SDK.V2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.BadRequest:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onBadRequest(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloud.SDK.V2.Models.Errorresponse.FromJson(JumpCloud.SDK.V2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.Unauthorized:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onUnauthorized(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloud.SDK.V2.Models.Errorresponse.FromJson(JumpCloud.SDK.V2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.Forbidden:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onForbidden(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloud.SDK.V2.Models.Errorresponse.FromJson(JumpCloud.SDK.V2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.NotFound:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onNotFound(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloud.SDK.V2.Models.Errorresponse.FromJson(JumpCloud.SDK.V2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.Conflict:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onConflict(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloud.SDK.V2.Models.Errorresponse.FromJson(JumpCloud.SDK.V2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.InternalServerError:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onInternalServerError(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloud.SDK.V2.Models.Errorresponse.FromJson(JumpCloud.SDK.V2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="CreateDuoAccount" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task CreateDuoAccount_Validate(JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {

            }
        }

        /// <summary>
        /// Creates a Duo application for your organization and the specified account.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/duo/accounts/{ACCOUNT_ID}/applications \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "name": "Application Name",
        /// "apiHost": "api-1234.duosecurity.com",
        /// "integrationKey": "1234",
        /// "secretKey": "5678"
        /// }'
        /// ```
        /// </summary>
        /// <param name="accountId"></param>
        /// <param name="body">DuoApplicationReq</param>
        /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        /// <param name="onBadRequest">a delegate that is called when the remote service returns 400 (BadRequest).</param>
        /// <param name="onUnauthorized">a delegate that is called when the remote service returns 401 (Unauthorized).</param>
        /// <param name="onForbidden">a delegate that is called when the remote service returns 403 (Forbidden).</param>
        /// <param name="onNotFound">a delegate that is called when the remote service returns 404 (NotFound).</param>
        /// <param name="onConflict">a delegate that is called when the remote service returns 409 (Conflict).</param>
        /// <param name="onInternalServerError">a delegate that is called when the remote service returns 500 (InternalServerError).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task CreateDuoApplication(string accountId, JumpCloud.SDK.V2.Models.IDuoApplicationReq body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IDuoApplication>, global::System.Threading.Tasks.Task> onCreated, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onBadRequest, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onUnauthorized, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onForbidden, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onNotFound, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onConflict, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onInternalServerError, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/duo/accounts/"
                        + global::System.Uri.EscapeDataString(accountId)
                        + "/applications"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.CreateDuoApplication_Call(request,onCreated,onBadRequest,onUnauthorized,onForbidden,onNotFound,onConflict,onInternalServerError,eventListener,sender);
            }
        }

        /// <summary>
        /// Creates a Duo application for your organization and the specified account.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/duo/accounts/{ACCOUNT_ID}/applications \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "name": "Application Name",
        /// "apiHost": "api-1234.duosecurity.com",
        /// "integrationKey": "1234",
        /// "secretKey": "5678"
        /// }'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="body">DuoApplicationReq</param>
        /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        /// <param name="onBadRequest">a delegate that is called when the remote service returns 400 (BadRequest).</param>
        /// <param name="onUnauthorized">a delegate that is called when the remote service returns 401 (Unauthorized).</param>
        /// <param name="onForbidden">a delegate that is called when the remote service returns 403 (Forbidden).</param>
        /// <param name="onNotFound">a delegate that is called when the remote service returns 404 (NotFound).</param>
        /// <param name="onConflict">a delegate that is called when the remote service returns 409 (Conflict).</param>
        /// <param name="onInternalServerError">a delegate that is called when the remote service returns 500 (InternalServerError).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task CreateDuoApplicationViaIdentity(global::System.String viaIdentity, JumpCloud.SDK.V2.Models.IDuoApplicationReq body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IDuoApplication>, global::System.Threading.Tasks.Task> onCreated, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onBadRequest, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onUnauthorized, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onForbidden, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onNotFound, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onConflict, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onInternalServerError, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/duo/accounts/(?<account_id>[^/]+)/applications$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/duo/accounts/{account_id}/applications'");
                }

                // replace URI parameters with values from identity
                var accountId = _match.Groups["account_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/duo/accounts/"
                        + accountId
                        + "/applications"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.CreateDuoApplication_Call(request,onCreated,onBadRequest,onUnauthorized,onForbidden,onNotFound,onConflict,onInternalServerError,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="CreateDuoApplication" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        /// <param name="onBadRequest">a delegate that is called when the remote service returns 400 (BadRequest).</param>
        /// <param name="onUnauthorized">a delegate that is called when the remote service returns 401 (Unauthorized).</param>
        /// <param name="onForbidden">a delegate that is called when the remote service returns 403 (Forbidden).</param>
        /// <param name="onNotFound">a delegate that is called when the remote service returns 404 (NotFound).</param>
        /// <param name="onConflict">a delegate that is called when the remote service returns 409 (Conflict).</param>
        /// <param name="onInternalServerError">a delegate that is called when the remote service returns 500 (InternalServerError).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task CreateDuoApplication_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IDuoApplication>, global::System.Threading.Tasks.Task> onCreated, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onBadRequest, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onUnauthorized, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onForbidden, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onNotFound, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onConflict, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onInternalServerError, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.Created:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onCreated(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloud.SDK.V2.Models.DuoApplication.FromJson(JumpCloud.SDK.V2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.BadRequest:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onBadRequest(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloud.SDK.V2.Models.Errorresponse.FromJson(JumpCloud.SDK.V2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.Unauthorized:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onUnauthorized(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloud.SDK.V2.Models.Errorresponse.FromJson(JumpCloud.SDK.V2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.Forbidden:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onForbidden(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloud.SDK.V2.Models.Errorresponse.FromJson(JumpCloud.SDK.V2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.NotFound:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onNotFound(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloud.SDK.V2.Models.Errorresponse.FromJson(JumpCloud.SDK.V2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.Conflict:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onConflict(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloud.SDK.V2.Models.Errorresponse.FromJson(JumpCloud.SDK.V2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.InternalServerError:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onInternalServerError(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloud.SDK.V2.Models.Errorresponse.FromJson(JumpCloud.SDK.V2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="CreateDuoApplication" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="accountId"></param>
        /// <param name="body">DuoApplicationReq</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task CreateDuoApplication_Validate(string accountId, JumpCloud.SDK.V2.Models.IDuoApplicationReq body, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(accountId),accountId);
                await eventListener.AssertNotNull(nameof(body), body);
                await eventListener.AssertObjectIsValid(nameof(body), body);
            }
        }

        /// <summary>
        /// This endpoint allows you to create a translation rule for a specific G Suite instance. These rules specify how JumpCloud
        /// attributes translate to [G Suite Admin SDK](https://developers.google.com/admin-sdk/directory/) attributes.
        /// ##### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/gsuites/{gsuite_id}/translationrules \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// {Translation Rule Parameters}
        /// }'
        /// ```
        /// </summary>
        /// <param name="gsuiteId"></param>
        /// <param name="body">G Suite Translation Rule Request</param>
        /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task CreateGSuiteTranslationRule(string gsuiteId, JumpCloud.SDK.V2.Models.IGSuiteTranslationRuleRequest body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGSuiteTranslationRule>, global::System.Threading.Tasks.Task> onCreated, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/gsuites/"
                        + global::System.Uri.EscapeDataString(gsuiteId)
                        + "/translationrules"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.CreateGSuiteTranslationRule_Call(request,onCreated,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint allows you to create a translation rule for a specific G Suite instance. These rules specify how JumpCloud
        /// attributes translate to [G Suite Admin SDK](https://developers.google.com/admin-sdk/directory/) attributes.
        /// ##### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/gsuites/{gsuite_id}/translationrules \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// {Translation Rule Parameters}
        /// }'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="body">G Suite Translation Rule Request</param>
        /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task CreateGSuiteTranslationRuleViaIdentity(global::System.String viaIdentity, JumpCloud.SDK.V2.Models.IGSuiteTranslationRuleRequest body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGSuiteTranslationRule>, global::System.Threading.Tasks.Task> onCreated, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/gsuites/(?<gsuite_id>[^/]+)/translationrules$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/gsuites/{gsuite_id}/translationrules'");
                }

                // replace URI parameters with values from identity
                var gsuiteId = _match.Groups["gsuite_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/gsuites/"
                        + gsuiteId
                        + "/translationrules"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.CreateGSuiteTranslationRule_Call(request,onCreated,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="CreateGSuiteTranslationRule" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task CreateGSuiteTranslationRule_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGSuiteTranslationRule>, global::System.Threading.Tasks.Task> onCreated, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.Created:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onCreated(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloud.SDK.V2.Models.GSuiteTranslationRule.FromJson(JumpCloud.SDK.V2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="CreateGSuiteTranslationRule" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="gsuiteId"></param>
        /// <param name="body">G Suite Translation Rule Request</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task CreateGSuiteTranslationRule_Validate(string gsuiteId, JumpCloud.SDK.V2.Models.IGSuiteTranslationRuleRequest body, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(gsuiteId),gsuiteId);
                await eventListener.AssertNotNull(nameof(body), body);
                await eventListener.AssertObjectIsValid(nameof(body), body);
            }
        }

        /// <summary>
        /// This endpoint allows you to create a samba domain for an LDAP server.
        /// ##### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/ldapservers/{LDAP_ID}/sambadomains \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "sid":"{SID_ID}",
        /// "name":"{WORKGROUP_NAME}"
        /// }'
        /// ```
        /// </summary>
        /// <param name="ldapserverId">Unique identifier of the LDAP server.</param>
        /// <param name="contentType"></param>
        /// <param name="accept"></param>
        /// <param name="body">Samba Domain Input</param>
        /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task CreateLdapServerSambaDomain(string ldapserverId, string contentType, string accept, JumpCloud.SDK.V2.Models.ISambaDomainInput body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISambaDomainOutput>, global::System.Threading.Tasks.Task> onCreated, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/ldapservers/"
                        + global::System.Uri.EscapeDataString(ldapserverId)
                        + "/sambadomains"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // add headers parameters
                if (null != contentType)
                {
                    request.Headers.Add("Content-Type",contentType);
                }
                if (null != accept)
                {
                    request.Headers.Add("Accept",accept);
                }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.CreateLdapServerSambaDomain_Call(request,onCreated,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint allows you to create a samba domain for an LDAP server.
        /// ##### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/ldapservers/{LDAP_ID}/sambadomains \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "sid":"{SID_ID}",
        /// "name":"{WORKGROUP_NAME}"
        /// }'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="contentType"></param>
        /// <param name="accept"></param>
        /// <param name="body">Samba Domain Input</param>
        /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task CreateLdapServerSambaDomainViaIdentity(global::System.String viaIdentity, string contentType, string accept, JumpCloud.SDK.V2.Models.ISambaDomainInput body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISambaDomainOutput>, global::System.Threading.Tasks.Task> onCreated, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/ldapservers/(?<ldapserver_id>[^/]+)/sambadomains$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/ldapservers/{ldapserver_id}/sambadomains'");
                }

                // replace URI parameters with values from identity
                var ldapserverId = _match.Groups["ldapserver_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/ldapservers/"
                        + ldapserverId
                        + "/sambadomains"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // add headers parameters
                if (null != contentType)
                {
                    request.Headers.Add("Content-Type",contentType);
                }
                if (null != accept)
                {
                    request.Headers.Add("Accept",accept);
                }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.CreateLdapServerSambaDomain_Call(request,onCreated,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="CreateLdapServerSambaDomain" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task CreateLdapServerSambaDomain_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISambaDomainOutput>, global::System.Threading.Tasks.Task> onCreated, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.Created:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onCreated(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloud.SDK.V2.Models.SambaDomainOutput.FromJson(JumpCloud.SDK.V2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="CreateLdapServerSambaDomain" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="ldapserverId">Unique identifier of the LDAP server.</param>
        /// <param name="contentType"></param>
        /// <param name="accept"></param>
        /// <param name="body">Samba Domain Input</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task CreateLdapServerSambaDomain_Validate(string ldapserverId, string contentType, string accept, JumpCloud.SDK.V2.Models.ISambaDomainInput body, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(ldapserverId),ldapserverId);
                await eventListener.AssertNotNull(nameof(contentType),contentType);
                await eventListener.AssertNotNull(nameof(accept),accept);
                await eventListener.AssertNotNull(nameof(body), body);
                await eventListener.AssertObjectIsValid(nameof(body), body);
            }
        }

        /// <summary>
        /// This endpoint allows you to create a translation rule for a specific Office 365 instance. These rules specify how JumpCloud
        /// attributes translate to [Microsoft Graph](https://developer.microsoft.com/en-us/graph) attributes.
        /// ##### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/office365s/{office365_id}/translationrules \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// {Translation Rule Parameters}
        /// }'
        /// ```
        /// </summary>
        /// <param name="office365Id"></param>
        /// <param name="body">Office 365 Translation Rule Request</param>
        /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task CreateOffice365TranslationRule(string office365Id, JumpCloud.SDK.V2.Models.IOffice365TranslationRuleRequest body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IOffice365TranslationRule>, global::System.Threading.Tasks.Task> onCreated, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/office365s/"
                        + global::System.Uri.EscapeDataString(office365Id)
                        + "/translationrules"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.CreateOffice365TranslationRule_Call(request,onCreated,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint allows you to create a translation rule for a specific Office 365 instance. These rules specify how JumpCloud
        /// attributes translate to [Microsoft Graph](https://developer.microsoft.com/en-us/graph) attributes.
        /// ##### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/office365s/{office365_id}/translationrules \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// {Translation Rule Parameters}
        /// }'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="body">Office 365 Translation Rule Request</param>
        /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task CreateOffice365TranslationRuleViaIdentity(global::System.String viaIdentity, JumpCloud.SDK.V2.Models.IOffice365TranslationRuleRequest body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IOffice365TranslationRule>, global::System.Threading.Tasks.Task> onCreated, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/office365s/(?<office365_id>[^/]+)/translationrules$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/office365s/{office365_id}/translationrules'");
                }

                // replace URI parameters with values from identity
                var office365Id = _match.Groups["office365_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/office365s/"
                        + office365Id
                        + "/translationrules"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.CreateOffice365TranslationRule_Call(request,onCreated,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="CreateOffice365TranslationRule" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task CreateOffice365TranslationRule_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IOffice365TranslationRule>, global::System.Threading.Tasks.Task> onCreated, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.Created:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onCreated(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloud.SDK.V2.Models.Office365TranslationRule.FromJson(JumpCloud.SDK.V2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="CreateOffice365TranslationRule" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="office365Id"></param>
        /// <param name="body">Office 365 Translation Rule Request</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task CreateOffice365TranslationRule_Validate(string office365Id, JumpCloud.SDK.V2.Models.IOffice365TranslationRuleRequest body, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(office365Id),office365Id);
                await eventListener.AssertNotNull(nameof(body), body);
                await eventListener.AssertObjectIsValid(nameof(body), body);
            }
        }

        /// <summary>
        /// This endpoint allows you to create a policy. Given the amount of configurable parameters required to create a Policy,
        /// we suggest you use the JumpCloud Admin Console to create new policies.
        /// ##### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/policies \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// {Policy_Parameters}
        /// }'
        /// ```
        /// </summary>
        /// <param name="body">An instance of a policy template.</param>
        /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task CreatePolicy(JumpCloud.SDK.V2.Models.IPolicyRequest body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IPolicyWithDetails>, global::System.Threading.Tasks.Task> onCreated, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/policies"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.CreatePolicy_Call(request,onCreated,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="CreatePolicy" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task CreatePolicy_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IPolicyWithDetails>, global::System.Threading.Tasks.Task> onCreated, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.Created:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onCreated(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloud.SDK.V2.Models.PolicyWithDetails.FromJson(JumpCloud.SDK.V2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="CreatePolicy" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="body">An instance of a policy template.</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task CreatePolicy_Validate(JumpCloud.SDK.V2.Models.IPolicyRequest body, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(body), body);
                await eventListener.AssertObjectIsValid(nameof(body), body);
            }
        }

        /// <summary>
        /// This endpoint allows you to create a provider administrator. You must be associated to the provider to use this route.
        /// **Sample Request**
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/providers/{ProviderID}/administrators \
        /// -H 'Accept: application/json' \
        /// -H 'Context-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "email":"{ADMIN_EMAIL}"
        /// }'
        /// ```
        /// </summary>
        /// <param name="providerId"></param>
        /// <param name="body">ProviderAdminReq</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onUnauthorized">a delegate that is called when the remote service returns 401 (Unauthorized).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task CreateProviderAdmin(string providerId, JumpCloud.SDK.V2.Models.IProviderAdminReq body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IAdministrator>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IPaths11UphleProvidersProviderIdAdministratorsPostResponses401ContentApplicationJsonSchema>, global::System.Threading.Tasks.Task> onUnauthorized, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/providers/"
                        + global::System.Uri.EscapeDataString(providerId)
                        + "/administrators"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.CreateProviderAdmin_Call(request,onOk,onUnauthorized,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint allows you to create a provider administrator. You must be associated to the provider to use this route.
        /// **Sample Request**
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/providers/{ProviderID}/administrators \
        /// -H 'Accept: application/json' \
        /// -H 'Context-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "email":"{ADMIN_EMAIL}"
        /// }'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="body">ProviderAdminReq</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onUnauthorized">a delegate that is called when the remote service returns 401 (Unauthorized).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task CreateProviderAdminViaIdentity(global::System.String viaIdentity, JumpCloud.SDK.V2.Models.IProviderAdminReq body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IAdministrator>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IPaths11UphleProvidersProviderIdAdministratorsPostResponses401ContentApplicationJsonSchema>, global::System.Threading.Tasks.Task> onUnauthorized, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/providers/(?<provider_id>[^/]+)/administrators$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/providers/{provider_id}/administrators'");
                }

                // replace URI parameters with values from identity
                var providerId = _match.Groups["provider_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/providers/"
                        + providerId
                        + "/administrators"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.CreateProviderAdmin_Call(request,onOk,onUnauthorized,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="CreateProviderAdmin" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onUnauthorized">a delegate that is called when the remote service returns 401 (Unauthorized).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task CreateProviderAdmin_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IAdministrator>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IPaths11UphleProvidersProviderIdAdministratorsPostResponses401ContentApplicationJsonSchema>, global::System.Threading.Tasks.Task> onUnauthorized, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloud.SDK.V2.Models.Administrator.FromJson(JumpCloud.SDK.V2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.Unauthorized:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onUnauthorized(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloud.SDK.V2.Models.Paths11UphleProvidersProviderIdAdministratorsPostResponses401ContentApplicationJsonSchema.FromJson(JumpCloud.SDK.V2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="CreateProviderAdmin" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="providerId"></param>
        /// <param name="body">ProviderAdminReq</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task CreateProviderAdmin_Validate(string providerId, JumpCloud.SDK.V2.Models.IProviderAdminReq body, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(providerId),providerId);
                await eventListener.AssertNotNull(nameof(body), body);
                await eventListener.AssertObjectIsValid(nameof(body), body);
            }
        }

        /// <summary>
        /// This endpoint allows you to create a new System Group.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/systemgroups \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "name": "{Group_Name}"
        /// }'
        /// ```
        /// </summary>
        /// <param name="body">SystemGroupData</param>
        /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task CreateSystemGroup(JumpCloud.SDK.V2.Models.ISystemGroupData body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemGroup>, global::System.Threading.Tasks.Task> onCreated, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systemgroups"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.CreateSystemGroup_Call(request,onCreated,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="CreateSystemGroup" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task CreateSystemGroup_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemGroup>, global::System.Threading.Tasks.Task> onCreated, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.Created:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onCreated(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloud.SDK.V2.Models.SystemGroup.FromJson(JumpCloud.SDK.V2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="CreateSystemGroup" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="body">SystemGroupData</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task CreateSystemGroup_Validate(JumpCloud.SDK.V2.Models.ISystemGroupData body, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(body), body);
                await eventListener.AssertObjectIsValid(nameof(body), body);
            }
        }

        /// <summary>
        /// This endpoint allows you to create a new User Group.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/usergroups \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "name": "{Group_Name}"
        /// }'
        /// ```
        /// </summary>
        /// <param name="body">UserGroupPost</param>
        /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task CreateUserGroup(JumpCloud.SDK.V2.Models.IUserGroupPost body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IUserGroup>, global::System.Threading.Tasks.Task> onCreated, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/usergroups"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.CreateUserGroup_Call(request,onCreated,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="CreateUserGroup" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task CreateUserGroup_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IUserGroup>, global::System.Threading.Tasks.Task> onCreated, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.Created:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onCreated(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloud.SDK.V2.Models.UserGroup.FromJson(JumpCloud.SDK.V2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="CreateUserGroup" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="body">UserGroupPost</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task CreateUserGroup_Validate(JumpCloud.SDK.V2.Models.IUserGroupPost body, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(body), body);
                await eventListener.AssertObjectIsValid(nameof(body), body);
            }
        }

        /// <summary>
        /// This endpoint allows you to create a new workday instance.
        /// You must supply a username and password for `Basic Authentication` that is the same as your WorkDay Integrator System
        /// User. Failure to provide these credentials will result in the request being rejected.
        /// Currently `O-Auth` isn't a supported authentication protocol for WorkDay, but will be in the future.
        /// Currently, only one instance is allowed and it must be `Workday Import`.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/workdays/ \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "name": "Workday2",
        /// "reportUrl":"https://workday.com/ccx/service/customreport2/gms/user/reportname?format=json",
        /// "auth": {
        /// "basic": {
        /// "username": "someDeveloper",
        /// "password": "notTheRealPassword"
        /// }
        /// }
        /// }'
        /// ```
        /// </summary>
        /// <param name="body">Workday Input</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task CreateWorkday(JumpCloud.SDK.V2.Models.IWorkdayInput body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IWorkdayOutput>, global::System.Threading.Tasks.Task> onCreated, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/workdays"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.CreateWorkday_Call(request,onOk,onCreated,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="CreateWorkday" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task CreateWorkday_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IWorkdayOutput>, global::System.Threading.Tasks.Task> onCreated, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response);
                            break;
                        }
                        case global::System.Net.HttpStatusCode.Created:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onCreated(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloud.SDK.V2.Models.WorkdayOutput.FromJson(JumpCloud.SDK.V2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="CreateWorkday" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="body">Workday Input</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task CreateWorkday_Validate(JumpCloud.SDK.V2.Models.IWorkdayInput body, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(body), body);
                await eventListener.AssertObjectIsValid(nameof(body), body);
            }
        }

        /// <summary>
        /// Removes the specified Duo account, an error will be returned if the account has some Duo application used in a protected
        /// resource.
        /// #### Sample Request
        /// ```
        /// curl -X DELETE https://console.jumpcloud.com/api/v2/duo/accounts/{id} \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="id"></param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onBadRequest">a delegate that is called when the remote service returns 400 (BadRequest).</param>
        /// <param name="onUnauthorized">a delegate that is called when the remote service returns 401 (Unauthorized).</param>
        /// <param name="onForbidden">a delegate that is called when the remote service returns 403 (Forbidden).</param>
        /// <param name="onNotFound">a delegate that is called when the remote service returns 404 (NotFound).</param>
        /// <param name="onConflict">a delegate that is called when the remote service returns 409 (Conflict).</param>
        /// <param name="onInternalServerError">a delegate that is called when the remote service returns 500 (InternalServerError).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task DeleteDuoAccount(string id, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IDuoAccount>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onBadRequest, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onUnauthorized, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onForbidden, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onNotFound, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onConflict, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onInternalServerError, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/duo/accounts/"
                        + global::System.Uri.EscapeDataString(id)

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Delete, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.DeleteDuoAccount_Call(request,onOk,onBadRequest,onUnauthorized,onForbidden,onNotFound,onConflict,onInternalServerError,eventListener,sender);
            }
        }

        /// <summary>
        /// Removes the specified Duo account, an error will be returned if the account has some Duo application used in a protected
        /// resource.
        /// #### Sample Request
        /// ```
        /// curl -X DELETE https://console.jumpcloud.com/api/v2/duo/accounts/{id} \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onBadRequest">a delegate that is called when the remote service returns 400 (BadRequest).</param>
        /// <param name="onUnauthorized">a delegate that is called when the remote service returns 401 (Unauthorized).</param>
        /// <param name="onForbidden">a delegate that is called when the remote service returns 403 (Forbidden).</param>
        /// <param name="onNotFound">a delegate that is called when the remote service returns 404 (NotFound).</param>
        /// <param name="onConflict">a delegate that is called when the remote service returns 409 (Conflict).</param>
        /// <param name="onInternalServerError">a delegate that is called when the remote service returns 500 (InternalServerError).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task DeleteDuoAccountViaIdentity(global::System.String viaIdentity, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IDuoAccount>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onBadRequest, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onUnauthorized, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onForbidden, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onNotFound, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onConflict, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onInternalServerError, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/duo/accounts/(?<id>[^/]+)$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/duo/accounts/{id}'");
                }

                // replace URI parameters with values from identity
                var id = _match.Groups["id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/duo/accounts/"
                        + id

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Delete, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.DeleteDuoAccount_Call(request,onOk,onBadRequest,onUnauthorized,onForbidden,onNotFound,onConflict,onInternalServerError,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="DeleteDuoAccount" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onBadRequest">a delegate that is called when the remote service returns 400 (BadRequest).</param>
        /// <param name="onUnauthorized">a delegate that is called when the remote service returns 401 (Unauthorized).</param>
        /// <param name="onForbidden">a delegate that is called when the remote service returns 403 (Forbidden).</param>
        /// <param name="onNotFound">a delegate that is called when the remote service returns 404 (NotFound).</param>
        /// <param name="onConflict">a delegate that is called when the remote service returns 409 (Conflict).</param>
        /// <param name="onInternalServerError">a delegate that is called when the remote service returns 500 (InternalServerError).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task DeleteDuoAccount_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IDuoAccount>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onBadRequest, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onUnauthorized, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onForbidden, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onNotFound, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onConflict, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onInternalServerError, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloud.SDK.V2.Models.DuoAccount.FromJson(JumpCloud.SDK.V2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.BadRequest:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onBadRequest(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloud.SDK.V2.Models.Errorresponse.FromJson(JumpCloud.SDK.V2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.Unauthorized:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onUnauthorized(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloud.SDK.V2.Models.Errorresponse.FromJson(JumpCloud.SDK.V2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.Forbidden:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onForbidden(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloud.SDK.V2.Models.Errorresponse.FromJson(JumpCloud.SDK.V2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.NotFound:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onNotFound(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloud.SDK.V2.Models.Errorresponse.FromJson(JumpCloud.SDK.V2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.Conflict:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onConflict(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloud.SDK.V2.Models.Errorresponse.FromJson(JumpCloud.SDK.V2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.InternalServerError:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onInternalServerError(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloud.SDK.V2.Models.Errorresponse.FromJson(JumpCloud.SDK.V2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="DeleteDuoAccount" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="id"></param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task DeleteDuoAccount_Validate(string id, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(id),id);
            }
        }

        /// <summary>
        /// Deletes the specified Duo application, an error will be returned if the application is used in a protected resource.
        /// #### Sample Request
        /// ```
        /// curl -X DELETE https://console.jumpcloud.com/api/v2/duo/accounts/{ACCOUNT_ID}/applications/{APPLICATION_ID} \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}''
        /// ```
        /// </summary>
        /// <param name="accountId"></param>
        /// <param name="applicationId"></param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onBadRequest">a delegate that is called when the remote service returns 400 (BadRequest).</param>
        /// <param name="onUnauthorized">a delegate that is called when the remote service returns 401 (Unauthorized).</param>
        /// <param name="onForbidden">a delegate that is called when the remote service returns 403 (Forbidden).</param>
        /// <param name="onNotFound">a delegate that is called when the remote service returns 404 (NotFound).</param>
        /// <param name="onConflict">a delegate that is called when the remote service returns 409 (Conflict).</param>
        /// <param name="onInternalServerError">a delegate that is called when the remote service returns 500 (InternalServerError).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task DeleteDuoApplication(string accountId, string applicationId, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IDuoApplication>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onBadRequest, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onUnauthorized, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onForbidden, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onNotFound, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onConflict, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onInternalServerError, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/duo/accounts/"
                        + global::System.Uri.EscapeDataString(accountId)
                        + "/applications/"
                        + global::System.Uri.EscapeDataString(applicationId)

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Delete, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.DeleteDuoApplication_Call(request,onOk,onBadRequest,onUnauthorized,onForbidden,onNotFound,onConflict,onInternalServerError,eventListener,sender);
            }
        }

        /// <summary>
        /// Deletes the specified Duo application, an error will be returned if the application is used in a protected resource.
        /// #### Sample Request
        /// ```
        /// curl -X DELETE https://console.jumpcloud.com/api/v2/duo/accounts/{ACCOUNT_ID}/applications/{APPLICATION_ID} \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}''
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onBadRequest">a delegate that is called when the remote service returns 400 (BadRequest).</param>
        /// <param name="onUnauthorized">a delegate that is called when the remote service returns 401 (Unauthorized).</param>
        /// <param name="onForbidden">a delegate that is called when the remote service returns 403 (Forbidden).</param>
        /// <param name="onNotFound">a delegate that is called when the remote service returns 404 (NotFound).</param>
        /// <param name="onConflict">a delegate that is called when the remote service returns 409 (Conflict).</param>
        /// <param name="onInternalServerError">a delegate that is called when the remote service returns 500 (InternalServerError).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task DeleteDuoApplicationViaIdentity(global::System.String viaIdentity, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IDuoApplication>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onBadRequest, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onUnauthorized, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onForbidden, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onNotFound, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onConflict, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onInternalServerError, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/duo/accounts/(?<account_id>[^/]+)/applications/(?<application_id>[^/]+)$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/duo/accounts/{account_id}/applications/{application_id}'");
                }

                // replace URI parameters with values from identity
                var accountId = _match.Groups["account_id"].Value;
                var applicationId = _match.Groups["application_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/duo/accounts/"
                        + accountId
                        + "/applications/"
                        + applicationId

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Delete, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.DeleteDuoApplication_Call(request,onOk,onBadRequest,onUnauthorized,onForbidden,onNotFound,onConflict,onInternalServerError,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="DeleteDuoApplication" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onBadRequest">a delegate that is called when the remote service returns 400 (BadRequest).</param>
        /// <param name="onUnauthorized">a delegate that is called when the remote service returns 401 (Unauthorized).</param>
        /// <param name="onForbidden">a delegate that is called when the remote service returns 403 (Forbidden).</param>
        /// <param name="onNotFound">a delegate that is called when the remote service returns 404 (NotFound).</param>
        /// <param name="onConflict">a delegate that is called when the remote service returns 409 (Conflict).</param>
        /// <param name="onInternalServerError">a delegate that is called when the remote service returns 500 (InternalServerError).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task DeleteDuoApplication_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IDuoApplication>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onBadRequest, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onUnauthorized, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onForbidden, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onNotFound, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onConflict, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onInternalServerError, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloud.SDK.V2.Models.DuoApplication.FromJson(JumpCloud.SDK.V2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.BadRequest:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onBadRequest(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloud.SDK.V2.Models.Errorresponse.FromJson(JumpCloud.SDK.V2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.Unauthorized:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onUnauthorized(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloud.SDK.V2.Models.Errorresponse.FromJson(JumpCloud.SDK.V2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.Forbidden:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onForbidden(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloud.SDK.V2.Models.Errorresponse.FromJson(JumpCloud.SDK.V2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.NotFound:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onNotFound(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloud.SDK.V2.Models.Errorresponse.FromJson(JumpCloud.SDK.V2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.Conflict:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onConflict(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloud.SDK.V2.Models.Errorresponse.FromJson(JumpCloud.SDK.V2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.InternalServerError:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onInternalServerError(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloud.SDK.V2.Models.Errorresponse.FromJson(JumpCloud.SDK.V2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="DeleteDuoApplication" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="accountId"></param>
        /// <param name="applicationId"></param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task DeleteDuoApplication_Validate(string accountId, string applicationId, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(accountId),accountId);
                await eventListener.AssertNotNull(nameof(applicationId),applicationId);
            }
        }

        /// <summary>
        /// This endpoint allows you to delete a translation rule for a specific G Suite instance. These rules specify how JumpCloud
        /// attributes translate to [G Suite Admin SDK](https://developers.google.com/admin-sdk/directory/) attributes.
        /// #### Sample Request
        /// ```
        /// curl -X DELETE https://console.jumpcloud.com/api/v2/gsuites/{gsuite_id}/translationrules/{id} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="gsuiteId"></param>
        /// <param name="id"></param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task DeleteGSuiteTranslationRule(string gsuiteId, string id, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/gsuites/"
                        + global::System.Uri.EscapeDataString(gsuiteId)
                        + "/translationrules/"
                        + global::System.Uri.EscapeDataString(id)

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Delete, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.DeleteGSuiteTranslationRule_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint allows you to delete a translation rule for a specific G Suite instance. These rules specify how JumpCloud
        /// attributes translate to [G Suite Admin SDK](https://developers.google.com/admin-sdk/directory/) attributes.
        /// #### Sample Request
        /// ```
        /// curl -X DELETE https://console.jumpcloud.com/api/v2/gsuites/{gsuite_id}/translationrules/{id} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task DeleteGSuiteTranslationRuleViaIdentity(global::System.String viaIdentity, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/gsuites/(?<gsuite_id>[^/]+)/translationrules/(?<id>[^/]+)$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/gsuites/{gsuite_id}/translationrules/{id}'");
                }

                // replace URI parameters with values from identity
                var gsuiteId = _match.Groups["gsuite_id"].Value;
                var id = _match.Groups["id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/gsuites/"
                        + gsuiteId
                        + "/translationrules/"
                        + id

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Delete, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.DeleteGSuiteTranslationRule_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="DeleteGSuiteTranslationRule" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task DeleteGSuiteTranslationRule_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.NoContent:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onNoContent(_response);
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="DeleteGSuiteTranslationRule" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="gsuiteId"></param>
        /// <param name="id"></param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task DeleteGSuiteTranslationRule_Validate(string gsuiteId, string id, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(gsuiteId),gsuiteId);
                await eventListener.AssertNotNull(nameof(id),id);
            }
        }

        /// <summary>
        /// This endpoint allows you to delete a samba domain from an LDAP server.
        /// ##### Sample Request
        /// ```
        /// curl -X DELETE https://console.jumpcloud.com/api/v2/ldapservers/{LDAP_ID}/sambadomains/{SAMBA_ID} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="ldapserverId">Unique identifier of the LDAP server.</param>
        /// <param name="id">Unique identifier of the samba domain.</param>
        /// <param name="contentType"></param>
        /// <param name="accept"></param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task DeleteLdapServerSambaDomain(string ldapserverId, string id, string contentType, string accept, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<string>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/ldapservers/"
                        + global::System.Uri.EscapeDataString(ldapserverId)
                        + "/sambadomains/"
                        + global::System.Uri.EscapeDataString(id)

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Delete, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // add headers parameters
                if (null != contentType)
                {
                    request.Headers.Add("Content-Type",contentType);
                }
                if (null != accept)
                {
                    request.Headers.Add("Accept",accept);
                }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.DeleteLdapServerSambaDomain_Call(request,onOk,onNoContent,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint allows you to delete a samba domain from an LDAP server.
        /// ##### Sample Request
        /// ```
        /// curl -X DELETE https://console.jumpcloud.com/api/v2/ldapservers/{LDAP_ID}/sambadomains/{SAMBA_ID} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="contentType"></param>
        /// <param name="accept"></param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task DeleteLdapServerSambaDomainViaIdentity(global::System.String viaIdentity, string contentType, string accept, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<string>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/ldapservers/(?<ldapserver_id>[^/]+)/sambadomains/(?<id>[^/]+)$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/ldapservers/{ldapserver_id}/sambadomains/{id}'");
                }

                // replace URI parameters with values from identity
                var ldapserverId = _match.Groups["ldapserver_id"].Value;
                var id = _match.Groups["id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/ldapservers/"
                        + ldapserverId
                        + "/sambadomains/"
                        + id

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Delete, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // add headers parameters
                if (null != contentType)
                {
                    request.Headers.Add("Content-Type",contentType);
                }
                if (null != accept)
                {
                    request.Headers.Add("Accept",accept);
                }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.DeleteLdapServerSambaDomain_Call(request,onOk,onNoContent,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="DeleteLdapServerSambaDomain" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task DeleteLdapServerSambaDomain_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<string>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloud.SDK.V2.Runtime.Json.JsonNode.Parse(body.Result) is JumpCloud.SDK.V2.Runtime.Json.JsonString __y ? (string)(__y.ToString()) : null));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.NoContent:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onNoContent(_response);
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="DeleteLdapServerSambaDomain" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="ldapserverId">Unique identifier of the LDAP server.</param>
        /// <param name="id">Unique identifier of the samba domain.</param>
        /// <param name="contentType"></param>
        /// <param name="accept"></param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task DeleteLdapServerSambaDomain_Validate(string ldapserverId, string id, string contentType, string accept, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(ldapserverId),ldapserverId);
                await eventListener.AssertNotNull(nameof(id),id);
                await eventListener.AssertNotNull(nameof(contentType),contentType);
                await eventListener.AssertNotNull(nameof(accept),accept);
            }
        }

        /// <summary>
        /// This endpoint allows you to delete a translation rule for a specific Office 365 instance. These rules specify how JumpCloud
        /// attributes translate to [Microsoft Graph](https://developer.microsoft.com/en-us/graph) attributes.
        /// #### Sample Request
        /// ```
        /// curl -X DELETE https://console.jumpcloud.com/api/v2/office365s/{office365_id}/translationrules/{id} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="office365Id"></param>
        /// <param name="id"></param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task DeleteOffice365TranslationRule(string office365Id, string id, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/office365s/"
                        + global::System.Uri.EscapeDataString(office365Id)
                        + "/translationrules/"
                        + global::System.Uri.EscapeDataString(id)

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Delete, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.DeleteOffice365TranslationRule_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint allows you to delete a translation rule for a specific Office 365 instance. These rules specify how JumpCloud
        /// attributes translate to [Microsoft Graph](https://developer.microsoft.com/en-us/graph) attributes.
        /// #### Sample Request
        /// ```
        /// curl -X DELETE https://console.jumpcloud.com/api/v2/office365s/{office365_id}/translationrules/{id} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task DeleteOffice365TranslationRuleViaIdentity(global::System.String viaIdentity, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/office365s/(?<office365_id>[^/]+)/translationrules/(?<id>[^/]+)$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/office365s/{office365_id}/translationrules/{id}'");
                }

                // replace URI parameters with values from identity
                var office365Id = _match.Groups["office365_id"].Value;
                var id = _match.Groups["id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/office365s/"
                        + office365Id
                        + "/translationrules/"
                        + id

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Delete, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.DeleteOffice365TranslationRule_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="DeleteOffice365TranslationRule" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task DeleteOffice365TranslationRule_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.NoContent:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onNoContent(_response);
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="DeleteOffice365TranslationRule" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="office365Id"></param>
        /// <param name="id"></param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task DeleteOffice365TranslationRule_Validate(string office365Id, string id, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(office365Id),office365Id);
                await eventListener.AssertNotNull(nameof(id),id);
            }
        }

        /// <summary>
        /// This endpoint allows you to delete a policy.
        /// #### Sample Request
        /// ```
        /// curl -X DELETE https://console.jumpcloud.com/api/v2/policies/5a837ecd232e110d4291e6b9 \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="id">ObjectID of the Policy object.</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task DeletePolicy(string id, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/policies/"
                        + global::System.Uri.EscapeDataString(id)

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Delete, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.DeletePolicy_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint allows you to delete a policy.
        /// #### Sample Request
        /// ```
        /// curl -X DELETE https://console.jumpcloud.com/api/v2/policies/5a837ecd232e110d4291e6b9 \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task DeletePolicyViaIdentity(global::System.String viaIdentity, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/policies/(?<id>[^/]+)$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/policies/{id}'");
                }

                // replace URI parameters with values from identity
                var id = _match.Groups["id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/policies/"
                        + id

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Delete, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.DeletePolicy_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="DeletePolicy" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task DeletePolicy_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.NoContent:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onNoContent(_response);
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="DeletePolicy" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="id">ObjectID of the Policy object.</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task DeletePolicy_Validate(string id, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(id),id);
            }
        }

        /// <summary>
        /// This endpoint allows you to delete a System Group.
        /// #### Sample Request
        /// ```
        /// curl -X DELETE https://console.jumpcloud.com/api/v2/systemgroups/{Group_ID} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="id">ObjectID of the System Group.</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task DeleteSystemGroup(string id, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systemgroups/"
                        + global::System.Uri.EscapeDataString(id)

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Delete, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.DeleteSystemGroup_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint allows you to delete a System Group.
        /// #### Sample Request
        /// ```
        /// curl -X DELETE https://console.jumpcloud.com/api/v2/systemgroups/{Group_ID} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task DeleteSystemGroupViaIdentity(global::System.String viaIdentity, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systemgroups/(?<id>[^/]+)$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systemgroups/{id}'");
                }

                // replace URI parameters with values from identity
                var id = _match.Groups["id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systemgroups/"
                        + id

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Delete, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.DeleteSystemGroup_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="DeleteSystemGroup" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task DeleteSystemGroup_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.NoContent:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onNoContent(_response);
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="DeleteSystemGroup" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="id">ObjectID of the System Group.</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task DeleteSystemGroup_Validate(string id, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(id),id);
            }
        }

        /// <summary>
        /// This endpoint allows you to delete a User Group.
        /// #### Sample Request
        /// ```
        /// curl -X DELETE https://console.jumpcloud.com/api/v2/usergroups/{GroupID} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="id">ObjectID of the User Group.</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task DeleteUserGroup(string id, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/usergroups/"
                        + global::System.Uri.EscapeDataString(id)

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Delete, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.DeleteUserGroup_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint allows you to delete a User Group.
        /// #### Sample Request
        /// ```
        /// curl -X DELETE https://console.jumpcloud.com/api/v2/usergroups/{GroupID} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task DeleteUserGroupViaIdentity(global::System.String viaIdentity, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/usergroups/(?<id>[^/]+)$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/usergroups/{id}'");
                }

                // replace URI parameters with values from identity
                var id = _match.Groups["id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/usergroups/"
                        + id

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Delete, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.DeleteUserGroup_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="DeleteUserGroup" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task DeleteUserGroup_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.NoContent:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onNoContent(_response);
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="DeleteUserGroup" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="id">ObjectID of the User Group.</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task DeleteUserGroup_Validate(string id, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(id),id);
            }
        }

        /// <summary>
        /// This endpoint returns a specific Active Directory.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/activedirectories/{ActiveDirectory_ID} \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="id">ObjectID of this Active Directory instance.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task GetActiveDirectory(string id, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IActiveDirectoryOutput>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/activedirectories/"
                        + global::System.Uri.EscapeDataString(id)

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.GetActiveDirectory_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns a specific Active Directory.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/activedirectories/{ActiveDirectory_ID} \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task GetActiveDirectoryViaIdentity(global::System.String viaIdentity, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IActiveDirectoryOutput>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/activedirectories/(?<id>[^/]+)$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/activedirectories/{id}'");
                }

                // replace URI parameters with values from identity
                var id = _match.Groups["id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/activedirectories/"
                        + id

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.GetActiveDirectory_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="GetActiveDirectory" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task GetActiveDirectory_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IActiveDirectoryOutput>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloud.SDK.V2.Models.ActiveDirectoryOutput.FromJson(JumpCloud.SDK.V2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="GetActiveDirectory" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="id">ObjectID of this Active Directory instance.</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task GetActiveDirectory_Validate(string id, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(id),id);
            }
        }

        /// <summary>
        /// This endpoint will return the results of particular user import or update job request.
        /// #### Sample Request
        /// ```
        /// curl -X GET \
        /// https://console.jumpcloud.com/api/v2/bulk/users/{ImportJobID}/results \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="jobId"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task GetBulkUsersResult(string jobId, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IJobWorkresult[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/bulk/users/"
                        + global::System.Uri.EscapeDataString(jobId)
                        + "/results"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.GetBulkUsersResult_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return the results of particular user import or update job request.
        /// #### Sample Request
        /// ```
        /// curl -X GET \
        /// https://console.jumpcloud.com/api/v2/bulk/users/{ImportJobID}/results \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task GetBulkUsersResultViaIdentity(global::System.String viaIdentity, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IJobWorkresult[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/bulk/users/(?<job_id>[^/]+)/results$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/bulk/users/{job_id}/results'");
                }

                // replace URI parameters with values from identity
                var jobId = _match.Groups["job_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/bulk/users/"
                        + jobId
                        + "/results"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.GetBulkUsersResult_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="GetBulkUsersResult" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task GetBulkUsersResult_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IJobWorkresult[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.IJobWorkresult[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.IJobWorkresult) (JumpCloud.SDK.V2.Models.JobWorkresult.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="GetBulkUsersResult" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="jobId"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task GetBulkUsersResult_Validate(string jobId, int? limit, int? skip, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(jobId),jobId);
            }
        }

        /// <summary>
        /// This endpoint returns a specific Duo account.
        /// #### Sample Request
        /// ```
        /// curl https://console.jumpcloud.com/api/v2/duo/accounts/{id} \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="id"></param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task GetDuoAccount(string id, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IDuoAccount>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/duo/accounts/"
                        + global::System.Uri.EscapeDataString(id)

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.GetDuoAccount_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns a specific Duo account.
        /// #### Sample Request
        /// ```
        /// curl https://console.jumpcloud.com/api/v2/duo/accounts/{id} \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task GetDuoAccountViaIdentity(global::System.String viaIdentity, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IDuoAccount>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/duo/accounts/(?<id>[^/]+)$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/duo/accounts/{id}'");
                }

                // replace URI parameters with values from identity
                var id = _match.Groups["id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/duo/accounts/"
                        + id

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.GetDuoAccount_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="GetDuoAccount" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task GetDuoAccount_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IDuoAccount>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloud.SDK.V2.Models.DuoAccount.FromJson(JumpCloud.SDK.V2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="GetDuoAccount" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="id"></param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task GetDuoAccount_Validate(string id, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(id),id);
            }
        }

        /// <summary>
        /// This endpoint returns a specific Duo application that is associated with the specified Duo account.
        /// #### Sample Request
        /// ```
        /// curl https://console.jumpcloud.com/api/v2/duo/accounts/{ACCOUNT_ID}/applications/{APPLICATION_ID} \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="accountId"></param>
        /// <param name="applicationId"></param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onBadRequest">a delegate that is called when the remote service returns 400 (BadRequest).</param>
        /// <param name="onUnauthorized">a delegate that is called when the remote service returns 401 (Unauthorized).</param>
        /// <param name="onForbidden">a delegate that is called when the remote service returns 403 (Forbidden).</param>
        /// <param name="onNotFound">a delegate that is called when the remote service returns 404 (NotFound).</param>
        /// <param name="onConflict">a delegate that is called when the remote service returns 409 (Conflict).</param>
        /// <param name="onInternalServerError">a delegate that is called when the remote service returns 500 (InternalServerError).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task GetDuoApplication(string accountId, string applicationId, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IDuoApplication>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onBadRequest, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onUnauthorized, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onForbidden, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onNotFound, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onConflict, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onInternalServerError, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/duo/accounts/"
                        + global::System.Uri.EscapeDataString(accountId)
                        + "/applications/"
                        + global::System.Uri.EscapeDataString(applicationId)

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.GetDuoApplication_Call(request,onOk,onBadRequest,onUnauthorized,onForbidden,onNotFound,onConflict,onInternalServerError,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns a specific Duo application that is associated with the specified Duo account.
        /// #### Sample Request
        /// ```
        /// curl https://console.jumpcloud.com/api/v2/duo/accounts/{ACCOUNT_ID}/applications/{APPLICATION_ID} \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onBadRequest">a delegate that is called when the remote service returns 400 (BadRequest).</param>
        /// <param name="onUnauthorized">a delegate that is called when the remote service returns 401 (Unauthorized).</param>
        /// <param name="onForbidden">a delegate that is called when the remote service returns 403 (Forbidden).</param>
        /// <param name="onNotFound">a delegate that is called when the remote service returns 404 (NotFound).</param>
        /// <param name="onConflict">a delegate that is called when the remote service returns 409 (Conflict).</param>
        /// <param name="onInternalServerError">a delegate that is called when the remote service returns 500 (InternalServerError).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task GetDuoApplicationViaIdentity(global::System.String viaIdentity, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IDuoApplication>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onBadRequest, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onUnauthorized, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onForbidden, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onNotFound, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onConflict, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onInternalServerError, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/duo/accounts/(?<account_id>[^/]+)/applications/(?<application_id>[^/]+)$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/duo/accounts/{account_id}/applications/{application_id}'");
                }

                // replace URI parameters with values from identity
                var accountId = _match.Groups["account_id"].Value;
                var applicationId = _match.Groups["application_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/duo/accounts/"
                        + accountId
                        + "/applications/"
                        + applicationId

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.GetDuoApplication_Call(request,onOk,onBadRequest,onUnauthorized,onForbidden,onNotFound,onConflict,onInternalServerError,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="GetDuoApplication" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onBadRequest">a delegate that is called when the remote service returns 400 (BadRequest).</param>
        /// <param name="onUnauthorized">a delegate that is called when the remote service returns 401 (Unauthorized).</param>
        /// <param name="onForbidden">a delegate that is called when the remote service returns 403 (Forbidden).</param>
        /// <param name="onNotFound">a delegate that is called when the remote service returns 404 (NotFound).</param>
        /// <param name="onConflict">a delegate that is called when the remote service returns 409 (Conflict).</param>
        /// <param name="onInternalServerError">a delegate that is called when the remote service returns 500 (InternalServerError).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task GetDuoApplication_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IDuoApplication>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onBadRequest, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onUnauthorized, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onForbidden, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onNotFound, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onConflict, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onInternalServerError, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloud.SDK.V2.Models.DuoApplication.FromJson(JumpCloud.SDK.V2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.BadRequest:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onBadRequest(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloud.SDK.V2.Models.Errorresponse.FromJson(JumpCloud.SDK.V2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.Unauthorized:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onUnauthorized(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloud.SDK.V2.Models.Errorresponse.FromJson(JumpCloud.SDK.V2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.Forbidden:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onForbidden(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloud.SDK.V2.Models.Errorresponse.FromJson(JumpCloud.SDK.V2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.NotFound:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onNotFound(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloud.SDK.V2.Models.Errorresponse.FromJson(JumpCloud.SDK.V2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.Conflict:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onConflict(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloud.SDK.V2.Models.Errorresponse.FromJson(JumpCloud.SDK.V2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.InternalServerError:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onInternalServerError(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloud.SDK.V2.Models.Errorresponse.FromJson(JumpCloud.SDK.V2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="GetDuoApplication" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="accountId"></param>
        /// <param name="applicationId"></param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task GetDuoApplication_Validate(string accountId, string applicationId, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(accountId),accountId);
                await eventListener.AssertNotNull(nameof(applicationId),applicationId);
            }
        }

        /// <summary>
        /// This endpoint returns a specific G Suite.
        /// ##### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/gsuites/{GSUITE_ID} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="id">Unique identifier of the GSuite.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task GetGSuite(string id, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGsuiteOutput>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/gsuites/"
                        + global::System.Uri.EscapeDataString(id)

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.GetGSuite_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns a specific translation rule for a specific G Suite instance. These rules specify how JumpCloud attributes
        /// translate to [G Suite Admin SDK](https://developers.google.com/admin-sdk/directory/) attributes.
        /// ###### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/gsuites/{gsuite_id}/translationrules/{id} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="gsuiteId"></param>
        /// <param name="id"></param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task GetGSuiteTranslationRule(string gsuiteId, string id, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGSuiteTranslationRule>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/gsuites/"
                        + global::System.Uri.EscapeDataString(gsuiteId)
                        + "/translationrules/"
                        + global::System.Uri.EscapeDataString(id)

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.GetGSuiteTranslationRule_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns a specific translation rule for a specific G Suite instance. These rules specify how JumpCloud attributes
        /// translate to [G Suite Admin SDK](https://developers.google.com/admin-sdk/directory/) attributes.
        /// ###### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/gsuites/{gsuite_id}/translationrules/{id} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task GetGSuiteTranslationRuleViaIdentity(global::System.String viaIdentity, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGSuiteTranslationRule>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/gsuites/(?<gsuite_id>[^/]+)/translationrules/(?<id>[^/]+)$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/gsuites/{gsuite_id}/translationrules/{id}'");
                }

                // replace URI parameters with values from identity
                var gsuiteId = _match.Groups["gsuite_id"].Value;
                var id = _match.Groups["id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/gsuites/"
                        + gsuiteId
                        + "/translationrules/"
                        + id

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.GetGSuiteTranslationRule_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="GetGSuiteTranslationRule" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task GetGSuiteTranslationRule_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGSuiteTranslationRule>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloud.SDK.V2.Models.GSuiteTranslationRule.FromJson(JumpCloud.SDK.V2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="GetGSuiteTranslationRule" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="gsuiteId"></param>
        /// <param name="id"></param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task GetGSuiteTranslationRule_Validate(string gsuiteId, string id, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(gsuiteId),gsuiteId);
                await eventListener.AssertNotNull(nameof(id),id);
            }
        }

        /// <summary>
        /// This endpoint returns a specific G Suite.
        /// ##### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/gsuites/{GSUITE_ID} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task GetGSuiteViaIdentity(global::System.String viaIdentity, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGsuiteOutput>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/gsuites/(?<id>[^/]+)$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/gsuites/{id}'");
                }

                // replace URI parameters with values from identity
                var id = _match.Groups["id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/gsuites/"
                        + id

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.GetGSuite_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="GetGSuite" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task GetGSuite_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGsuiteOutput>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloud.SDK.V2.Models.GsuiteOutput.FromJson(JumpCloud.SDK.V2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="GetGSuite" /> method. Call this like the actual call, but you will get validation events
        /// back.
        /// </summary>
        /// <param name="id">Unique identifier of the GSuite.</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task GetGSuite_Validate(string id, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(id),id);
            }
        }

        /// <summary>
        /// This endpoint returns a specific LDAP server.
        /// ##### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/ldapservers/{LDAP_ID} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="id">Unique identifier of the LDAP server.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task GetLdapServer(string id, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ILdapServerOutput>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/ldapservers/"
                        + global::System.Uri.EscapeDataString(id)

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.GetLdapServer_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns a specific samba domain for an LDAP server.
        /// ##### Sample Request
        /// ```
        /// curl -X GET \
        /// https://console.jumpcloud.com/api/v2/ldapservers/ldapservers/{LDAP_ID}/sambadomains/{SAMBA_ID} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="ldapserverId">Unique identifier of the LDAP server.</param>
        /// <param name="id">Unique identifier of the samba domain.</param>
        /// <param name="contentType"></param>
        /// <param name="accept"></param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task GetLdapServerSambaDomain(string ldapserverId, string id, string contentType, string accept, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISambaDomainOutput>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/ldapservers/"
                        + global::System.Uri.EscapeDataString(ldapserverId)
                        + "/sambadomains/"
                        + global::System.Uri.EscapeDataString(id)

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // add headers parameters
                if (null != contentType)
                {
                    request.Headers.Add("Content-Type",contentType);
                }
                if (null != accept)
                {
                    request.Headers.Add("Accept",accept);
                }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.GetLdapServerSambaDomain_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns a specific samba domain for an LDAP server.
        /// ##### Sample Request
        /// ```
        /// curl -X GET \
        /// https://console.jumpcloud.com/api/v2/ldapservers/ldapservers/{LDAP_ID}/sambadomains/{SAMBA_ID} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="contentType"></param>
        /// <param name="accept"></param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task GetLdapServerSambaDomainViaIdentity(global::System.String viaIdentity, string contentType, string accept, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISambaDomainOutput>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/ldapservers/(?<ldapserver_id>[^/]+)/sambadomains/(?<id>[^/]+)$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/ldapservers/{ldapserver_id}/sambadomains/{id}'");
                }

                // replace URI parameters with values from identity
                var ldapserverId = _match.Groups["ldapserver_id"].Value;
                var id = _match.Groups["id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/ldapservers/"
                        + ldapserverId
                        + "/sambadomains/"
                        + id

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // add headers parameters
                if (null != contentType)
                {
                    request.Headers.Add("Content-Type",contentType);
                }
                if (null != accept)
                {
                    request.Headers.Add("Accept",accept);
                }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.GetLdapServerSambaDomain_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="GetLdapServerSambaDomain" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task GetLdapServerSambaDomain_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISambaDomainOutput>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloud.SDK.V2.Models.SambaDomainOutput.FromJson(JumpCloud.SDK.V2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="GetLdapServerSambaDomain" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="ldapserverId">Unique identifier of the LDAP server.</param>
        /// <param name="id">Unique identifier of the samba domain.</param>
        /// <param name="contentType"></param>
        /// <param name="accept"></param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task GetLdapServerSambaDomain_Validate(string ldapserverId, string id, string contentType, string accept, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(ldapserverId),ldapserverId);
                await eventListener.AssertNotNull(nameof(id),id);
                await eventListener.AssertNotNull(nameof(contentType),contentType);
                await eventListener.AssertNotNull(nameof(accept),accept);
            }
        }

        /// <summary>
        /// This endpoint returns a specific LDAP server.
        /// ##### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/ldapservers/{LDAP_ID} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task GetLdapServerViaIdentity(global::System.String viaIdentity, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ILdapServerOutput>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/ldapservers/(?<id>[^/]+)$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/ldapservers/{id}'");
                }

                // replace URI parameters with values from identity
                var id = _match.Groups["id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/ldapservers/"
                        + id

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.GetLdapServer_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="GetLdapServer" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task GetLdapServer_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ILdapServerOutput>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloud.SDK.V2.Models.LdapServerOutput.FromJson(JumpCloud.SDK.V2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="GetLdapServer" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="id">Unique identifier of the LDAP server.</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task GetLdapServer_Validate(string id, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(id),id);
            }
        }

        /// <summary>
        /// This endpoint returns a specific Office 365 instance.
        /// #####
        /// Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/office365s/{O365_ID} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="office365Id">ObjectID of the Office 365 instance.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task GetOffice365(string office365Id, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IOffice365Output>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/office365s/"
                        + global::System.Uri.EscapeDataString(office365Id)

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.GetOffice365_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns a specific translation rule for a specific Office 365 instance. These rules specify how JumpCloud
        /// attributes translate to [Microsoft Graph](https://developer.microsoft.com/en-us/graph) attributes.
        /// ###### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/office365s/{office365_id}/translationrules/{id} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="office365Id"></param>
        /// <param name="id"></param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task GetOffice365TranslationRule(string office365Id, string id, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IOffice365TranslationRule>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/office365s/"
                        + global::System.Uri.EscapeDataString(office365Id)
                        + "/translationrules/"
                        + global::System.Uri.EscapeDataString(id)

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.GetOffice365TranslationRule_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns a specific translation rule for a specific Office 365 instance. These rules specify how JumpCloud
        /// attributes translate to [Microsoft Graph](https://developer.microsoft.com/en-us/graph) attributes.
        /// ###### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/office365s/{office365_id}/translationrules/{id} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task GetOffice365TranslationRuleViaIdentity(global::System.String viaIdentity, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IOffice365TranslationRule>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/office365s/(?<office365_id>[^/]+)/translationrules/(?<id>[^/]+)$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/office365s/{office365_id}/translationrules/{id}'");
                }

                // replace URI parameters with values from identity
                var office365Id = _match.Groups["office365_id"].Value;
                var id = _match.Groups["id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/office365s/"
                        + office365Id
                        + "/translationrules/"
                        + id

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.GetOffice365TranslationRule_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="GetOffice365TranslationRule" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task GetOffice365TranslationRule_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IOffice365TranslationRule>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloud.SDK.V2.Models.Office365TranslationRule.FromJson(JumpCloud.SDK.V2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="GetOffice365TranslationRule" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="office365Id"></param>
        /// <param name="id"></param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task GetOffice365TranslationRule_Validate(string office365Id, string id, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(office365Id),office365Id);
                await eventListener.AssertNotNull(nameof(id),id);
            }
        }

        /// <summary>
        /// This endpoint returns a specific Office 365 instance.
        /// #####
        /// Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/office365s/{O365_ID} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task GetOffice365ViaIdentity(global::System.String viaIdentity, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IOffice365Output>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/office365s/(?<office365_id>[^/]+)$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/office365s/{office365_id}'");
                }

                // replace URI parameters with values from identity
                var office365Id = _match.Groups["office365_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/office365s/"
                        + office365Id

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.GetOffice365_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="GetOffice365" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task GetOffice365_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IOffice365Output>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloud.SDK.V2.Models.Office365Output.FromJson(JumpCloud.SDK.V2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="GetOffice365" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="office365Id">ObjectID of the Office 365 instance.</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task GetOffice365_Validate(string office365Id, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(office365Id),office365Id);
            }
        }

        /// <summary>
        /// This endpoint returns a specific policy.
        /// ###### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/policies/{PolicyID} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="id">ObjectID of the Policy object.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task GetPolicy(string id, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IPolicyWithDetails>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/policies/"
                        + global::System.Uri.EscapeDataString(id)

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.GetPolicy_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return the policy results for a specific policy.
        /// ##### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/policyresults/{Policy_ID} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="id">ObjectID of the Policy Result.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task GetPolicyResult(string id, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IPolicyResult>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/policyresults/"
                        + global::System.Uri.EscapeDataString(id)

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.GetPolicyResult_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return the policy results for a specific policy.
        /// ##### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/policyresults/{Policy_ID} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task GetPolicyResultViaIdentity(global::System.String viaIdentity, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IPolicyResult>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/policyresults/(?<id>[^/]+)$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/policyresults/{id}'");
                }

                // replace URI parameters with values from identity
                var id = _match.Groups["id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/policyresults/"
                        + id

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.GetPolicyResult_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="GetPolicyResult" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task GetPolicyResult_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IPolicyResult>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloud.SDK.V2.Models.PolicyResult.FromJson(JumpCloud.SDK.V2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="GetPolicyResult" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="id">ObjectID of the Policy Result.</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task GetPolicyResult_Validate(string id, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(id),id);
            }
        }

        /// <summary>
        /// This endpoint returns a specific policy template.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/policies/{Policy_ID}\
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="id">ObjectID of the Policy Template.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task GetPolicyTemplate(string id, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IPolicyTemplateWithDetails>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/policytemplates/"
                        + global::System.Uri.EscapeDataString(id)

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.GetPolicyTemplate_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns a specific policy template.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/policies/{Policy_ID}\
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task GetPolicyTemplateViaIdentity(global::System.String viaIdentity, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IPolicyTemplateWithDetails>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/policytemplates/(?<id>[^/]+)$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/policytemplates/{id}'");
                }

                // replace URI parameters with values from identity
                var id = _match.Groups["id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/policytemplates/"
                        + id

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.GetPolicyTemplate_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="GetPolicyTemplate" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task GetPolicyTemplate_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IPolicyTemplateWithDetails>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloud.SDK.V2.Models.PolicyTemplateWithDetails.FromJson(JumpCloud.SDK.V2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="GetPolicyTemplate" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="id">ObjectID of the Policy Template.</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task GetPolicyTemplate_Validate(string id, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(id),id);
            }
        }

        /// <summary>
        /// This endpoint returns a specific policy.
        /// ###### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/policies/{PolicyID} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task GetPolicyViaIdentity(global::System.String viaIdentity, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IPolicyWithDetails>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/policies/(?<id>[^/]+)$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/policies/{id}'");
                }

                // replace URI parameters with values from identity
                var id = _match.Groups["id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/policies/"
                        + id

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.GetPolicy_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="GetPolicy" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task GetPolicy_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IPolicyWithDetails>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloud.SDK.V2.Models.PolicyWithDetails.FromJson(JumpCloud.SDK.V2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="GetPolicy" /> method. Call this like the actual call, but you will get validation events
        /// back.
        /// </summary>
        /// <param name="id">ObjectID of the Policy object.</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task GetPolicy_Validate(string id, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(id),id);
            }
        }

        /// <summary>This endpoint will return the current (latest) fde key saved for a system.</summary>
        /// <param name="systemId"></param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onBadRequest">a delegate that is called when the remote service returns 400 (BadRequest).</param>
        /// <param name="onUnauthorized">a delegate that is called when the remote service returns 401 (Unauthorized).</param>
        /// <param name="onForbidden">a delegate that is called when the remote service returns 403 (Forbidden).</param>
        /// <param name="onNotFound">a delegate that is called when the remote service returns 404 (NotFound).</param>
        /// <param name="onConflict">a delegate that is called when the remote service returns 409 (Conflict).</param>
        /// <param name="onInternalServerError">a delegate that is called when the remote service returns 500 (InternalServerError).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task GetSystemFdeKey(string systemId, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemfdekey>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onBadRequest, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onUnauthorized, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onForbidden, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onNotFound, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onConflict, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onInternalServerError, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systems/"
                        + global::System.Uri.EscapeDataString(systemId)
                        + "/fdekey"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.GetSystemFdeKey_Call(request,onOk,onBadRequest,onUnauthorized,onForbidden,onNotFound,onConflict,onInternalServerError,eventListener,sender);
            }
        }

        /// <summary>This endpoint will return the current (latest) fde key saved for a system.</summary>
        /// <param name="viaIdentity"></param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onBadRequest">a delegate that is called when the remote service returns 400 (BadRequest).</param>
        /// <param name="onUnauthorized">a delegate that is called when the remote service returns 401 (Unauthorized).</param>
        /// <param name="onForbidden">a delegate that is called when the remote service returns 403 (Forbidden).</param>
        /// <param name="onNotFound">a delegate that is called when the remote service returns 404 (NotFound).</param>
        /// <param name="onConflict">a delegate that is called when the remote service returns 409 (Conflict).</param>
        /// <param name="onInternalServerError">a delegate that is called when the remote service returns 500 (InternalServerError).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task GetSystemFdeKeyViaIdentity(global::System.String viaIdentity, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemfdekey>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onBadRequest, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onUnauthorized, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onForbidden, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onNotFound, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onConflict, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onInternalServerError, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systems/(?<system_id>[^/]+)/fdekey$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systems/{system_id}/fdekey'");
                }

                // replace URI parameters with values from identity
                var systemId = _match.Groups["system_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systems/"
                        + systemId
                        + "/fdekey"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.GetSystemFdeKey_Call(request,onOk,onBadRequest,onUnauthorized,onForbidden,onNotFound,onConflict,onInternalServerError,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="GetSystemFdeKey" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onBadRequest">a delegate that is called when the remote service returns 400 (BadRequest).</param>
        /// <param name="onUnauthorized">a delegate that is called when the remote service returns 401 (Unauthorized).</param>
        /// <param name="onForbidden">a delegate that is called when the remote service returns 403 (Forbidden).</param>
        /// <param name="onNotFound">a delegate that is called when the remote service returns 404 (NotFound).</param>
        /// <param name="onConflict">a delegate that is called when the remote service returns 409 (Conflict).</param>
        /// <param name="onInternalServerError">a delegate that is called when the remote service returns 500 (InternalServerError).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task GetSystemFdeKey_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemfdekey>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onBadRequest, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onUnauthorized, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onForbidden, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onNotFound, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onConflict, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onInternalServerError, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloud.SDK.V2.Models.Systemfdekey.FromJson(JumpCloud.SDK.V2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.BadRequest:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onBadRequest(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloud.SDK.V2.Models.Errorresponse.FromJson(JumpCloud.SDK.V2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.Unauthorized:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onUnauthorized(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloud.SDK.V2.Models.Errorresponse.FromJson(JumpCloud.SDK.V2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.Forbidden:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onForbidden(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloud.SDK.V2.Models.Errorresponse.FromJson(JumpCloud.SDK.V2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.NotFound:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onNotFound(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloud.SDK.V2.Models.Errorresponse.FromJson(JumpCloud.SDK.V2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.Conflict:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onConflict(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloud.SDK.V2.Models.Errorresponse.FromJson(JumpCloud.SDK.V2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.InternalServerError:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onInternalServerError(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloud.SDK.V2.Models.Errorresponse.FromJson(JumpCloud.SDK.V2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="GetSystemFdeKey" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="systemId"></param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task GetSystemFdeKey_Validate(string systemId, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(systemId),systemId);
            }
        }

        /// <summary>
        /// This endpoint returns the details of a System Group.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/systemgroups/{Group_ID} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="id">ObjectID of the System Group.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task GetSystemGroup(string id, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemGroup>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systemgroups/"
                        + global::System.Uri.EscapeDataString(id)

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.GetSystemGroup_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns the details of a System Group.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/systemgroups/{Group_ID} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task GetSystemGroupViaIdentity(global::System.String viaIdentity, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemGroup>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systemgroups/(?<id>[^/]+)$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systemgroups/{id}'");
                }

                // replace URI parameters with values from identity
                var id = _match.Groups["id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systemgroups/"
                        + id

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.GetSystemGroup_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="GetSystemGroup" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task GetSystemGroup_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemGroup>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloud.SDK.V2.Models.SystemGroup.FromJson(JumpCloud.SDK.V2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="GetSystemGroup" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="id">ObjectID of the System Group.</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task GetSystemGroup_Validate(string id, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(id),id);
            }
        }

        /// <summary>
        /// This endpoint returns the details of a User Group.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/usergroups/{GroupID} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="id">ObjectID of the User Group.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task GetUserGroup(string id, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IUserGroup>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/usergroups/"
                        + global::System.Uri.EscapeDataString(id)

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.GetUserGroup_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns the details of a User Group.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/usergroups/{GroupID} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task GetUserGroupViaIdentity(global::System.String viaIdentity, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IUserGroup>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/usergroups/(?<id>[^/]+)$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/usergroups/{id}'");
                }

                // replace URI parameters with values from identity
                var id = _match.Groups["id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/usergroups/"
                        + id

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.GetUserGroup_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="GetUserGroup" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task GetUserGroup_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IUserGroup>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloud.SDK.V2.Models.UserGroup.FromJson(JumpCloud.SDK.V2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="GetUserGroup" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="id">ObjectID of the User Group.</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task GetUserGroup_Validate(string id, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(id),id);
            }
        }

        /// <summary>
        /// This endpoint will return all the available information about an instance of Workday.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/workdays/ \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="id"></param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task GetWorkday(string id, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IWorkdayOutput>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/workdays/"
                        + global::System.Uri.EscapeDataString(id)

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.GetWorkday_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all the available information about an instance of Workday.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/workdays/ \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task GetWorkdayViaIdentity(global::System.String viaIdentity, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IWorkdayOutput>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/workdays/(?<id>[^/]+)$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/workdays/{id}'");
                }

                // replace URI parameters with values from identity
                var id = _match.Groups["id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/workdays/"
                        + id

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.GetWorkday_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="GetWorkday" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task GetWorkday_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IWorkdayOutput>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloud.SDK.V2.Models.WorkdayOutput.FromJson(JumpCloud.SDK.V2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="GetWorkday" /> method. Call this like the actual call, but you will get validation events
        /// back.
        /// </summary>
        /// <param name="id"></param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task GetWorkday_Validate(string id, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(id),id);
            }
        }

        /// <summary>
        /// The endpoint allows you to create a Workday Import request.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/workdays/{WorkdayID}/import \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '[
        /// {
        /// "email":"{email}",
        /// "firstname":"{firstname}",
        /// "lastname":"{firstname}",
        /// "username":"{username}",
        /// "attributes":[
        /// {"name":"EmployeeID","value":"0000"},
        /// {"name":"WorkdayID","value":"name.name"}
        /// ]
        ///
        /// }
        /// ]
        /// ```
        /// </summary>
        /// <param name="workdayId"></param>
        /// <param name="body"></param>
        /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ImportWorkday(string workdayId, JumpCloud.SDK.V2.Models.IBulkUserCreate[] body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IJobId>, global::System.Threading.Tasks.Task> onCreated, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/workdays/"
                        + global::System.Uri.EscapeDataString(workdayId)
                        + "/import"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? new JumpCloud.SDK.V2.Runtime.Json.XNodeArray(global::System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Select(body, (__x) => __x?.ToJson(null, JumpCloud.SDK.V2.Runtime.SerializationMode.None)))) : null, global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ImportWorkday_Call(request,onCreated,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint provides a list of job results from the workday import and will contain all imported data from Workday.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/workdays/{WorkdayID}/import/{ImportJobID}/results \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="id"></param>
        /// <param name="jobId"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ImportWorkdayResult(string id, string jobId, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IJobWorkresult[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/workdays/"
                        + global::System.Uri.EscapeDataString(id)
                        + "/import/"
                        + global::System.Uri.EscapeDataString(jobId)
                        + "/results"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ImportWorkdayResult_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint provides a list of job results from the workday import and will contain all imported data from Workday.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/workdays/{WorkdayID}/import/{ImportJobID}/results \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ImportWorkdayResultViaIdentity(global::System.String viaIdentity, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IJobWorkresult[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/workdays/(?<id>[^/]+)/import/(?<job_id>[^/]+)/results$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/workdays/{id}/import/{job_id}/results'");
                }

                // replace URI parameters with values from identity
                var id = _match.Groups["id"].Value;
                var jobId = _match.Groups["job_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/workdays/"
                        + id
                        + "/import/"
                        + jobId
                        + "/results"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ImportWorkdayResult_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ImportWorkdayResult" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ImportWorkdayResult_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IJobWorkresult[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.IJobWorkresult[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.IJobWorkresult) (JumpCloud.SDK.V2.Models.JobWorkresult.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ImportWorkdayResult" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="id"></param>
        /// <param name="jobId"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ImportWorkdayResult_Validate(string id, string jobId, int? limit, int? skip, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(id),id);
                await eventListener.AssertNotNull(nameof(jobId),jobId);
            }
        }

        /// <summary>
        /// The endpoint allows you to create a Workday Import request.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/workdays/{WorkdayID}/import \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '[
        /// {
        /// "email":"{email}",
        /// "firstname":"{firstname}",
        /// "lastname":"{firstname}",
        /// "username":"{username}",
        /// "attributes":[
        /// {"name":"EmployeeID","value":"0000"},
        /// {"name":"WorkdayID","value":"name.name"}
        /// ]
        ///
        /// }
        /// ]
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="body"></param>
        /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ImportWorkdayViaIdentity(global::System.String viaIdentity, JumpCloud.SDK.V2.Models.IBulkUserCreate[] body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IJobId>, global::System.Threading.Tasks.Task> onCreated, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/workdays/(?<workday_id>[^/]+)/import$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/workdays/{workday_id}/import'");
                }

                // replace URI parameters with values from identity
                var workdayId = _match.Groups["workday_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/workdays/"
                        + workdayId
                        + "/import"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? new JumpCloud.SDK.V2.Runtime.Json.XNodeArray(global::System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Select(body, (__x) => __x?.ToJson(null, JumpCloud.SDK.V2.Runtime.SerializationMode.None)))) : null, global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ImportWorkday_Call(request,onCreated,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ImportWorkday" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ImportWorkday_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IJobId>, global::System.Threading.Tasks.Task> onCreated, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.Created:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onCreated(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloud.SDK.V2.Models.JobId.FromJson(JumpCloud.SDK.V2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ImportWorkday" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="workdayId"></param>
        /// <param name="body"></param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ImportWorkday_Validate(string workdayId, JumpCloud.SDK.V2.Models.IBulkUserCreate[] body, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(workdayId),workdayId);
                if (body != null ) {
                        for (int __i = 0; __i < body.Length; __i++) {
                          await eventListener.AssertObjectIsValid($"body[{__i}]", body[__i]);
                        }
                      }
            }
        }

        /// <summary>
        /// This endpoint allows you to list all your Active Directory Instances.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/activedirectories/ \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListActiveDirectory(string[] filter, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IActiveDirectoryOutput[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/activedirectories"
                        + "?"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListActiveDirectory_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns the direct associations of this Active Directory instance.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example Active Directory and
        /// Users.
        /// #### Sample Request
        /// ```
        /// curl -X GET 'https://console.jumpcloud.com/api/v2/activedirectories/{ActiveDirectory_ID}/associations?targets=user \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="activedirectoryId">ObjectID of the Active Directory instance.</param>
        /// <param name="targets"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListActiveDirectoryAssociation(string activedirectoryId, string[] targets, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/activedirectories/"
                        + global::System.Uri.EscapeDataString(activedirectoryId)
                        + "/associations"
                        + "?"
                        + (null != targets  && targets.Length > 0 ? "targets=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(targets, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListActiveDirectoryAssociation_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns the direct associations of this Active Directory instance.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example Active Directory and
        /// Users.
        /// #### Sample Request
        /// ```
        /// curl -X GET 'https://console.jumpcloud.com/api/v2/activedirectories/{ActiveDirectory_ID}/associations?targets=user \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="targets"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListActiveDirectoryAssociationViaIdentity(global::System.String viaIdentity, string[] targets, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/activedirectories/(?<activedirectory_id>[^/]+)/associations$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/activedirectories/{activedirectory_id}/associations'");
                }

                // replace URI parameters with values from identity
                var activedirectoryId = _match.Groups["activedirectory_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/activedirectories/"
                        + activedirectoryId
                        + "/associations"
                        + "?"
                        + (null != targets  && targets.Length > 0 ? "targets=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(targets, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListActiveDirectoryAssociation_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListActiveDirectoryAssociation" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListActiveDirectoryAssociation_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.IGraphConnection[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.IGraphConnection) (JumpCloud.SDK.V2.Models.GraphConnection.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListActiveDirectoryAssociation" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="activedirectoryId">ObjectID of the Active Directory instance.</param>
        /// <param name="targets"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListActiveDirectoryAssociation_Validate(string activedirectoryId, string[] targets, int? limit, int? skip, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(activedirectoryId),activedirectoryId);
                await eventListener.AssertNotNull(nameof(targets), targets);
                if (targets != null ) {
                        for (int __i = 0; __i < targets.Length; __i++) {
                          await eventListener.AssertEnum($"targets[{__i}]",targets[__i],@"active_directory", @"application", @"command", @"g_suite", @"ldap_server", @"office_365", @"policy", @"radius_server", @"system", @"system_group", @"user", @"user_group");
                        }
                      }
            }
        }

        /// <summary>
        /// This endpoint will return all Users Groups bound to an Active Directory instance, either directly or indirectly, essentially
        /// traversing the JumpCloud Graph for your Organization.
        /// Each element will contain the group's type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this Active Directory instance to the corresponding User Group; this array
        /// represents all grouping and/or associations that would have to be removed to deprovision the User Group from this Active
        /// Directory instance.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/activedirectories/{ActiveDirectory_ID}/usergroups \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="activedirectoryId">ObjectID of the Active Directory instance.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListActiveDirectoryTraverseUserGroup(string activedirectoryId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/activedirectories/"
                        + global::System.Uri.EscapeDataString(activedirectoryId)
                        + "/usergroups"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListActiveDirectoryTraverseUserGroup_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all Users Groups bound to an Active Directory instance, either directly or indirectly, essentially
        /// traversing the JumpCloud Graph for your Organization.
        /// Each element will contain the group's type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this Active Directory instance to the corresponding User Group; this array
        /// represents all grouping and/or associations that would have to be removed to deprovision the User Group from this Active
        /// Directory instance.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/activedirectories/{ActiveDirectory_ID}/usergroups \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListActiveDirectoryTraverseUserGroupViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/activedirectories/(?<activedirectory_id>[^/]+)/usergroups$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/activedirectories/{activedirectory_id}/usergroups'");
                }

                // replace URI parameters with values from identity
                var activedirectoryId = _match.Groups["activedirectory_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/activedirectories/"
                        + activedirectoryId
                        + "/usergroups"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListActiveDirectoryTraverseUserGroup_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// Actual wire call for <see cref="ListActiveDirectoryTraverseUserGroup" /> method.
        /// </summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListActiveDirectoryTraverseUserGroup_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1) (JumpCloud.SDK.V2.Models.GraphObjectWithPaths1.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListActiveDirectoryTraverseUserGroup" /> method. Call this like the actual call, but
        /// you will get validation events back.
        /// </summary>
        /// <param name="activedirectoryId">ObjectID of the Active Directory instance.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListActiveDirectoryTraverseUserGroup_Validate(string activedirectoryId, int? limit, int? skip, string[] filter, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(activedirectoryId),activedirectoryId);
            }
        }

        /// <summary>
        /// This endpoint allows you to list all your Active Directory Instances.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/activedirectories/ \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListActiveDirectoryViaIdentity(global::System.String viaIdentity, string[] filter, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IActiveDirectoryOutput[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/activedirectories$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/activedirectories'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/activedirectories"
                        + "?"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListActiveDirectory_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListActiveDirectory" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListActiveDirectory_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IActiveDirectoryOutput[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.IActiveDirectoryOutput[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.IActiveDirectoryOutput) (JumpCloud.SDK.V2.Models.ActiveDirectoryOutput.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListActiveDirectory" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListActiveDirectory_Validate(string[] filter, int? limit, int? skip, string[] sort, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {

            }
        }

        /// <summary>
        /// This endpoint will return the _direct_ associations of an Application. A direct association can be a non-homogeneous relationship
        /// between 2 different objects, for example Applications and User Groups.
        /// #### Sample Request
        /// ```
        /// curl -X GET 'https://console.jumpcloud.com/api/v2/applications/{Application_ID}/associations?targets=user_group \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="applicationId">ObjectID of the Application.</param>
        /// <param name="targets"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListApplicationAssociation(string applicationId, string[] targets, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/applications/"
                        + global::System.Uri.EscapeDataString(applicationId)
                        + "/associations"
                        + "?"
                        + (null != targets  && targets.Length > 0 ? "targets=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(targets, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListApplicationAssociation_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return the _direct_ associations of an Application. A direct association can be a non-homogeneous relationship
        /// between 2 different objects, for example Applications and User Groups.
        /// #### Sample Request
        /// ```
        /// curl -X GET 'https://console.jumpcloud.com/api/v2/applications/{Application_ID}/associations?targets=user_group \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="targets"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListApplicationAssociationViaIdentity(global::System.String viaIdentity, string[] targets, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/applications/(?<application_id>[^/]+)/associations$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/applications/{application_id}/associations'");
                }

                // replace URI parameters with values from identity
                var applicationId = _match.Groups["application_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/applications/"
                        + applicationId
                        + "/associations"
                        + "?"
                        + (null != targets  && targets.Length > 0 ? "targets=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(targets, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListApplicationAssociation_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListApplicationAssociation" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListApplicationAssociation_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.IGraphConnection[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.IGraphConnection) (JumpCloud.SDK.V2.Models.GraphConnection.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListApplicationAssociation" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="applicationId">ObjectID of the Application.</param>
        /// <param name="targets"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListApplicationAssociation_Validate(string applicationId, string[] targets, int? limit, int? skip, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(applicationId),applicationId);
                await eventListener.AssertNotNull(nameof(targets), targets);
                if (targets != null ) {
                        for (int __i = 0; __i < targets.Length; __i++) {
                          await eventListener.AssertEnum($"targets[{__i}]",targets[__i],@"active_directory", @"application", @"command", @"g_suite", @"ldap_server", @"office_365", @"policy", @"radius_server", @"system", @"system_group", @"user", @"user_group");
                        }
                      }
            }
        }

        /// <summary>
        /// This endpoint will return all Users bound to an Application, either directly or indirectly, essentially traversing the
        /// JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this Application to the corresponding User; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the User from this Application.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/applications/{Application_ID}/users \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="applicationId">ObjectID of the Application.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListApplicationTraverseUser(string applicationId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/applications/"
                        + global::System.Uri.EscapeDataString(applicationId)
                        + "/users"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListApplicationTraverseUser_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all Users Groups bound to an Application, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the group's type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this Application to the corresponding User Group; this array represents all
        /// grouping and/or associations that would have to be removed to deprovision the User Group from this Application.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/applications/{Application_ID}/usergroups \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="applicationId">ObjectID of the Application.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListApplicationTraverseUserGroup(string applicationId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/applications/"
                        + global::System.Uri.EscapeDataString(applicationId)
                        + "/usergroups"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListApplicationTraverseUserGroup_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all Users Groups bound to an Application, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the group's type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this Application to the corresponding User Group; this array represents all
        /// grouping and/or associations that would have to be removed to deprovision the User Group from this Application.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/applications/{Application_ID}/usergroups \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListApplicationTraverseUserGroupViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/applications/(?<application_id>[^/]+)/usergroups$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/applications/{application_id}/usergroups'");
                }

                // replace URI parameters with values from identity
                var applicationId = _match.Groups["application_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/applications/"
                        + applicationId
                        + "/usergroups"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListApplicationTraverseUserGroup_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListApplicationTraverseUserGroup" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListApplicationTraverseUserGroup_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1) (JumpCloud.SDK.V2.Models.GraphObjectWithPaths1.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListApplicationTraverseUserGroup" /> method. Call this like the actual call, but you
        /// will get validation events back.
        /// </summary>
        /// <param name="applicationId">ObjectID of the Application.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListApplicationTraverseUserGroup_Validate(string applicationId, int? limit, int? skip, string[] filter, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(applicationId),applicationId);
            }
        }

        /// <summary>
        /// This endpoint will return all Users bound to an Application, either directly or indirectly, essentially traversing the
        /// JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this Application to the corresponding User; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the User from this Application.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/applications/{Application_ID}/users \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListApplicationTraverseUserViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/applications/(?<application_id>[^/]+)/users$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/applications/{application_id}/users'");
                }

                // replace URI parameters with values from identity
                var applicationId = _match.Groups["application_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/applications/"
                        + applicationId
                        + "/users"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListApplicationTraverseUser_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListApplicationTraverseUser" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListApplicationTraverseUser_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1) (JumpCloud.SDK.V2.Models.GraphObjectWithPaths1.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListApplicationTraverseUser" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="applicationId">ObjectID of the Application.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListApplicationTraverseUser_Validate(string applicationId, int? limit, int? skip, string[] filter, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(applicationId),applicationId);
            }
        }

        /// <summary>
        /// This endpoint will return the _direct_ associations of this Command.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example Commands and User
        /// Groups.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/commands/{Command_ID}/associations?targets=system_group \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="commandId">ObjectID of the Command.</param>
        /// <param name="targets"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListCommandAssociation(string commandId, string[] targets, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/commands/"
                        + global::System.Uri.EscapeDataString(commandId)
                        + "/associations"
                        + "?"
                        + (null != targets  && targets.Length > 0 ? "targets=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(targets, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListCommandAssociation_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return the _direct_ associations of this Command.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example Commands and User
        /// Groups.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/commands/{Command_ID}/associations?targets=system_group \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="targets"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListCommandAssociationViaIdentity(global::System.String viaIdentity, string[] targets, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/commands/(?<command_id>[^/]+)/associations$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/commands/{command_id}/associations'");
                }

                // replace URI parameters with values from identity
                var commandId = _match.Groups["command_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/commands/"
                        + commandId
                        + "/associations"
                        + "?"
                        + (null != targets  && targets.Length > 0 ? "targets=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(targets, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListCommandAssociation_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListCommandAssociation" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListCommandAssociation_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.IGraphConnection[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.IGraphConnection) (JumpCloud.SDK.V2.Models.GraphConnection.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListCommandAssociation" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="commandId">ObjectID of the Command.</param>
        /// <param name="targets"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListCommandAssociation_Validate(string commandId, string[] targets, int? limit, int? skip, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(commandId),commandId);
                await eventListener.AssertNotNull(nameof(targets), targets);
                if (targets != null ) {
                        for (int __i = 0; __i < targets.Length; __i++) {
                          await eventListener.AssertEnum($"targets[{__i}]",targets[__i],@"active_directory", @"application", @"command", @"g_suite", @"ldap_server", @"office_365", @"policy", @"radius_server", @"system", @"system_group", @"user", @"user_group");
                        }
                      }
            }
        }

        /// <summary>
        /// This endpoint will return all Systems bound to a Command, either directly or indirectly, essentially traversing the JumpCloud
        /// Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this Command to the corresponding System; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the System from this Command.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/commands/{Command_ID}/systems \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="commandId">ObjectID of the Command.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListCommandTraverseSystem(string commandId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/commands/"
                        + global::System.Uri.EscapeDataString(commandId)
                        + "/systems"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListCommandTraverseSystem_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all System Groups bound to a Command, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the group's type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this Command to the corresponding System Group; this array represents all
        /// grouping and/or associations that would have to be removed to deprovision the System Group from this Command.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/commands/{Command_ID}/systemgroups \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="commandId">ObjectID of the Command.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListCommandTraverseSystemGroup(string commandId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/commands/"
                        + global::System.Uri.EscapeDataString(commandId)
                        + "/systemgroups"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListCommandTraverseSystemGroup_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all System Groups bound to a Command, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the group's type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this Command to the corresponding System Group; this array represents all
        /// grouping and/or associations that would have to be removed to deprovision the System Group from this Command.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/commands/{Command_ID}/systemgroups \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListCommandTraverseSystemGroupViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/commands/(?<command_id>[^/]+)/systemgroups$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/commands/{command_id}/systemgroups'");
                }

                // replace URI parameters with values from identity
                var commandId = _match.Groups["command_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/commands/"
                        + commandId
                        + "/systemgroups"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListCommandTraverseSystemGroup_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListCommandTraverseSystemGroup" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListCommandTraverseSystemGroup_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1) (JumpCloud.SDK.V2.Models.GraphObjectWithPaths1.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListCommandTraverseSystemGroup" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="commandId">ObjectID of the Command.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListCommandTraverseSystemGroup_Validate(string commandId, int? limit, int? skip, string[] filter, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(commandId),commandId);
            }
        }

        /// <summary>
        /// This endpoint will return all Systems bound to a Command, either directly or indirectly, essentially traversing the JumpCloud
        /// Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this Command to the corresponding System; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the System from this Command.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/commands/{Command_ID}/systems \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListCommandTraverseSystemViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/commands/(?<command_id>[^/]+)/systems$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/commands/{command_id}/systems'");
                }

                // replace URI parameters with values from identity
                var commandId = _match.Groups["command_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/commands/"
                        + commandId
                        + "/systems"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListCommandTraverseSystem_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListCommandTraverseSystem" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListCommandTraverseSystem_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1) (JumpCloud.SDK.V2.Models.GraphObjectWithPaths1.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListCommandTraverseSystem" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="commandId">ObjectID of the Command.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListCommandTraverseSystem_Validate(string commandId, int? limit, int? skip, string[] filter, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(commandId),commandId);
            }
        }

        /// <summary>
        /// This endpoint returns all active directories (LDAP, O365 Suite, G-Suite).
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/directories \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onDefault">a delegate that is called when the remote service returns default (any response code not handled
        /// elsewhere).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListDirectory(int? limit, string[] sort, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IDirectory[]>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IError>, global::System.Threading.Tasks.Task> onDefault, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/directories"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListDirectory_Call(request,onOk,onDefault,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns all active directories (LDAP, O365 Suite, G-Suite).
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/directories \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onDefault">a delegate that is called when the remote service returns default (any response code not handled
        /// elsewhere).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListDirectoryViaIdentity(global::System.String viaIdentity, int? limit, string[] sort, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IDirectory[]>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IError>, global::System.Threading.Tasks.Task> onDefault, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/directories$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/directories'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/directories"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListDirectory_Call(request,onOk,onDefault,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListDirectory" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onDefault">a delegate that is called when the remote service returns default (any response code not handled
        /// elsewhere).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListDirectory_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IDirectory[]>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IError>, global::System.Threading.Tasks.Task> onDefault, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.IDirectory[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.IDirectory) (JumpCloud.SDK.V2.Models.Directory.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onDefault(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloud.SDK.V2.Models.Error.FromJson(JumpCloud.SDK.V2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListDirectory" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListDirectory_Validate(int? limit, string[] sort, int? skip, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {

            }
        }

        /// <summary>
        /// This endpoint returns all the Duo accounts for your organization. Note: There can currently only be one Duo account for
        /// your organization.
        /// #### Sample Request
        /// ```
        /// curl https://console.jumpcloud.com/api/v2/duo/accounts \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListDuoAccount(global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IDuoAccount[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/duo/accounts"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListDuoAccount_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListDuoAccount" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListDuoAccount_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IDuoAccount[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.IDuoAccount[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.IDuoAccount) (JumpCloud.SDK.V2.Models.DuoAccount.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListDuoAccount" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListDuoAccount_Validate(JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {

            }
        }

        /// <summary>
        /// This endpoint returns all the Duo applications for the specified Duo account. Note: There can currently only be one Duo
        /// application for your organization.
        /// #### Sample Request
        /// ```
        /// curl https://console.jumpcloud.com/api/v2/duo/accounts/{ACCOUNT_ID}/applications \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="accountId"></param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onBadRequest">a delegate that is called when the remote service returns 400 (BadRequest).</param>
        /// <param name="onUnauthorized">a delegate that is called when the remote service returns 401 (Unauthorized).</param>
        /// <param name="onForbidden">a delegate that is called when the remote service returns 403 (Forbidden).</param>
        /// <param name="onNotFound">a delegate that is called when the remote service returns 404 (NotFound).</param>
        /// <param name="onConflict">a delegate that is called when the remote service returns 409 (Conflict).</param>
        /// <param name="onInternalServerError">a delegate that is called when the remote service returns 500 (InternalServerError).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListDuoApplication(string accountId, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IDuoApplication[]>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onBadRequest, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onUnauthorized, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onForbidden, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onNotFound, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onConflict, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onInternalServerError, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/duo/accounts/"
                        + global::System.Uri.EscapeDataString(accountId)
                        + "/applications"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListDuoApplication_Call(request,onOk,onBadRequest,onUnauthorized,onForbidden,onNotFound,onConflict,onInternalServerError,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns all the Duo applications for the specified Duo account. Note: There can currently only be one Duo
        /// application for your organization.
        /// #### Sample Request
        /// ```
        /// curl https://console.jumpcloud.com/api/v2/duo/accounts/{ACCOUNT_ID}/applications \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onBadRequest">a delegate that is called when the remote service returns 400 (BadRequest).</param>
        /// <param name="onUnauthorized">a delegate that is called when the remote service returns 401 (Unauthorized).</param>
        /// <param name="onForbidden">a delegate that is called when the remote service returns 403 (Forbidden).</param>
        /// <param name="onNotFound">a delegate that is called when the remote service returns 404 (NotFound).</param>
        /// <param name="onConflict">a delegate that is called when the remote service returns 409 (Conflict).</param>
        /// <param name="onInternalServerError">a delegate that is called when the remote service returns 500 (InternalServerError).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListDuoApplicationViaIdentity(global::System.String viaIdentity, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IDuoApplication[]>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onBadRequest, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onUnauthorized, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onForbidden, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onNotFound, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onConflict, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onInternalServerError, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/duo/accounts/(?<account_id>[^/]+)/applications$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/duo/accounts/{account_id}/applications'");
                }

                // replace URI parameters with values from identity
                var accountId = _match.Groups["account_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/duo/accounts/"
                        + accountId
                        + "/applications"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListDuoApplication_Call(request,onOk,onBadRequest,onUnauthorized,onForbidden,onNotFound,onConflict,onInternalServerError,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListDuoApplication" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onBadRequest">a delegate that is called when the remote service returns 400 (BadRequest).</param>
        /// <param name="onUnauthorized">a delegate that is called when the remote service returns 401 (Unauthorized).</param>
        /// <param name="onForbidden">a delegate that is called when the remote service returns 403 (Forbidden).</param>
        /// <param name="onNotFound">a delegate that is called when the remote service returns 404 (NotFound).</param>
        /// <param name="onConflict">a delegate that is called when the remote service returns 409 (Conflict).</param>
        /// <param name="onInternalServerError">a delegate that is called when the remote service returns 500 (InternalServerError).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListDuoApplication_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IDuoApplication[]>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onBadRequest, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onUnauthorized, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onForbidden, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onNotFound, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onConflict, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onInternalServerError, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.IDuoApplication[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.IDuoApplication) (JumpCloud.SDK.V2.Models.DuoApplication.FromJson(__x) )) ))() : null));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.BadRequest:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onBadRequest(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloud.SDK.V2.Models.Errorresponse.FromJson(JumpCloud.SDK.V2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.Unauthorized:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onUnauthorized(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloud.SDK.V2.Models.Errorresponse.FromJson(JumpCloud.SDK.V2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.Forbidden:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onForbidden(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloud.SDK.V2.Models.Errorresponse.FromJson(JumpCloud.SDK.V2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.NotFound:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onNotFound(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloud.SDK.V2.Models.Errorresponse.FromJson(JumpCloud.SDK.V2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.Conflict:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onConflict(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloud.SDK.V2.Models.Errorresponse.FromJson(JumpCloud.SDK.V2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.InternalServerError:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onInternalServerError(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloud.SDK.V2.Models.Errorresponse.FromJson(JumpCloud.SDK.V2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListDuoApplication" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="accountId"></param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListDuoApplication_Validate(string accountId, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(accountId),accountId);
            }
        }

        /// <summary>
        /// This endpoint returns the _direct_ associations of this G Suite instance.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example G Suite and Users.
        /// #### Sample Request
        /// ```
        /// curl -X GET 'https://console.jumpcloud.com/api/v2/gsuites/{Gsuite_ID}/associations?targets=user_group \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="gsuiteId">ObjectID of the G Suite instance.</param>
        /// <param name="targets"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGSuiteAssociation(string gsuiteId, string[] targets, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/gsuites/"
                        + global::System.Uri.EscapeDataString(gsuiteId)
                        + "/associations"
                        + "?"
                        + (null != targets  && targets.Length > 0 ? "targets=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(targets, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGSuiteAssociation_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns the _direct_ associations of this G Suite instance.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example G Suite and Users.
        /// #### Sample Request
        /// ```
        /// curl -X GET 'https://console.jumpcloud.com/api/v2/gsuites/{Gsuite_ID}/associations?targets=user_group \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="targets"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGSuiteAssociationViaIdentity(global::System.String viaIdentity, string[] targets, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/gsuites/(?<gsuite_id>[^/]+)/associations$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/gsuites/{gsuite_id}/associations'");
                }

                // replace URI parameters with values from identity
                var gsuiteId = _match.Groups["gsuite_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/gsuites/"
                        + gsuiteId
                        + "/associations"
                        + "?"
                        + (null != targets  && targets.Length > 0 ? "targets=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(targets, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGSuiteAssociation_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListGSuiteAssociation" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGSuiteAssociation_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.IGraphConnection[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.IGraphConnection) (JumpCloud.SDK.V2.Models.GraphConnection.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListGSuiteAssociation" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="gsuiteId">ObjectID of the G Suite instance.</param>
        /// <param name="targets"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGSuiteAssociation_Validate(string gsuiteId, string[] targets, int? limit, int? skip, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(gsuiteId),gsuiteId);
                await eventListener.AssertNotNull(nameof(targets), targets);
                if (targets != null ) {
                        for (int __i = 0; __i < targets.Length; __i++) {
                          await eventListener.AssertEnum($"targets[{__i}]",targets[__i],@"active_directory", @"application", @"command", @"g_suite", @"ldap_server", @"office_365", @"policy", @"radius_server", @"system", @"system_group", @"user", @"user_group");
                        }
                      }
            }
        }

        /// <summary>
        /// This endpoint returns all graph translation rules for a specific G Suite instance. These rules specify how JumpCloud attributes
        /// translate to [G Suite Admin SDK](https://developers.google.com/admin-sdk/directory/) attributes.
        /// ##### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/gsuites/{gsuite_id}/translationrules \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="gsuiteId"></param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGSuiteTranslationRule(string gsuiteId, string[] filter, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGSuiteTranslationRule[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/gsuites/"
                        + global::System.Uri.EscapeDataString(gsuiteId)
                        + "/translationrules"
                        + "?"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGSuiteTranslationRule_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns all graph translation rules for a specific G Suite instance. These rules specify how JumpCloud attributes
        /// translate to [G Suite Admin SDK](https://developers.google.com/admin-sdk/directory/) attributes.
        /// ##### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/gsuites/{gsuite_id}/translationrules \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGSuiteTranslationRuleViaIdentity(global::System.String viaIdentity, string[] filter, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGSuiteTranslationRule[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/gsuites/(?<gsuite_id>[^/]+)/translationrules$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/gsuites/{gsuite_id}/translationrules'");
                }

                // replace URI parameters with values from identity
                var gsuiteId = _match.Groups["gsuite_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/gsuites/"
                        + gsuiteId
                        + "/translationrules"
                        + "?"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGSuiteTranslationRule_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListGSuiteTranslationRule" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGSuiteTranslationRule_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGSuiteTranslationRule[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.IGSuiteTranslationRule[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.IGSuiteTranslationRule) (JumpCloud.SDK.V2.Models.GSuiteTranslationRule.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListGSuiteTranslationRule" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="gsuiteId"></param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGSuiteTranslationRule_Validate(string gsuiteId, string[] filter, int? limit, int? skip, string[] sort, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(gsuiteId),gsuiteId);
            }
        }

        /// <summary>
        /// This endpoint will return all Users bound to a G Suite instance, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this G Suite instance to the corresponding User; this array represents all
        /// grouping and/or associations that would have to be removed to deprovision the User from this G Suite instance.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/gsuites/{Gsuite_ID}/users \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="gsuiteId">ObjectID of the G Suite instance.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGSuiteTraverseUser(string gsuiteId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/gsuites/"
                        + global::System.Uri.EscapeDataString(gsuiteId)
                        + "/users"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGSuiteTraverseUser_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all User Groups bound to an G Suite instance, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the group's type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this G Suite instance to the corresponding User Group; this array represents
        /// all grouping and/or associations that would have to be removed to deprovision the User Group from this G Suite instance.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/gsuites/{GSuite_ID}/usergroups \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="gsuiteId">ObjectID of the G Suite instance.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGSuiteTraverseUserGroup(string gsuiteId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/gsuites/"
                        + global::System.Uri.EscapeDataString(gsuiteId)
                        + "/usergroups"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGSuiteTraverseUserGroup_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all User Groups bound to an G Suite instance, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the group's type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this G Suite instance to the corresponding User Group; this array represents
        /// all grouping and/or associations that would have to be removed to deprovision the User Group from this G Suite instance.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/gsuites/{GSuite_ID}/usergroups \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGSuiteTraverseUserGroupViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/gsuites/(?<gsuite_id>[^/]+)/usergroups$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/gsuites/{gsuite_id}/usergroups'");
                }

                // replace URI parameters with values from identity
                var gsuiteId = _match.Groups["gsuite_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/gsuites/"
                        + gsuiteId
                        + "/usergroups"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGSuiteTraverseUserGroup_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListGSuiteTraverseUserGroup" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGSuiteTraverseUserGroup_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1) (JumpCloud.SDK.V2.Models.GraphObjectWithPaths1.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListGSuiteTraverseUserGroup" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="gsuiteId">ObjectID of the G Suite instance.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGSuiteTraverseUserGroup_Validate(string gsuiteId, int? limit, int? skip, string[] filter, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(gsuiteId),gsuiteId);
            }
        }

        /// <summary>
        /// This endpoint will return all Users bound to a G Suite instance, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this G Suite instance to the corresponding User; this array represents all
        /// grouping and/or associations that would have to be removed to deprovision the User from this G Suite instance.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/gsuites/{Gsuite_ID}/users \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGSuiteTraverseUserViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/gsuites/(?<gsuite_id>[^/]+)/users$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/gsuites/{gsuite_id}/users'");
                }

                // replace URI parameters with values from identity
                var gsuiteId = _match.Groups["gsuite_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/gsuites/"
                        + gsuiteId
                        + "/users"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGSuiteTraverseUser_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListGSuiteTraverseUser" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGSuiteTraverseUser_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1) (JumpCloud.SDK.V2.Models.GraphObjectWithPaths1.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListGSuiteTraverseUser" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="gsuiteId">ObjectID of the G Suite instance.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGSuiteTraverseUser_Validate(string gsuiteId, int? limit, int? skip, string[] filter, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(gsuiteId),gsuiteId);
            }
        }

        /// <summary>
        /// This endpoint returns all Groups that exist in your organization.
        /// #### Available filter fields:
        /// - `name`
        /// - `disabled`
        /// - `type`
        /// #### Sample Request
        /// ```
        /// curl -X GET \
        /// https://console.jumpcloud.com/api/v2/groups \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onDefault">a delegate that is called when the remote service returns default (any response code not handled
        /// elsewhere).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGroup(string[] filter, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGroup[]>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IError>, global::System.Threading.Tasks.Task> onDefault, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/groups"
                        + "?"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGroup_Call(request,onOk,onDefault,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns all Groups that exist in your organization.
        /// #### Available filter fields:
        /// - `name`
        /// - `disabled`
        /// - `type`
        /// #### Sample Request
        /// ```
        /// curl -X GET \
        /// https://console.jumpcloud.com/api/v2/groups \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onDefault">a delegate that is called when the remote service returns default (any response code not handled
        /// elsewhere).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListGroupViaIdentity(global::System.String viaIdentity, string[] filter, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGroup[]>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IError>, global::System.Threading.Tasks.Task> onDefault, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/groups$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/groups'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/groups"
                        + "?"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListGroup_Call(request,onOk,onDefault,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListGroup" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onDefault">a delegate that is called when the remote service returns default (any response code not handled
        /// elsewhere).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGroup_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGroup[]>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IError>, global::System.Threading.Tasks.Task> onDefault, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.IGroup[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.IGroup) (JumpCloud.SDK.V2.Models.Group.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onDefault(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloud.SDK.V2.Models.Error.FromJson(JumpCloud.SDK.V2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListGroup" /> method. Call this like the actual call, but you will get validation events
        /// back.
        /// </summary>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListGroup_Validate(string[] filter, int? limit, int? skip, string[] sort, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {

            }
        }

        /// <summary>
        /// This endpoint returns the object IDs of your LDAP servers.
        /// ##### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/ldapservers/ \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// </summary>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListLdapServer(string[] filter, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ILdapServerOutput[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/ldapservers"
                        + "?"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListLdapServer_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns the _direct_ associations of this LDAP Server.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example LDAP and Users.
        /// #### Sample Request
        /// ```
        /// curl -X GET 'https://console.jumpcloud.com/api/v2/ldapservers/{LDAP_ID}/associations?targets=user_group \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="ldapserverId">ObjectID of the LDAP Server.</param>
        /// <param name="targets"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListLdapServerAssociation(string ldapserverId, string[] targets, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/ldapservers/"
                        + global::System.Uri.EscapeDataString(ldapserverId)
                        + "/associations"
                        + "?"
                        + (null != targets  && targets.Length > 0 ? "targets=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(targets, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListLdapServerAssociation_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns the _direct_ associations of this LDAP Server.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example LDAP and Users.
        /// #### Sample Request
        /// ```
        /// curl -X GET 'https://console.jumpcloud.com/api/v2/ldapservers/{LDAP_ID}/associations?targets=user_group \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="targets"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListLdapServerAssociationViaIdentity(global::System.String viaIdentity, string[] targets, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/ldapservers/(?<ldapserver_id>[^/]+)/associations$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/ldapservers/{ldapserver_id}/associations'");
                }

                // replace URI parameters with values from identity
                var ldapserverId = _match.Groups["ldapserver_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/ldapservers/"
                        + ldapserverId
                        + "/associations"
                        + "?"
                        + (null != targets  && targets.Length > 0 ? "targets=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(targets, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListLdapServerAssociation_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListLdapServerAssociation" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListLdapServerAssociation_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.IGraphConnection[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.IGraphConnection) (JumpCloud.SDK.V2.Models.GraphConnection.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListLdapServerAssociation" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="ldapserverId">ObjectID of the LDAP Server.</param>
        /// <param name="targets"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListLdapServerAssociation_Validate(string ldapserverId, string[] targets, int? limit, int? skip, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(ldapserverId),ldapserverId);
                await eventListener.AssertNotNull(nameof(targets), targets);
                if (targets != null ) {
                        for (int __i = 0; __i < targets.Length; __i++) {
                          await eventListener.AssertEnum($"targets[{__i}]",targets[__i],@"active_directory", @"application", @"command", @"g_suite", @"ldap_server", @"office_365", @"policy", @"radius_server", @"system", @"system_group", @"user", @"user_group");
                        }
                      }
            }
        }

        /// <summary>
        /// This endpoint returns all samba domains for an LDAP server.
        /// ##### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/ldapservers/{LDAP_ID}/sambadomains \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="ldapserverId">Unique identifier of the LDAP server.</param>
        /// <param name="contentType"></param>
        /// <param name="accept"></param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onDefault">a delegate that is called when the remote service returns default (any response code not handled
        /// elsewhere).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListLdapServerSambaDomain(string ldapserverId, string contentType, string accept, string[] filter, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISambaDomainOutput[]>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IError>, global::System.Threading.Tasks.Task> onDefault, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/ldapservers/"
                        + global::System.Uri.EscapeDataString(ldapserverId)
                        + "/sambadomains"
                        + "?"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // add headers parameters
                if (null != contentType)
                {
                    request.Headers.Add("Content-Type",contentType);
                }
                if (null != accept)
                {
                    request.Headers.Add("Accept",accept);
                }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListLdapServerSambaDomain_Call(request,onOk,onDefault,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns all samba domains for an LDAP server.
        /// ##### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/ldapservers/{LDAP_ID}/sambadomains \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="contentType"></param>
        /// <param name="accept"></param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onDefault">a delegate that is called when the remote service returns default (any response code not handled
        /// elsewhere).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListLdapServerSambaDomainViaIdentity(global::System.String viaIdentity, string contentType, string accept, string[] filter, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISambaDomainOutput[]>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IError>, global::System.Threading.Tasks.Task> onDefault, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/ldapservers/(?<ldapserver_id>[^/]+)/sambadomains$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/ldapservers/{ldapserver_id}/sambadomains'");
                }

                // replace URI parameters with values from identity
                var ldapserverId = _match.Groups["ldapserver_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/ldapservers/"
                        + ldapserverId
                        + "/sambadomains"
                        + "?"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // add headers parameters
                if (null != contentType)
                {
                    request.Headers.Add("Content-Type",contentType);
                }
                if (null != accept)
                {
                    request.Headers.Add("Accept",accept);
                }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListLdapServerSambaDomain_Call(request,onOk,onDefault,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListLdapServerSambaDomain" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onDefault">a delegate that is called when the remote service returns default (any response code not handled
        /// elsewhere).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListLdapServerSambaDomain_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISambaDomainOutput[]>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IError>, global::System.Threading.Tasks.Task> onDefault, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.ISambaDomainOutput[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.ISambaDomainOutput) (JumpCloud.SDK.V2.Models.SambaDomainOutput.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onDefault(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloud.SDK.V2.Models.Error.FromJson(JumpCloud.SDK.V2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListLdapServerSambaDomain" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="ldapserverId">Unique identifier of the LDAP server.</param>
        /// <param name="contentType"></param>
        /// <param name="accept"></param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListLdapServerSambaDomain_Validate(string ldapserverId, string contentType, string accept, string[] filter, int? limit, int? skip, string[] sort, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(ldapserverId),ldapserverId);
                await eventListener.AssertNotNull(nameof(contentType),contentType);
                await eventListener.AssertNotNull(nameof(accept),accept);
            }
        }

        /// <summary>
        /// This endpoint will return all Users bound to an LDAP Server, either directly or indirectly, essentially traversing the
        /// JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this LDAP server instance to the corresponding User; this array represents
        /// all grouping and/or associations that would have to be removed to deprovision the User from this LDAP server instance.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/ldapservers/{LDAP_ID}/users \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="ldapserverId">ObjectID of the LDAP Server.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListLdapServerTraverseUser(string ldapserverId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/ldapservers/"
                        + global::System.Uri.EscapeDataString(ldapserverId)
                        + "/users"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListLdapServerTraverseUser_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all Users Groups bound to a LDAP Server, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the group's type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this LDAP server instance to the corresponding User Group; this array represents
        /// all grouping and/or associations that would have to be removed to deprovision the User Group from this LDAP server instance.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/ldapservers/{LDAP_ID}/usergroups \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="ldapserverId">ObjectID of the LDAP Server.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListLdapServerTraverseUserGroup(string ldapserverId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/ldapservers/"
                        + global::System.Uri.EscapeDataString(ldapserverId)
                        + "/usergroups"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListLdapServerTraverseUserGroup_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all Users Groups bound to a LDAP Server, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the group's type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this LDAP server instance to the corresponding User Group; this array represents
        /// all grouping and/or associations that would have to be removed to deprovision the User Group from this LDAP server instance.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/ldapservers/{LDAP_ID}/usergroups \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListLdapServerTraverseUserGroupViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/ldapservers/(?<ldapserver_id>[^/]+)/usergroups$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/ldapservers/{ldapserver_id}/usergroups'");
                }

                // replace URI parameters with values from identity
                var ldapserverId = _match.Groups["ldapserver_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/ldapservers/"
                        + ldapserverId
                        + "/usergroups"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListLdapServerTraverseUserGroup_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListLdapServerTraverseUserGroup" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListLdapServerTraverseUserGroup_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1) (JumpCloud.SDK.V2.Models.GraphObjectWithPaths1.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListLdapServerTraverseUserGroup" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="ldapserverId">ObjectID of the LDAP Server.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListLdapServerTraverseUserGroup_Validate(string ldapserverId, int? limit, int? skip, string[] filter, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(ldapserverId),ldapserverId);
            }
        }

        /// <summary>
        /// This endpoint will return all Users bound to an LDAP Server, either directly or indirectly, essentially traversing the
        /// JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this LDAP server instance to the corresponding User; this array represents
        /// all grouping and/or associations that would have to be removed to deprovision the User from this LDAP server instance.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/ldapservers/{LDAP_ID}/users \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListLdapServerTraverseUserViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/ldapservers/(?<ldapserver_id>[^/]+)/users$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/ldapservers/{ldapserver_id}/users'");
                }

                // replace URI parameters with values from identity
                var ldapserverId = _match.Groups["ldapserver_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/ldapservers/"
                        + ldapserverId
                        + "/users"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListLdapServerTraverseUser_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListLdapServerTraverseUser" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListLdapServerTraverseUser_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1) (JumpCloud.SDK.V2.Models.GraphObjectWithPaths1.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListLdapServerTraverseUser" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="ldapserverId">ObjectID of the LDAP Server.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListLdapServerTraverseUser_Validate(string ldapserverId, int? limit, int? skip, string[] filter, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(ldapserverId),ldapserverId);
            }
        }

        /// <summary>
        /// This endpoint returns the object IDs of your LDAP servers.
        /// ##### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/ldapservers/ \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListLdapServerViaIdentity(global::System.String viaIdentity, string[] filter, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ILdapServerOutput[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/ldapservers$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/ldapservers'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/ldapservers"
                        + "?"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListLdapServer_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListLdapServer" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListLdapServer_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ILdapServerOutput[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.ILdapServerOutput[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.ILdapServerOutput) (JumpCloud.SDK.V2.Models.LdapServerOutput.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListLdapServer" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListLdapServer_Validate(string[] filter, int? limit, int? skip, string[] sort, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {

            }
        }

        /// <summary>
        /// This endpoint returns _direct_ associations of an Office 365 instance.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example Office 365 and Users.
        /// #### Sample Request
        /// ```
        /// curl -X GET 'https://console.jumpcloud.com/api/v2/office365s/{O365_ID}/associations?targets=user_group' \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="office365Id">ObjectID of the Office 365 instance.</param>
        /// <param name="targets"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListOffice365Association(string office365Id, string[] targets, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/office365s/"
                        + global::System.Uri.EscapeDataString(office365Id)
                        + "/associations"
                        + "?"
                        + (null != targets  && targets.Length > 0 ? "targets=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(targets, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListOffice365Association_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns _direct_ associations of an Office 365 instance.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example Office 365 and Users.
        /// #### Sample Request
        /// ```
        /// curl -X GET 'https://console.jumpcloud.com/api/v2/office365s/{O365_ID}/associations?targets=user_group' \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="targets"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListOffice365AssociationViaIdentity(global::System.String viaIdentity, string[] targets, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/office365s/(?<office365_id>[^/]+)/associations$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/office365s/{office365_id}/associations'");
                }

                // replace URI parameters with values from identity
                var office365Id = _match.Groups["office365_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/office365s/"
                        + office365Id
                        + "/associations"
                        + "?"
                        + (null != targets  && targets.Length > 0 ? "targets=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(targets, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListOffice365Association_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListOffice365Association" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListOffice365Association_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.IGraphConnection[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.IGraphConnection) (JumpCloud.SDK.V2.Models.GraphConnection.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListOffice365Association" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="office365Id">ObjectID of the Office 365 instance.</param>
        /// <param name="targets"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListOffice365Association_Validate(string office365Id, string[] targets, int? limit, int? skip, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(office365Id),office365Id);
                await eventListener.AssertNotNull(nameof(targets), targets);
                if (targets != null ) {
                        for (int __i = 0; __i < targets.Length; __i++) {
                          await eventListener.AssertEnum($"targets[{__i}]",targets[__i],@"active_directory", @"application", @"command", @"g_suite", @"ldap_server", @"office_365", @"policy", @"radius_server", @"system", @"system_group", @"user", @"user_group");
                        }
                      }
            }
        }

        /// <summary>
        /// This endpoint returns all translation rules for a specific Office 365 instance. These rules specify how JumpCloud attributes
        /// translate to [Microsoft Graph](https://developer.microsoft.com/en-us/graph) attributes.
        /// ##### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/office365s/{office365_id}/translationrules \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="office365Id"></param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListOffice365TranslationRule(string office365Id, string[] filter, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IOffice365TranslationRule[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/office365s/"
                        + global::System.Uri.EscapeDataString(office365Id)
                        + "/translationrules"
                        + "?"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListOffice365TranslationRule_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns all translation rules for a specific Office 365 instance. These rules specify how JumpCloud attributes
        /// translate to [Microsoft Graph](https://developer.microsoft.com/en-us/graph) attributes.
        /// ##### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/office365s/{office365_id}/translationrules \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListOffice365TranslationRuleViaIdentity(global::System.String viaIdentity, string[] filter, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IOffice365TranslationRule[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/office365s/(?<office365_id>[^/]+)/translationrules$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/office365s/{office365_id}/translationrules'");
                }

                // replace URI parameters with values from identity
                var office365Id = _match.Groups["office365_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/office365s/"
                        + office365Id
                        + "/translationrules"
                        + "?"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListOffice365TranslationRule_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListOffice365TranslationRule" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListOffice365TranslationRule_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IOffice365TranslationRule[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.IOffice365TranslationRule[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.IOffice365TranslationRule) (JumpCloud.SDK.V2.Models.Office365TranslationRule.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListOffice365TranslationRule" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="office365Id"></param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListOffice365TranslationRule_Validate(string office365Id, string[] filter, int? limit, int? skip, string[] sort, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(office365Id),office365Id);
            }
        }

        /// <summary>
        /// This endpoint will return all Users bound to an Office 365 instance, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this Office 365 instance to the corresponding User; this array represents
        /// all grouping and/or associations that would have to be removed to deprovision the User from this Office 365 instance.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/office365s/{O365_ID}/users \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="office365Id">ObjectID of the Office 365 suite.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListOffice365TraverseUser(string office365Id, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/office365s/"
                        + global::System.Uri.EscapeDataString(office365Id)
                        + "/users"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListOffice365TraverseUser_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all Users Groups bound to an Office 365 instance, either directly or indirectly, essentially
        /// traversing the JumpCloud Graph for your Organization.
        /// Each element will contain the group's type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this Office 365 instance to the corresponding User Group; this array represents
        /// all grouping and/or associations that would have to be removed to deprovision the User Group from this Office 365 instance.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/office365s/{O365_ID/usergroups \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="office365Id">ObjectID of the Office 365 suite.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListOffice365TraverseUserGroup(string office365Id, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/office365s/"
                        + global::System.Uri.EscapeDataString(office365Id)
                        + "/usergroups"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListOffice365TraverseUserGroup_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all Users Groups bound to an Office 365 instance, either directly or indirectly, essentially
        /// traversing the JumpCloud Graph for your Organization.
        /// Each element will contain the group's type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this Office 365 instance to the corresponding User Group; this array represents
        /// all grouping and/or associations that would have to be removed to deprovision the User Group from this Office 365 instance.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/office365s/{O365_ID/usergroups \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListOffice365TraverseUserGroupViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/office365s/(?<office365_id>[^/]+)/usergroups$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/office365s/{office365_id}/usergroups'");
                }

                // replace URI parameters with values from identity
                var office365Id = _match.Groups["office365_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/office365s/"
                        + office365Id
                        + "/usergroups"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListOffice365TraverseUserGroup_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListOffice365TraverseUserGroup" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListOffice365TraverseUserGroup_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1) (JumpCloud.SDK.V2.Models.GraphObjectWithPaths1.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListOffice365TraverseUserGroup" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="office365Id">ObjectID of the Office 365 suite.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListOffice365TraverseUserGroup_Validate(string office365Id, int? limit, int? skip, string[] filter, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(office365Id),office365Id);
            }
        }

        /// <summary>
        /// This endpoint will return all Users bound to an Office 365 instance, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this Office 365 instance to the corresponding User; this array represents
        /// all grouping and/or associations that would have to be removed to deprovision the User from this Office 365 instance.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/office365s/{O365_ID}/users \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListOffice365TraverseUserViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/office365s/(?<office365_id>[^/]+)/users$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/office365s/{office365_id}/users'");
                }

                // replace URI parameters with values from identity
                var office365Id = _match.Groups["office365_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/office365s/"
                        + office365Id
                        + "/users"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListOffice365TraverseUser_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListOffice365TraverseUser" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListOffice365TraverseUser_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1) (JumpCloud.SDK.V2.Models.GraphObjectWithPaths1.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListOffice365TraverseUser" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="office365Id">ObjectID of the Office 365 suite.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListOffice365TraverseUser_Validate(string office365Id, int? limit, int? skip, string[] filter, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(office365Id),office365Id);
            }
        }

        /// <summary>
        /// This endpoint returns all policies.
        /// ##### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/policies \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onInternalServerError">a delegate that is called when the remote service returns 500 (InternalServerError).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListPolicy(string[] filter, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IPolicy[]>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IError>, global::System.Threading.Tasks.Task> onInternalServerError, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/policies"
                        + "?"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListPolicy_Call(request,onOk,onInternalServerError,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns the _direct_ associations of a Policy.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example Policies and Systems.
        /// #### Sample Request
        /// ```
        /// curl -X GET 'https://console.jumpcloud.com/api/v2/policies/{Policy_ID}/associations?targets=system_group \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="policyId"></param>
        /// <param name="targets"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListPolicyAssociation(string policyId, string[] targets, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/policies/"
                        + global::System.Uri.EscapeDataString(policyId)
                        + "/associations"
                        + "?"
                        + (null != targets  && targets.Length > 0 ? "targets=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(targets, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListPolicyAssociation_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns the _direct_ associations of a Policy.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example Policies and Systems.
        /// #### Sample Request
        /// ```
        /// curl -X GET 'https://console.jumpcloud.com/api/v2/policies/{Policy_ID}/associations?targets=system_group \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="targets"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListPolicyAssociationViaIdentity(global::System.String viaIdentity, string[] targets, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/policies/(?<policy_id>[^/]+)/associations$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/policies/{policy_id}/associations'");
                }

                // replace URI parameters with values from identity
                var policyId = _match.Groups["policy_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/policies/"
                        + policyId
                        + "/associations"
                        + "?"
                        + (null != targets  && targets.Length > 0 ? "targets=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(targets, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListPolicyAssociation_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListPolicyAssociation" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListPolicyAssociation_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.IGraphConnection[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.IGraphConnection) (JumpCloud.SDK.V2.Models.GraphConnection.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListPolicyAssociation" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="policyId"></param>
        /// <param name="targets"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListPolicyAssociation_Validate(string policyId, string[] targets, int? limit, int? skip, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(policyId),policyId);
                await eventListener.AssertNotNull(nameof(targets), targets);
                if (targets != null ) {
                        for (int __i = 0; __i < targets.Length; __i++) {
                          await eventListener.AssertEnum($"targets[{__i}]",targets[__i],@"active_directory", @"application", @"command", @"g_suite", @"ldap_server", @"office_365", @"policy", @"radius_server", @"system", @"system_group", @"user", @"user_group");
                        }
                      }
            }
        }

        /// <summary>
        /// This endpoint returns all policies results for a specific policy.
        /// ##### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/policies/{Policy_ID}/policyresults \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="policyId"></param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListPolicyResult(string policyId, string[] filter, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IPolicyResult[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/policies/"
                        + global::System.Uri.EscapeDataString(policyId)
                        + "/policyresults"
                        + "?"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListPolicyResult_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns all policies results for an organization.
        /// ##### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/policyresults \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListPolicyResult1(string[] filter, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IPolicyResult[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/policyresults"
                        + "?"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListPolicyResult1_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns all policies results for an organization.
        /// ##### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/policyresults \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListPolicyResult1ViaIdentity(global::System.String viaIdentity, string[] filter, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IPolicyResult[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/policyresults$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/policyresults'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/policyresults"
                        + "?"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListPolicyResult1_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListPolicyResult1" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListPolicyResult1_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IPolicyResult[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.IPolicyResult[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.IPolicyResult) (JumpCloud.SDK.V2.Models.PolicyResult.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListPolicyResult1" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListPolicyResult1_Validate(string[] filter, int? limit, int? skip, string[] sort, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {

            }
        }

        /// <summary>
        /// This endpoint returns all policies results for a specific policy.
        /// ##### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/policies/{Policy_ID}/policyresults \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListPolicyResultViaIdentity(global::System.String viaIdentity, string[] filter, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IPolicyResult[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/policies/(?<policy_id>[^/]+)/policyresults$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/policies/{policy_id}/policyresults'");
                }

                // replace URI parameters with values from identity
                var policyId = _match.Groups["policy_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/policies/"
                        + policyId
                        + "/policyresults"
                        + "?"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListPolicyResult_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListPolicyResult" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListPolicyResult_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IPolicyResult[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.IPolicyResult[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.IPolicyResult) (JumpCloud.SDK.V2.Models.PolicyResult.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListPolicyResult" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="policyId"></param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListPolicyResult_Validate(string policyId, string[] filter, int? limit, int? skip, string[] sort, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(policyId),policyId);
            }
        }

        /// <summary>
        /// This endpoint returns the policy results for a particular system.
        /// ##### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/systems/{System_ID}/policystatuses \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="systemId">ObjectID of the System.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListPolicyStatus(string systemId, string[] filter, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IPolicyResult[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systems/"
                        + global::System.Uri.EscapeDataString(systemId)
                        + "/policystatuses"
                        + "?"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListPolicyStatus_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns the latest policies results for a specific policy.
        /// ##### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/policies/{Policy_ID}/policystatuses \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="policyId"></param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListPolicyStatus1(string policyId, string[] filter, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IPolicyResult[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/policies/"
                        + global::System.Uri.EscapeDataString(policyId)
                        + "/policystatuses"
                        + "?"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListPolicyStatus1_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns the latest policies results for a specific policy.
        /// ##### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/policies/{Policy_ID}/policystatuses \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListPolicyStatus1ViaIdentity(global::System.String viaIdentity, string[] filter, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IPolicyResult[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/policies/(?<policy_id>[^/]+)/policystatuses$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/policies/{policy_id}/policystatuses'");
                }

                // replace URI parameters with values from identity
                var policyId = _match.Groups["policy_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/policies/"
                        + policyId
                        + "/policystatuses"
                        + "?"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListPolicyStatus1_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListPolicyStatus1" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListPolicyStatus1_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IPolicyResult[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.IPolicyResult[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.IPolicyResult) (JumpCloud.SDK.V2.Models.PolicyResult.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListPolicyStatus1" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="policyId"></param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListPolicyStatus1_Validate(string policyId, string[] filter, int? limit, int? skip, string[] sort, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(policyId),policyId);
            }
        }

        /// <summary>
        /// This endpoint returns the policy results for a particular system.
        /// ##### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/systems/{System_ID}/policystatuses \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListPolicyStatusViaIdentity(global::System.String viaIdentity, string[] filter, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IPolicyResult[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systems/(?<system_id>[^/]+)/policystatuses$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systems/{system_id}/policystatuses'");
                }

                // replace URI parameters with values from identity
                var systemId = _match.Groups["system_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systems/"
                        + systemId
                        + "/policystatuses"
                        + "?"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListPolicyStatus_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListPolicyStatus" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListPolicyStatus_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IPolicyResult[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.IPolicyResult[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.IPolicyResult) (JumpCloud.SDK.V2.Models.PolicyResult.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListPolicyStatus" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="systemId">ObjectID of the System.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListPolicyStatus_Validate(string systemId, string[] filter, int? limit, int? skip, string[] sort, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(systemId),systemId);
            }
        }

        /// <summary>
        /// This endpoint returns all policy templates.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/policytemplates \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onInternalServerError">a delegate that is called when the remote service returns 500 (InternalServerError).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListPolicyTemplate(string[] filter, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IPolicyTemplate[]>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IError>, global::System.Threading.Tasks.Task> onInternalServerError, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/policytemplates"
                        + "?"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListPolicyTemplate_Call(request,onOk,onInternalServerError,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns all policy templates.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/policytemplates \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onInternalServerError">a delegate that is called when the remote service returns 500 (InternalServerError).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListPolicyTemplateViaIdentity(global::System.String viaIdentity, string[] filter, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IPolicyTemplate[]>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IError>, global::System.Threading.Tasks.Task> onInternalServerError, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/policytemplates$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/policytemplates'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/policytemplates"
                        + "?"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListPolicyTemplate_Call(request,onOk,onInternalServerError,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListPolicyTemplate" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onInternalServerError">a delegate that is called when the remote service returns 500 (InternalServerError).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListPolicyTemplate_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IPolicyTemplate[]>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IError>, global::System.Threading.Tasks.Task> onInternalServerError, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.IPolicyTemplate[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.IPolicyTemplate) (JumpCloud.SDK.V2.Models.PolicyTemplate.FromJson(__x) )) ))() : null));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.InternalServerError:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onInternalServerError(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloud.SDK.V2.Models.Error.FromJson(JumpCloud.SDK.V2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListPolicyTemplate" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListPolicyTemplate_Validate(string[] filter, int? limit, int? skip, string[] sort, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {

            }
        }

        /// <summary>
        /// This endpoint will return all Systems bound to a Policy, either directly or indirectly, essentially traversing the JumpCloud
        /// Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this Policy to the corresponding System; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the System from this Policy.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/policies/{Policy_ID}/systems \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="policyId">ObjectID of the Command.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListPolicyTraverseSystem(string policyId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/policies/"
                        + global::System.Uri.EscapeDataString(policyId)
                        + "/systems"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListPolicyTraverseSystem_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all Systems Groups bound to a Policy, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the group's type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this Policy to the corresponding System Group; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the System Group from this Policy.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/policies/{Policy_ID}/systemgroups \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="policyId">ObjectID of the Command.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListPolicyTraverseSystemGroup(string policyId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/policies/"
                        + global::System.Uri.EscapeDataString(policyId)
                        + "/systemgroups"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListPolicyTraverseSystemGroup_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all Systems Groups bound to a Policy, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the group's type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this Policy to the corresponding System Group; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the System Group from this Policy.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/policies/{Policy_ID}/systemgroups \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListPolicyTraverseSystemGroupViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/policies/(?<policy_id>[^/]+)/systemgroups$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/policies/{policy_id}/systemgroups'");
                }

                // replace URI parameters with values from identity
                var policyId = _match.Groups["policy_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/policies/"
                        + policyId
                        + "/systemgroups"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListPolicyTraverseSystemGroup_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListPolicyTraverseSystemGroup" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListPolicyTraverseSystemGroup_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1) (JumpCloud.SDK.V2.Models.GraphObjectWithPaths1.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListPolicyTraverseSystemGroup" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="policyId">ObjectID of the Command.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListPolicyTraverseSystemGroup_Validate(string policyId, int? limit, int? skip, string[] filter, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(policyId),policyId);
            }
        }

        /// <summary>
        /// This endpoint will return all Systems bound to a Policy, either directly or indirectly, essentially traversing the JumpCloud
        /// Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this Policy to the corresponding System; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the System from this Policy.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/policies/{Policy_ID}/systems \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListPolicyTraverseSystemViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/policies/(?<policy_id>[^/]+)/systems$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/policies/{policy_id}/systems'");
                }

                // replace URI parameters with values from identity
                var policyId = _match.Groups["policy_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/policies/"
                        + policyId
                        + "/systems"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListPolicyTraverseSystem_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListPolicyTraverseSystem" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListPolicyTraverseSystem_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1) (JumpCloud.SDK.V2.Models.GraphObjectWithPaths1.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListPolicyTraverseSystem" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="policyId">ObjectID of the Command.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListPolicyTraverseSystem_Validate(string policyId, int? limit, int? skip, string[] filter, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(policyId),policyId);
            }
        }

        /// <summary>
        /// This endpoint returns all policies.
        /// ##### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/policies \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onInternalServerError">a delegate that is called when the remote service returns 500 (InternalServerError).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListPolicyViaIdentity(global::System.String viaIdentity, string[] filter, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IPolicy[]>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IError>, global::System.Threading.Tasks.Task> onInternalServerError, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/policies$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/policies'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/policies"
                        + "?"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListPolicy_Call(request,onOk,onInternalServerError,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListPolicy" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onInternalServerError">a delegate that is called when the remote service returns 500 (InternalServerError).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListPolicy_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IPolicy[]>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IError>, global::System.Threading.Tasks.Task> onInternalServerError, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.IPolicy[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.IPolicy) (JumpCloud.SDK.V2.Models.Policy.FromJson(__x) )) ))() : null));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.InternalServerError:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onInternalServerError(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloud.SDK.V2.Models.Error.FromJson(JumpCloud.SDK.V2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListPolicy" /> method. Call this like the actual call, but you will get validation events
        /// back.
        /// </summary>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListPolicy_Validate(string[] filter, int? limit, int? skip, string[] sort, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {

            }
        }

        /// <summary>
        /// This endpoint returns a list of the Administrators associated with the Provider.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/providers/{ProviderID}/administrators \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="providerId"></param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onUnauthorized">a delegate that is called when the remote service returns 401 (Unauthorized).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListProviderAdministrator(string providerId, string[] filter, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IPathsYwlyndProvidersProviderIdAdministratorsGetResponses200ContentApplicationJsonSchema>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IPathsZ2RnkiProvidersProviderIdAdministratorsGetResponses401ContentApplicationJsonSchema>, global::System.Threading.Tasks.Task> onUnauthorized, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/providers/"
                        + global::System.Uri.EscapeDataString(providerId)
                        + "/administrators"
                        + "?"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListProviderAdministrator_Call(request,onOk,onUnauthorized,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns a list of the Administrators associated with the Provider.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/providers/{ProviderID}/administrators \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onUnauthorized">a delegate that is called when the remote service returns 401 (Unauthorized).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListProviderAdministratorViaIdentity(global::System.String viaIdentity, string[] filter, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IPathsYwlyndProvidersProviderIdAdministratorsGetResponses200ContentApplicationJsonSchema>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IPathsZ2RnkiProvidersProviderIdAdministratorsGetResponses401ContentApplicationJsonSchema>, global::System.Threading.Tasks.Task> onUnauthorized, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/providers/(?<provider_id>[^/]+)/administrators$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/providers/{provider_id}/administrators'");
                }

                // replace URI parameters with values from identity
                var providerId = _match.Groups["provider_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/providers/"
                        + providerId
                        + "/administrators"
                        + "?"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListProviderAdministrator_Call(request,onOk,onUnauthorized,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListProviderAdministrator" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onUnauthorized">a delegate that is called when the remote service returns 401 (Unauthorized).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListProviderAdministrator_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IPathsYwlyndProvidersProviderIdAdministratorsGetResponses200ContentApplicationJsonSchema>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IPathsZ2RnkiProvidersProviderIdAdministratorsGetResponses401ContentApplicationJsonSchema>, global::System.Threading.Tasks.Task> onUnauthorized, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloud.SDK.V2.Models.PathsYwlyndProvidersProviderIdAdministratorsGetResponses200ContentApplicationJsonSchema.FromJson(JumpCloud.SDK.V2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.Unauthorized:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onUnauthorized(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloud.SDK.V2.Models.PathsZ2RnkiProvidersProviderIdAdministratorsGetResponses401ContentApplicationJsonSchema.FromJson(JumpCloud.SDK.V2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListProviderAdministrator" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="providerId"></param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListProviderAdministrator_Validate(string providerId, string[] filter, int? limit, int? skip, string[] sort, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(providerId),providerId);
            }
        }

        /// <summary>
        /// This endpoint returns the _direct_ associations of a Radius Server.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example Radius Servers and
        /// Users.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/radiusservers/{RADIUS_ID}/associations?targets=user_group \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="radiusserverId">ObjectID of the Radius Server.</param>
        /// <param name="targets"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListRadiusServerAssociation(string radiusserverId, string[] targets, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/radiusservers/"
                        + global::System.Uri.EscapeDataString(radiusserverId)
                        + "/associations"
                        + "?"
                        + (null != targets  && targets.Length > 0 ? "targets=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(targets, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListRadiusServerAssociation_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns the _direct_ associations of a Radius Server.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example Radius Servers and
        /// Users.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/radiusservers/{RADIUS_ID}/associations?targets=user_group \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="targets"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListRadiusServerAssociationViaIdentity(global::System.String viaIdentity, string[] targets, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/radiusservers/(?<radiusserver_id>[^/]+)/associations$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/radiusservers/{radiusserver_id}/associations'");
                }

                // replace URI parameters with values from identity
                var radiusserverId = _match.Groups["radiusserver_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/radiusservers/"
                        + radiusserverId
                        + "/associations"
                        + "?"
                        + (null != targets  && targets.Length > 0 ? "targets=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(targets, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListRadiusServerAssociation_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListRadiusServerAssociation" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListRadiusServerAssociation_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.IGraphConnection[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.IGraphConnection) (JumpCloud.SDK.V2.Models.GraphConnection.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListRadiusServerAssociation" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="radiusserverId">ObjectID of the Radius Server.</param>
        /// <param name="targets"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListRadiusServerAssociation_Validate(string radiusserverId, string[] targets, int? limit, int? skip, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(radiusserverId),radiusserverId);
                await eventListener.AssertNotNull(nameof(targets), targets);
                if (targets != null ) {
                        for (int __i = 0; __i < targets.Length; __i++) {
                          await eventListener.AssertEnum($"targets[{__i}]",targets[__i],@"active_directory", @"application", @"command", @"g_suite", @"ldap_server", @"office_365", @"policy", @"radius_server", @"system", @"system_group", @"user", @"user_group");
                        }
                      }
            }
        }

        /// <summary>
        /// This endpoint will return all Users bound to a RADIUS Server, either directly or indirectly, essentially traversing the
        /// JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this RADIUS server instance to the corresponding User; this array represents
        /// all grouping and/or associations that would have to be removed to deprovision the User from this RADIUS server instance.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/ldapservers/{LDAP_ID}/users \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="radiusserverId">ObjectID of the Radius Server.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListRadiusServerTraverseUser(string radiusserverId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/radiusservers/"
                        + global::System.Uri.EscapeDataString(radiusserverId)
                        + "/users"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListRadiusServerTraverseUser_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all Users Groups bound to a RADIUS Server, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the group's type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this RADIUS server instance to the corresponding User Group; this array represents
        /// all grouping and/or associations that would have to be removed to deprovision the User Group from this RADIUS server instance.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/radiusservers/{RADIUS_ID}/usergroups \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="radiusserverId">ObjectID of the Radius Server.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListRadiusServerTraverseUserGroup(string radiusserverId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/radiusservers/"
                        + global::System.Uri.EscapeDataString(radiusserverId)
                        + "/usergroups"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListRadiusServerTraverseUserGroup_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all Users Groups bound to a RADIUS Server, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the group's type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this RADIUS server instance to the corresponding User Group; this array represents
        /// all grouping and/or associations that would have to be removed to deprovision the User Group from this RADIUS server instance.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/radiusservers/{RADIUS_ID}/usergroups \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListRadiusServerTraverseUserGroupViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/radiusservers/(?<radiusserver_id>[^/]+)/usergroups$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/radiusservers/{radiusserver_id}/usergroups'");
                }

                // replace URI parameters with values from identity
                var radiusserverId = _match.Groups["radiusserver_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/radiusservers/"
                        + radiusserverId
                        + "/usergroups"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListRadiusServerTraverseUserGroup_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListRadiusServerTraverseUserGroup" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListRadiusServerTraverseUserGroup_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1) (JumpCloud.SDK.V2.Models.GraphObjectWithPaths1.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListRadiusServerTraverseUserGroup" /> method. Call this like the actual call, but you
        /// will get validation events back.
        /// </summary>
        /// <param name="radiusserverId">ObjectID of the Radius Server.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListRadiusServerTraverseUserGroup_Validate(string radiusserverId, int? limit, int? skip, string[] filter, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(radiusserverId),radiusserverId);
            }
        }

        /// <summary>
        /// This endpoint will return all Users bound to a RADIUS Server, either directly or indirectly, essentially traversing the
        /// JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this RADIUS server instance to the corresponding User; this array represents
        /// all grouping and/or associations that would have to be removed to deprovision the User from this RADIUS server instance.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/ldapservers/{LDAP_ID}/users \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListRadiusServerTraverseUserViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/radiusservers/(?<radiusserver_id>[^/]+)/users$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/radiusservers/{radiusserver_id}/users'");
                }

                // replace URI parameters with values from identity
                var radiusserverId = _match.Groups["radiusserver_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/radiusservers/"
                        + radiusserverId
                        + "/users"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListRadiusServerTraverseUser_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListRadiusServerTraverseUser" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListRadiusServerTraverseUser_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1) (JumpCloud.SDK.V2.Models.GraphObjectWithPaths1.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListRadiusServerTraverseUser" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="radiusserverId">ObjectID of the Radius Server.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListRadiusServerTraverseUser_Validate(string radiusserverId, int? limit, int? skip, string[] filter, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(radiusserverId),radiusserverId);
            }
        }

        /// <summary>
        /// This endpoint returns the _direct_ associations of a System.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example Systems and Users.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/systems/{System_ID}/associations?targets=user \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="systemId">ObjectID of the System.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="date">Current date header for the System Context API</param>
        /// <param name="authorization">Authorization header for the System Context API</param>
        /// <param name="targets"></param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemAssociation(string systemId, int? limit, int? skip, string date, string authorization, string[] targets, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systems/"
                        + global::System.Uri.EscapeDataString(systemId)
                        + "/associations"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != targets  && targets.Length > 0 ? "targets=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(targets, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // add headers parameters
                if (null != date)
                {
                    request.Headers.Add("Date",date);
                }
                if (null != authorization)
                {
                    request.Headers.Add("Authorization",authorization);
                }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemAssociation_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns the _direct_ associations of a System.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example Systems and Users.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/systems/{System_ID}/associations?targets=user \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="date">Current date header for the System Context API</param>
        /// <param name="authorization">Authorization header for the System Context API</param>
        /// <param name="targets"></param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemAssociationViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string date, string authorization, string[] targets, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systems/(?<system_id>[^/]+)/associations$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systems/{system_id}/associations'");
                }

                // replace URI parameters with values from identity
                var systemId = _match.Groups["system_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systems/"
                        + systemId
                        + "/associations"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != targets  && targets.Length > 0 ? "targets=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(targets, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // add headers parameters
                if (null != date)
                {
                    request.Headers.Add("Date",date);
                }
                if (null != authorization)
                {
                    request.Headers.Add("Authorization",authorization);
                }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemAssociation_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListSystemAssociation" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemAssociation_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.IGraphConnection[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.IGraphConnection) (JumpCloud.SDK.V2.Models.GraphConnection.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListSystemAssociation" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="systemId">ObjectID of the System.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="date">Current date header for the System Context API</param>
        /// <param name="authorization">Authorization header for the System Context API</param>
        /// <param name="targets"></param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemAssociation_Validate(string systemId, int? limit, int? skip, string date, string authorization, string[] targets, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(systemId),systemId);
                await eventListener.AssertNotNull(nameof(date),date);
                await eventListener.AssertNotNull(nameof(authorization),authorization);
                await eventListener.AssertNotNull(nameof(targets), targets);
                if (targets != null ) {
                        for (int __i = 0; __i < targets.Length; __i++) {
                          await eventListener.AssertEnum($"targets[{__i}]",targets[__i],@"active_directory", @"application", @"command", @"g_suite", @"ldap_server", @"office_365", @"policy", @"radius_server", @"user", @"user_group");
                        }
                      }
            }
        }

        /// <summary>
        /// This endpoint returns all System Groups.
        /// Available filter fields:
        /// - `name`
        /// - `disabled`
        /// - `type`
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/systemgroups \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onDefault">a delegate that is called when the remote service returns default (any response code not handled
        /// elsewhere).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemGroup(string[] filter, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemGroup[]>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IError>, global::System.Threading.Tasks.Task> onDefault, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systemgroups"
                        + "?"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemGroup_Call(request,onOk,onDefault,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns the _direct_ associations of a System Group.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example System Groups and
        /// Users.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/systemgroups/{GroupID}/associations?targets=user \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="groupId">ObjectID of the System Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="targets"></param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemGroupAssociation(string groupId, int? limit, int? skip, string[] targets, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systemgroups/"
                        + global::System.Uri.EscapeDataString(groupId)
                        + "/associations"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != targets  && targets.Length > 0 ? "targets=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(targets, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemGroupAssociation_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns the _direct_ associations of a System Group.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example System Groups and
        /// Users.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/systemgroups/{GroupID}/associations?targets=user \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="targets"></param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemGroupAssociationViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] targets, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systemgroups/(?<group_id>[^/]+)/associations$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systemgroups/{group_id}/associations'");
                }

                // replace URI parameters with values from identity
                var groupId = _match.Groups["group_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systemgroups/"
                        + groupId
                        + "/associations"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != targets  && targets.Length > 0 ? "targets=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(targets, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemGroupAssociation_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListSystemGroupAssociation" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemGroupAssociation_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.IGraphConnection[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.IGraphConnection) (JumpCloud.SDK.V2.Models.GraphConnection.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListSystemGroupAssociation" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="groupId">ObjectID of the System Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="targets"></param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemGroupAssociation_Validate(string groupId, int? limit, int? skip, string[] targets, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(groupId),groupId);
                await eventListener.AssertNotNull(nameof(targets), targets);
                if (targets != null ) {
                        for (int __i = 0; __i < targets.Length; __i++) {
                          await eventListener.AssertEnum($"targets[{__i}]",targets[__i],@"active_directory", @"application", @"command", @"g_suite", @"ldap_server", @"office_365", @"policy", @"radius_server", @"user", @"user_group");
                        }
                      }
            }
        }

        /// <summary>
        /// This endpoint returns the system members of a System Group.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/systemgroups/{Group_ID}/members \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="groupId">ObjectID of the System Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemGroupMembers(string groupId, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systemgroups/"
                        + global::System.Uri.EscapeDataString(groupId)
                        + "/members"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemGroupMembers_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns the system members of a System Group.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/systemgroups/{Group_ID}/members \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemGroupMembersViaIdentity(global::System.String viaIdentity, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systemgroups/(?<group_id>[^/]+)/members$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systemgroups/{group_id}/members'");
                }

                // replace URI parameters with values from identity
                var groupId = _match.Groups["group_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systemgroups/"
                        + groupId
                        + "/members"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemGroupMembers_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListSystemGroupMembers" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemGroupMembers_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.IGraphConnection[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.IGraphConnection) (JumpCloud.SDK.V2.Models.GraphConnection.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListSystemGroupMembers" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="groupId">ObjectID of the System Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemGroupMembers_Validate(string groupId, int? limit, int? skip, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(groupId),groupId);
            }
        }

        /// <summary>
        /// This endpoint returns all Systems that are a member of this System Group.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/systemgroups/{Group_ID/membership \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="groupId">ObjectID of the System Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemGroupMembership(string groupId, int? limit, int? skip, string[] sort, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systemgroups/"
                        + global::System.Uri.EscapeDataString(groupId)
                        + "/membership"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemGroupMembership_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns all Systems that are a member of this System Group.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/systemgroups/{Group_ID/membership \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemGroupMembershipViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] sort, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systemgroups/(?<group_id>[^/]+)/membership$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systemgroups/{group_id}/membership'");
                }

                // replace URI parameters with values from identity
                var groupId = _match.Groups["group_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systemgroups/"
                        + groupId
                        + "/membership"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemGroupMembership_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListSystemGroupMembership" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemGroupMembership_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1) (JumpCloud.SDK.V2.Models.GraphObjectWithPaths1.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListSystemGroupMembership" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="groupId">ObjectID of the System Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemGroupMembership_Validate(string groupId, int? limit, int? skip, string[] sort, string[] filter, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(groupId),groupId);
            }
        }

        /// <summary>
        /// This endpoint will return all Commands bound to a System Group, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the group's type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this System Group to the corresponding Command; this array represents all
        /// grouping and/or associations that would have to be removed to deprovision the Command from this System Group.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/systemgroups/{GroupID}/commands \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="groupId">ObjectID of the System Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemGroupTraverseCommand(string groupId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systemgroups/"
                        + global::System.Uri.EscapeDataString(groupId)
                        + "/commands"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemGroupTraverseCommand_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all Commands bound to a System Group, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the group's type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this System Group to the corresponding Command; this array represents all
        /// grouping and/or associations that would have to be removed to deprovision the Command from this System Group.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/systemgroups/{GroupID}/commands \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemGroupTraverseCommandViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systemgroups/(?<group_id>[^/]+)/commands$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systemgroups/{group_id}/commands'");
                }

                // replace URI parameters with values from identity
                var groupId = _match.Groups["group_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systemgroups/"
                        + groupId
                        + "/commands"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemGroupTraverseCommand_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListSystemGroupTraverseCommand" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemGroupTraverseCommand_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1) (JumpCloud.SDK.V2.Models.GraphObjectWithPaths1.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListSystemGroupTraverseCommand" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="groupId">ObjectID of the System Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemGroupTraverseCommand_Validate(string groupId, int? limit, int? skip, string[] filter, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(groupId),groupId);
            }
        }

        /// <summary>
        /// This endpoint will return all Policies bound to a System Group, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this System Group to the corresponding Policy; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the Policy from this System Group.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// This endpoint is not public yet as we haven't finished the code.
        /// ##### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/systemgroups/{GroupID}/policies \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="groupId">ObjectID of the System Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemGroupTraversePolicy(string groupId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systemgroups/"
                        + global::System.Uri.EscapeDataString(groupId)
                        + "/policies"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemGroupTraversePolicy_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all Policies bound to a System Group, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this System Group to the corresponding Policy; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the Policy from this System Group.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// This endpoint is not public yet as we haven't finished the code.
        /// ##### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/systemgroups/{GroupID}/policies \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemGroupTraversePolicyViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systemgroups/(?<group_id>[^/]+)/policies$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systemgroups/{group_id}/policies'");
                }

                // replace URI parameters with values from identity
                var groupId = _match.Groups["group_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systemgroups/"
                        + groupId
                        + "/policies"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemGroupTraversePolicy_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListSystemGroupTraversePolicy" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemGroupTraversePolicy_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1) (JumpCloud.SDK.V2.Models.GraphObjectWithPaths1.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListSystemGroupTraversePolicy" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="groupId">ObjectID of the System Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemGroupTraversePolicy_Validate(string groupId, int? limit, int? skip, string[] filter, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(groupId),groupId);
            }
        }

        /// <summary>
        /// This endpoint will return all Users bound to a System Group, either directly or indirectly, essentially traversing the
        /// JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this System Group to the corresponding User; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the User from this System Group.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/systemgroups/{GroupID}/users \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="groupId">ObjectID of the System Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemGroupTraverseUser(string groupId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systemgroups/"
                        + global::System.Uri.EscapeDataString(groupId)
                        + "/users"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemGroupTraverseUser_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all User Groups bound to a System Group, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this System Group to the corresponding User Group; this array represents all
        /// grouping and/or associations that would have to be removed to deprovision the User Group from this System Group.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/systemgroups/{GroupID}/usergroups \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="groupId">ObjectID of the System Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemGroupTraverseUserGroup(string groupId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systemgroups/"
                        + global::System.Uri.EscapeDataString(groupId)
                        + "/usergroups"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemGroupTraverseUserGroup_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all User Groups bound to a System Group, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this System Group to the corresponding User Group; this array represents all
        /// grouping and/or associations that would have to be removed to deprovision the User Group from this System Group.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/systemgroups/{GroupID}/usergroups \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemGroupTraverseUserGroupViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systemgroups/(?<group_id>[^/]+)/usergroups$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systemgroups/{group_id}/usergroups'");
                }

                // replace URI parameters with values from identity
                var groupId = _match.Groups["group_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systemgroups/"
                        + groupId
                        + "/usergroups"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemGroupTraverseUserGroup_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListSystemGroupTraverseUserGroup" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemGroupTraverseUserGroup_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1) (JumpCloud.SDK.V2.Models.GraphObjectWithPaths1.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListSystemGroupTraverseUserGroup" /> method. Call this like the actual call, but you
        /// will get validation events back.
        /// </summary>
        /// <param name="groupId">ObjectID of the System Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemGroupTraverseUserGroup_Validate(string groupId, int? limit, int? skip, string[] filter, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(groupId),groupId);
            }
        }

        /// <summary>
        /// This endpoint will return all Users bound to a System Group, either directly or indirectly, essentially traversing the
        /// JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this System Group to the corresponding User; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the User from this System Group.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/systemgroups/{GroupID}/users \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemGroupTraverseUserViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systemgroups/(?<group_id>[^/]+)/users$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systemgroups/{group_id}/users'");
                }

                // replace URI parameters with values from identity
                var groupId = _match.Groups["group_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systemgroups/"
                        + groupId
                        + "/users"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemGroupTraverseUser_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListSystemGroupTraverseUser" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemGroupTraverseUser_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1) (JumpCloud.SDK.V2.Models.GraphObjectWithPaths1.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListSystemGroupTraverseUser" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="groupId">ObjectID of the System Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemGroupTraverseUser_Validate(string groupId, int? limit, int? skip, string[] filter, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(groupId),groupId);
            }
        }

        /// <summary>
        /// This endpoint returns all System Groups.
        /// Available filter fields:
        /// - `name`
        /// - `disabled`
        /// - `type`
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/systemgroups \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onDefault">a delegate that is called when the remote service returns default (any response code not handled
        /// elsewhere).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemGroupViaIdentity(global::System.String viaIdentity, string[] filter, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemGroup[]>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IError>, global::System.Threading.Tasks.Task> onDefault, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systemgroups$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systemgroups'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systemgroups"
                        + "?"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemGroup_Call(request,onOk,onDefault,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListSystemGroup" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onDefault">a delegate that is called when the remote service returns default (any response code not handled
        /// elsewhere).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemGroup_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemGroup[]>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IError>, global::System.Threading.Tasks.Task> onDefault, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.ISystemGroup[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.ISystemGroup) (JumpCloud.SDK.V2.Models.SystemGroup.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onDefault(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloud.SDK.V2.Models.Error.FromJson(JumpCloud.SDK.V2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListSystemGroup" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemGroup_Validate(string[] filter, int? limit, int? skip, string[] sort, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {

            }
        }

        /// <summary>Valid filter fields are `system_id` and `global_state`.</summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemInsightsAlf(int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsAlf[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/alf"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemInsightsAlf_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `global_state`.</summary>
        /// <param name="viaIdentity"></param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemInsightsAlfViaIdentity(global::System.String viaIdentity, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsAlf[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systeminsights/alf$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systeminsights/alf'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/alf"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemInsightsAlf_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListSystemInsightsAlf" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemInsightsAlf_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsAlf[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.ISystemInsightsAlf[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.ISystemInsightsAlf) (JumpCloud.SDK.V2.Models.SystemInsightsAlf.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListSystemInsightsAlf" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemInsightsAlf_Validate(int? limit, int? skip, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertIsLessThanOrEqual(nameof(limit),limit,100);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `bundle_name`.</summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemInsightsApps(int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsApps[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/apps"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemInsightsApps_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `bundle_name`.</summary>
        /// <param name="viaIdentity"></param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemInsightsAppsViaIdentity(global::System.String viaIdentity, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsApps[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systeminsights/apps$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systeminsights/apps'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/apps"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemInsightsApps_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListSystemInsightsApps" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemInsightsApps_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsApps[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.ISystemInsightsApps[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.ISystemInsightsApps) (JumpCloud.SDK.V2.Models.SystemInsightsApps.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListSystemInsightsApps" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemInsightsApps_Validate(int? limit, int? skip, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertIsLessThanOrEqual(nameof(limit),limit,100);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `health`.</summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemInsightsBattery(int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsBattery[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/battery"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemInsightsBattery_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `health`.</summary>
        /// <param name="viaIdentity"></param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemInsightsBatteryViaIdentity(global::System.String viaIdentity, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsBattery[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systeminsights/battery$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systeminsights/battery'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/battery"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemInsightsBattery_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListSystemInsightsBattery" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemInsightsBattery_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsBattery[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.ISystemInsightsBattery[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.ISystemInsightsBattery) (JumpCloud.SDK.V2.Models.SystemInsightsBattery.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListSystemInsightsBattery" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemInsightsBattery_Validate(int? limit, int? skip, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertIsLessThanOrEqual(nameof(limit),limit,100);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `protection_status`.</summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemInsightsBitlockerInfo(int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsBitlockerInfo[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/bitlocker_info"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemInsightsBitlockerInfo_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `protection_status`.</summary>
        /// <param name="viaIdentity"></param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemInsightsBitlockerInfoViaIdentity(global::System.String viaIdentity, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsBitlockerInfo[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systeminsights/bitlocker_info$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systeminsights/bitlocker_info'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/bitlocker_info"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemInsightsBitlockerInfo_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListSystemInsightsBitlockerInfo" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemInsightsBitlockerInfo_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsBitlockerInfo[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.ISystemInsightsBitlockerInfo[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.ISystemInsightsBitlockerInfo) (JumpCloud.SDK.V2.Models.SystemInsightsBitlockerInfo.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListSystemInsightsBitlockerInfo" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemInsightsBitlockerInfo_Validate(int? limit, int? skip, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertIsLessThanOrEqual(nameof(limit),limit,100);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `name`.</summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemInsightsBrowserPlugins(int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsBrowserPlugins[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/browser_plugins"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemInsightsBrowserPlugins_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `name`.</summary>
        /// <param name="viaIdentity"></param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemInsightsBrowserPluginsViaIdentity(global::System.String viaIdentity, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsBrowserPlugins[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systeminsights/browser_plugins$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systeminsights/browser_plugins'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/browser_plugins"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemInsightsBrowserPlugins_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListSystemInsightsBrowserPlugins" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemInsightsBrowserPlugins_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsBrowserPlugins[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.ISystemInsightsBrowserPlugins[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.ISystemInsightsBrowserPlugins) (JumpCloud.SDK.V2.Models.SystemInsightsBrowserPlugins.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListSystemInsightsBrowserPlugins" /> method. Call this like the actual call, but you
        /// will get validation events back.
        /// </summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemInsightsBrowserPlugins_Validate(int? limit, int? skip, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertIsLessThanOrEqual(nameof(limit),limit,100);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `name`.</summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemInsightsChromeExtensions(int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsChromeExtensions[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/chrome_extensions"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemInsightsChromeExtensions_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `name`.</summary>
        /// <param name="viaIdentity"></param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemInsightsChromeExtensionsViaIdentity(global::System.String viaIdentity, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsChromeExtensions[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systeminsights/chrome_extensions$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systeminsights/chrome_extensions'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/chrome_extensions"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemInsightsChromeExtensions_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListSystemInsightsChromeExtensions" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemInsightsChromeExtensions_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsChromeExtensions[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.ISystemInsightsChromeExtensions[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.ISystemInsightsChromeExtensions) (JumpCloud.SDK.V2.Models.SystemInsightsChromeExtensions.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListSystemInsightsChromeExtensions" /> method. Call this like the actual call, but you
        /// will get validation events back.
        /// </summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemInsightsChromeExtensions_Validate(int? limit, int? skip, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertIsLessThanOrEqual(nameof(limit),limit,100);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `identifier`.</summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemInsightsCrashes(int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsCrashes[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/crashes"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemInsightsCrashes_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `identifier`.</summary>
        /// <param name="viaIdentity"></param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemInsightsCrashesViaIdentity(global::System.String viaIdentity, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsCrashes[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systeminsights/crashes$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systeminsights/crashes'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/crashes"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemInsightsCrashes_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListSystemInsightsCrashes" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemInsightsCrashes_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsCrashes[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.ISystemInsightsCrashes[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.ISystemInsightsCrashes) (JumpCloud.SDK.V2.Models.SystemInsightsCrashes.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListSystemInsightsCrashes" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemInsightsCrashes_Validate(int? limit, int? skip, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertIsLessThanOrEqual(nameof(limit),limit,100);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `encryption_status`.</summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemInsightsDiskEncryption(int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsDiskEncryption[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/disk_encryption"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemInsightsDiskEncryption_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `encryption_status`.</summary>
        /// <param name="viaIdentity"></param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemInsightsDiskEncryptionViaIdentity(global::System.String viaIdentity, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsDiskEncryption[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systeminsights/disk_encryption$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systeminsights/disk_encryption'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/disk_encryption"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemInsightsDiskEncryption_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListSystemInsightsDiskEncryption" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemInsightsDiskEncryption_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsDiskEncryption[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.ISystemInsightsDiskEncryption[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.ISystemInsightsDiskEncryption) (JumpCloud.SDK.V2.Models.SystemInsightsDiskEncryption.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListSystemInsightsDiskEncryption" /> method. Call this like the actual call, but you
        /// will get validation events back.
        /// </summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemInsightsDiskEncryption_Validate(int? limit, int? skip, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertIsLessThanOrEqual(nameof(limit),limit,100);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `disk_index`.</summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemInsightsDiskInfo(int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsDiskInfo[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/disk_info"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemInsightsDiskInfo_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `disk_index`.</summary>
        /// <param name="viaIdentity"></param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemInsightsDiskInfoViaIdentity(global::System.String viaIdentity, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsDiskInfo[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systeminsights/disk_info$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systeminsights/disk_info'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/disk_info"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemInsightsDiskInfo_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListSystemInsightsDiskInfo" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemInsightsDiskInfo_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsDiskInfo[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.ISystemInsightsDiskInfo[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.ISystemInsightsDiskInfo) (JumpCloud.SDK.V2.Models.SystemInsightsDiskInfo.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListSystemInsightsDiskInfo" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemInsightsDiskInfo_Validate(int? limit, int? skip, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertIsLessThanOrEqual(nameof(limit),limit,100);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `address`.</summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemInsightsEtcHosts(int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsEtcHosts[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/etc_hosts"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemInsightsEtcHosts_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `address`.</summary>
        /// <param name="viaIdentity"></param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemInsightsEtcHostsViaIdentity(global::System.String viaIdentity, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsEtcHosts[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systeminsights/etc_hosts$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systeminsights/etc_hosts'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/etc_hosts"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemInsightsEtcHosts_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListSystemInsightsEtcHosts" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemInsightsEtcHosts_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsEtcHosts[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.ISystemInsightsEtcHosts[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.ISystemInsightsEtcHosts) (JumpCloud.SDK.V2.Models.SystemInsightsEtcHosts.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListSystemInsightsEtcHosts" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemInsightsEtcHosts_Validate(int? limit, int? skip, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertIsLessThanOrEqual(nameof(limit),limit,100);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `name`.</summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemInsightsFirefoxAddons(int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsFirefoxAddons[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/firefox_addons"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemInsightsFirefoxAddons_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `name`.</summary>
        /// <param name="viaIdentity"></param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemInsightsFirefoxAddonsViaIdentity(global::System.String viaIdentity, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsFirefoxAddons[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systeminsights/firefox_addons$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systeminsights/firefox_addons'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/firefox_addons"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemInsightsFirefoxAddons_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListSystemInsightsFirefoxAddons" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemInsightsFirefoxAddons_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsFirefoxAddons[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.ISystemInsightsFirefoxAddons[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.ISystemInsightsFirefoxAddons) (JumpCloud.SDK.V2.Models.SystemInsightsFirefoxAddons.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListSystemInsightsFirefoxAddons" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemInsightsFirefoxAddons_Validate(int? limit, int? skip, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertIsLessThanOrEqual(nameof(limit),limit,100);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `groupname`.</summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemInsightsGroups(int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsGroups[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/groups"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemInsightsGroups_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `groupname`.</summary>
        /// <param name="viaIdentity"></param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemInsightsGroupsViaIdentity(global::System.String viaIdentity, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsGroups[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systeminsights/groups$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systeminsights/groups'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/groups"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemInsightsGroups_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListSystemInsightsGroups" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemInsightsGroups_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsGroups[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.ISystemInsightsGroups[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.ISystemInsightsGroups) (JumpCloud.SDK.V2.Models.SystemInsightsGroups.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListSystemInsightsGroups" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemInsightsGroups_Validate(int? limit, int? skip, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertIsLessThanOrEqual(nameof(limit),limit,100);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `name`.</summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemInsightsIeExtensions(int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsIeExtensions[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/ie_extensions"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemInsightsIeExtensions_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `name`.</summary>
        /// <param name="viaIdentity"></param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemInsightsIeExtensionsViaIdentity(global::System.String viaIdentity, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsIeExtensions[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systeminsights/ie_extensions$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systeminsights/ie_extensions'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/ie_extensions"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemInsightsIeExtensions_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListSystemInsightsIeExtensions" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemInsightsIeExtensions_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsIeExtensions[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.ISystemInsightsIeExtensions[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.ISystemInsightsIeExtensions) (JumpCloud.SDK.V2.Models.SystemInsightsIeExtensions.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListSystemInsightsIeExtensions" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemInsightsIeExtensions_Validate(int? limit, int? skip, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertIsLessThanOrEqual(nameof(limit),limit,100);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `address`.</summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemInsightsInterfaceAddresses(int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsInterfaceAddresses[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/interface_addresses"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemInsightsInterfaceAddresses_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `address`.</summary>
        /// <param name="viaIdentity"></param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemInsightsInterfaceAddressesViaIdentity(global::System.String viaIdentity, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsInterfaceAddresses[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systeminsights/interface_addresses$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systeminsights/interface_addresses'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/interface_addresses"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemInsightsInterfaceAddresses_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// Actual wire call for <see cref="ListSystemInsightsInterfaceAddresses" /> method.
        /// </summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemInsightsInterfaceAddresses_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsInterfaceAddresses[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.ISystemInsightsInterfaceAddresses[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.ISystemInsightsInterfaceAddresses) (JumpCloud.SDK.V2.Models.SystemInsightsInterfaceAddresses.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListSystemInsightsInterfaceAddresses" /> method. Call this like the actual call, but
        /// you will get validation events back.
        /// </summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemInsightsInterfaceAddresses_Validate(int? limit, int? skip, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertIsLessThanOrEqual(nameof(limit),limit,100);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `version`.</summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemInsightsKernelInfo(int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsKernelInfo[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/kernel_info"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemInsightsKernelInfo_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `version`.</summary>
        /// <param name="viaIdentity"></param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemInsightsKernelInfoViaIdentity(global::System.String viaIdentity, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsKernelInfo[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systeminsights/kernel_info$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systeminsights/kernel_info'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/kernel_info"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemInsightsKernelInfo_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListSystemInsightsKernelInfo" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemInsightsKernelInfo_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsKernelInfo[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.ISystemInsightsKernelInfo[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.ISystemInsightsKernelInfo) (JumpCloud.SDK.V2.Models.SystemInsightsKernelInfo.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListSystemInsightsKernelInfo" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemInsightsKernelInfo_Validate(int? limit, int? skip, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertIsLessThanOrEqual(nameof(limit),limit,100);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `name`.</summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemInsightsLaunchd(int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsLaunchd[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/launchd"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemInsightsLaunchd_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `name`.</summary>
        /// <param name="viaIdentity"></param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemInsightsLaunchdViaIdentity(global::System.String viaIdentity, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsLaunchd[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systeminsights/launchd$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systeminsights/launchd'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/launchd"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemInsightsLaunchd_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListSystemInsightsLaunchd" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemInsightsLaunchd_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsLaunchd[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.ISystemInsightsLaunchd[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.ISystemInsightsLaunchd) (JumpCloud.SDK.V2.Models.SystemInsightsLaunchd.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListSystemInsightsLaunchd" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemInsightsLaunchd_Validate(int? limit, int? skip, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertIsLessThanOrEqual(nameof(limit),limit,100);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `user`.</summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemInsightsLoggedInUsers(int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsLoggedInUsers[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/logged_in_users"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemInsightsLoggedInUsers_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `user`.</summary>
        /// <param name="viaIdentity"></param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemInsightsLoggedInUsersViaIdentity(global::System.String viaIdentity, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsLoggedInUsers[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systeminsights/logged_in_users$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systeminsights/logged_in_users'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/logged_in_users"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemInsightsLoggedInUsers_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListSystemInsightsLoggedInUsers" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemInsightsLoggedInUsers_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsLoggedInUsers[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.ISystemInsightsLoggedInUsers[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.ISystemInsightsLoggedInUsers) (JumpCloud.SDK.V2.Models.SystemInsightsLoggedInUsers.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListSystemInsightsLoggedInUsers" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemInsightsLoggedInUsers_Validate(int? limit, int? skip, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertIsLessThanOrEqual(nameof(limit),limit,100);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `device_id`.</summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemInsightsLogicalDrives(int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsLogicalDrvies[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/logical_drives"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemInsightsLogicalDrives_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `device_id`.</summary>
        /// <param name="viaIdentity"></param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemInsightsLogicalDrivesViaIdentity(global::System.String viaIdentity, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsLogicalDrvies[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systeminsights/logical_drives$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systeminsights/logical_drives'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/logical_drives"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemInsightsLogicalDrives_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListSystemInsightsLogicalDrives" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemInsightsLogicalDrives_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsLogicalDrvies[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.ISystemInsightsLogicalDrvies[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.ISystemInsightsLogicalDrvies) (JumpCloud.SDK.V2.Models.SystemInsightsLogicalDrvies.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListSystemInsightsLogicalDrives" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemInsightsLogicalDrives_Validate(int? limit, int? skip, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertIsLessThanOrEqual(nameof(limit),limit,100);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `domain`.</summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemInsightsManagedPolicies(int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsManagedPolicies[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/managed_policies"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemInsightsManagedPolicies_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `domain`.</summary>
        /// <param name="viaIdentity"></param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemInsightsManagedPoliciesViaIdentity(global::System.String viaIdentity, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsManagedPolicies[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systeminsights/managed_policies$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systeminsights/managed_policies'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/managed_policies"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemInsightsManagedPolicies_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListSystemInsightsManagedPolicies" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemInsightsManagedPolicies_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsManagedPolicies[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.ISystemInsightsManagedPolicies[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.ISystemInsightsManagedPolicies) (JumpCloud.SDK.V2.Models.SystemInsightsManagedPolicies.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListSystemInsightsManagedPolicies" /> method. Call this like the actual call, but you
        /// will get validation events back.
        /// </summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemInsightsManagedPolicies_Validate(int? limit, int? skip, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertIsLessThanOrEqual(nameof(limit),limit,100);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `path`.</summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemInsightsMounts(int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsMounts[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/mounts"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemInsightsMounts_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `path`.</summary>
        /// <param name="viaIdentity"></param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemInsightsMountsViaIdentity(global::System.String viaIdentity, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsMounts[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systeminsights/mounts$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systeminsights/mounts'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/mounts"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemInsightsMounts_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListSystemInsightsMounts" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemInsightsMounts_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsMounts[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.ISystemInsightsMounts[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.ISystemInsightsMounts) (JumpCloud.SDK.V2.Models.SystemInsightsMounts.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListSystemInsightsMounts" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemInsightsMounts_Validate(int? limit, int? skip, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertIsLessThanOrEqual(nameof(limit),limit,100);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `version`.</summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemInsightsOSVersion(int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsOSVersion[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/os_version"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemInsightsOSVersion_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `version`.</summary>
        /// <param name="viaIdentity"></param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemInsightsOSVersionViaIdentity(global::System.String viaIdentity, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsOSVersion[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systeminsights/os_version$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systeminsights/os_version'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/os_version"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemInsightsOSVersion_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListSystemInsightsOSVersion" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemInsightsOSVersion_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsOSVersion[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.ISystemInsightsOSVersion[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.ISystemInsightsOSVersion) (JumpCloud.SDK.V2.Models.SystemInsightsOSVersion.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListSystemInsightsOSVersion" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemInsightsOSVersion_Validate(int? limit, int? skip, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertIsLessThanOrEqual(nameof(limit),limit,100);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `hotfix_id`.</summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemInsightsPatches(int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsPatches[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/patches"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemInsightsPatches_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `hotfix_id`.</summary>
        /// <param name="viaIdentity"></param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemInsightsPatchesViaIdentity(global::System.String viaIdentity, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsPatches[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systeminsights/patches$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systeminsights/patches'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/patches"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemInsightsPatches_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListSystemInsightsPatches" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemInsightsPatches_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsPatches[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.ISystemInsightsPatches[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.ISystemInsightsPatches) (JumpCloud.SDK.V2.Models.SystemInsightsPatches.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListSystemInsightsPatches" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemInsightsPatches_Validate(int? limit, int? skip, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertIsLessThanOrEqual(nameof(limit),limit,100);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `name`.</summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemInsightsPrograms(int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsPrograms[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/programs"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemInsightsPrograms_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `name`.</summary>
        /// <param name="viaIdentity"></param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemInsightsProgramsViaIdentity(global::System.String viaIdentity, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsPrograms[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systeminsights/programs$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systeminsights/programs'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/programs"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemInsightsPrograms_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListSystemInsightsPrograms" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemInsightsPrograms_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsPrograms[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.ISystemInsightsPrograms[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.ISystemInsightsPrograms) (JumpCloud.SDK.V2.Models.SystemInsightsPrograms.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListSystemInsightsPrograms" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemInsightsPrograms_Validate(int? limit, int? skip, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertIsLessThanOrEqual(nameof(limit),limit,100);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `name`.</summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemInsightsSafariExtensions(int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsSafariExtensions[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/safari_extensions"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemInsightsSafariExtensions_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `name`.</summary>
        /// <param name="viaIdentity"></param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemInsightsSafariExtensionsViaIdentity(global::System.String viaIdentity, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsSafariExtensions[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systeminsights/safari_extensions$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systeminsights/safari_extensions'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/safari_extensions"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemInsightsSafariExtensions_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListSystemInsightsSafariExtensions" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemInsightsSafariExtensions_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsSafariExtensions[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.ISystemInsightsSafariExtensions[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.ISystemInsightsSafariExtensions) (JumpCloud.SDK.V2.Models.SystemInsightsSafariExtensions.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListSystemInsightsSafariExtensions" /> method. Call this like the actual call, but you
        /// will get validation events back.
        /// </summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemInsightsSafariExtensions_Validate(int? limit, int? skip, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertIsLessThanOrEqual(nameof(limit),limit,100);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `username`.</summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemInsightsShadow(int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsShadow[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/shadow"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemInsightsShadow_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `username`.</summary>
        /// <param name="viaIdentity"></param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemInsightsShadowViaIdentity(global::System.String viaIdentity, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsShadow[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systeminsights/shadow$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systeminsights/shadow'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/shadow"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemInsightsShadow_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListSystemInsightsShadow" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemInsightsShadow_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsShadow[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.ISystemInsightsShadow[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.ISystemInsightsShadow) (JumpCloud.SDK.V2.Models.SystemInsightsShadow.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListSystemInsightsShadow" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemInsightsShadow_Validate(int? limit, int? skip, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertIsLessThanOrEqual(nameof(limit),limit,100);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `name`.</summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemInsightsSharedFolders(int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsSharedFolders[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/shared_folders"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemInsightsSharedFolders_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `name`.</summary>
        /// <param name="viaIdentity"></param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemInsightsSharedFoldersViaIdentity(global::System.String viaIdentity, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsSharedFolders[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systeminsights/shared_folders$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systeminsights/shared_folders'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/shared_folders"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemInsightsSharedFolders_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListSystemInsightsSharedFolders" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemInsightsSharedFolders_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsSharedFolders[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.ISystemInsightsSharedFolders[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.ISystemInsightsSharedFolders) (JumpCloud.SDK.V2.Models.SystemInsightsSharedFolders.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListSystemInsightsSharedFolders" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemInsightsSharedFolders_Validate(int? limit, int? skip, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertIsLessThanOrEqual(nameof(limit),limit,100);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `type`.</summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemInsightsSharedResources(int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsSharedResources[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/shared_resources"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemInsightsSharedResources_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `type`.</summary>
        /// <param name="viaIdentity"></param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemInsightsSharedResourcesViaIdentity(global::System.String viaIdentity, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsSharedResources[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systeminsights/shared_resources$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systeminsights/shared_resources'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/shared_resources"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemInsightsSharedResources_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListSystemInsightsSharedResources" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemInsightsSharedResources_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsSharedResources[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.ISystemInsightsSharedResources[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.ISystemInsightsSharedResources) (JumpCloud.SDK.V2.Models.SystemInsightsSharedResources.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListSystemInsightsSharedResources" /> method. Call this like the actual call, but you
        /// will get validation events back.
        /// </summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemInsightsSharedResources_Validate(int? limit, int? skip, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertIsLessThanOrEqual(nameof(limit),limit,100);
            }
        }

        /// <summary>Only valid filed field is `system_id`.</summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemInsightsSharingPreferences(int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsSharingPreferences[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/sharing_preferences"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemInsightsSharingPreferences_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Only valid filed field is `system_id`.</summary>
        /// <param name="viaIdentity"></param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemInsightsSharingPreferencesViaIdentity(global::System.String viaIdentity, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsSharingPreferences[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systeminsights/sharing_preferences$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systeminsights/sharing_preferences'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/sharing_preferences"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemInsightsSharingPreferences_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// Actual wire call for <see cref="ListSystemInsightsSharingPreferences" /> method.
        /// </summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemInsightsSharingPreferences_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsSharingPreferences[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.ISystemInsightsSharingPreferences[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.ISystemInsightsSharingPreferences) (JumpCloud.SDK.V2.Models.SystemInsightsSharingPreferences.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListSystemInsightsSharingPreferences" /> method. Call this like the actual call, but
        /// you will get validation events back.
        /// </summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemInsightsSharingPreferences_Validate(int? limit, int? skip, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertIsLessThanOrEqual(nameof(limit),limit,100);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `enabled`.</summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemInsightsSipConfig(int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsSipConfig[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/sip_config"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemInsightsSipConfig_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `enabled`.</summary>
        /// <param name="viaIdentity"></param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemInsightsSipConfigViaIdentity(global::System.String viaIdentity, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsSipConfig[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systeminsights/sip_config$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systeminsights/sip_config'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/sip_config"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemInsightsSipConfig_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListSystemInsightsSipConfig" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemInsightsSipConfig_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsSipConfig[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.ISystemInsightsSipConfig[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.ISystemInsightsSipConfig) (JumpCloud.SDK.V2.Models.SystemInsightsSipConfig.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListSystemInsightsSipConfig" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemInsightsSipConfig_Validate(int? limit, int? skip, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertIsLessThanOrEqual(nameof(limit),limit,100);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `name`.</summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemInsightsSystemControls(int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsSystemControls[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/system_controls"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemInsightsSystemControls_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `name`.</summary>
        /// <param name="viaIdentity"></param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemInsightsSystemControlsViaIdentity(global::System.String viaIdentity, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsSystemControls[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systeminsights/system_controls$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systeminsights/system_controls'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/system_controls"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemInsightsSystemControls_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListSystemInsightsSystemControls" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemInsightsSystemControls_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsSystemControls[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.ISystemInsightsSystemControls[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.ISystemInsightsSystemControls) (JumpCloud.SDK.V2.Models.SystemInsightsSystemControls.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListSystemInsightsSystemControls" /> method. Call this like the actual call, but you
        /// will get validation events back.
        /// </summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemInsightsSystemControls_Validate(int? limit, int? skip, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertIsLessThanOrEqual(nameof(limit),limit,100);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `cpu_subtype`.</summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemInsightsSystemInfo(int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsSystemInfo[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/system_info"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemInsightsSystemInfo_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `cpu_subtype`.</summary>
        /// <param name="viaIdentity"></param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemInsightsSystemInfoViaIdentity(global::System.String viaIdentity, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsSystemInfo[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systeminsights/system_info$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systeminsights/system_info'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/system_info"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemInsightsSystemInfo_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListSystemInsightsSystemInfo" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemInsightsSystemInfo_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsSystemInfo[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.ISystemInsightsSystemInfo[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.ISystemInsightsSystemInfo) (JumpCloud.SDK.V2.Models.SystemInsightsSystemInfo.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListSystemInsightsSystemInfo" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemInsightsSystemInfo_Validate(int? limit, int? skip, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertIsLessThanOrEqual(nameof(limit),limit,100);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `days`.</summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemInsightsUptime(int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsUptime[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/uptime"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemInsightsUptime_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `days`.</summary>
        /// <param name="viaIdentity"></param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemInsightsUptimeViaIdentity(global::System.String viaIdentity, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsUptime[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systeminsights/uptime$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systeminsights/uptime'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/uptime"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemInsightsUptime_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListSystemInsightsUptime" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemInsightsUptime_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsUptime[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.ISystemInsightsUptime[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.ISystemInsightsUptime) (JumpCloud.SDK.V2.Models.SystemInsightsUptime.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListSystemInsightsUptime" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemInsightsUptime_Validate(int? limit, int? skip, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertIsLessThanOrEqual(nameof(limit),limit,100);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `model`.</summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemInsightsUsbDevices(int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsUsbDevices[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/usb_devices"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemInsightsUsbDevices_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `model`.</summary>
        /// <param name="viaIdentity"></param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemInsightsUsbDevicesViaIdentity(global::System.String viaIdentity, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsUsbDevices[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systeminsights/usb_devices$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systeminsights/usb_devices'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/usb_devices"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemInsightsUsbDevices_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListSystemInsightsUsbDevices" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemInsightsUsbDevices_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsUsbDevices[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.ISystemInsightsUsbDevices[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.ISystemInsightsUsbDevices) (JumpCloud.SDK.V2.Models.SystemInsightsUsbDevices.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListSystemInsightsUsbDevices" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemInsightsUsbDevices_Validate(int? limit, int? skip, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertIsLessThanOrEqual(nameof(limit),limit,100);
            }
        }

        /// <summary>Only valid filter field is `system_id`.</summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemInsightsUserGroups(int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsUserGroups[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/user_groups"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemInsightsUserGroups_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Only valid filter field is `system_id`.</summary>
        /// <param name="viaIdentity"></param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemInsightsUserGroupsViaIdentity(global::System.String viaIdentity, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsUserGroups[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systeminsights/user_groups$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systeminsights/user_groups'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/user_groups"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemInsightsUserGroups_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListSystemInsightsUserGroups" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemInsightsUserGroups_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsUserGroups[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.ISystemInsightsUserGroups[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.ISystemInsightsUserGroups) (JumpCloud.SDK.V2.Models.SystemInsightsUserGroups.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListSystemInsightsUserGroups" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemInsightsUserGroups_Validate(int? limit, int? skip, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertIsLessThanOrEqual(nameof(limit),limit,100);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `uid`.</summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemInsightsUserSshKeys(int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsUserSshKeys[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/user_ssh_keys"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemInsightsUserSshKeys_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `uid`.</summary>
        /// <param name="viaIdentity"></param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemInsightsUserSshKeysViaIdentity(global::System.String viaIdentity, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsUserSshKeys[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systeminsights/user_ssh_keys$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systeminsights/user_ssh_keys'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/user_ssh_keys"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemInsightsUserSshKeys_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListSystemInsightsUserSshKeys" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemInsightsUserSshKeys_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsUserSshKeys[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.ISystemInsightsUserSshKeys[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.ISystemInsightsUserSshKeys) (JumpCloud.SDK.V2.Models.SystemInsightsUserSshKeys.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListSystemInsightsUserSshKeys" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemInsightsUserSshKeys_Validate(int? limit, int? skip, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertIsLessThanOrEqual(nameof(limit),limit,100);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `username`.</summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemInsightsUsers(int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsUsers[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/users"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemInsightsUsers_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `username`.</summary>
        /// <param name="viaIdentity"></param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemInsightsUsersViaIdentity(global::System.String viaIdentity, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsUsers[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systeminsights/users$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systeminsights/users'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/users"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemInsightsUsers_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListSystemInsightsUsers" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemInsightsUsers_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsUsers[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.ISystemInsightsUsers[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.ISystemInsightsUsers) (JumpCloud.SDK.V2.Models.SystemInsightsUsers.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListSystemInsightsUsers" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemInsightsUsers_Validate(int? limit, int? skip, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertIsLessThanOrEqual(nameof(limit),limit,100);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `type`.</summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemInsightsWindowsCrashes(int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsWindowsCrashes[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/windows_crashes"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemInsightsWindowsCrashes_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Valid filter fields are `system_id` and `type`.</summary>
        /// <param name="viaIdentity"></param>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemInsightsWindowsCrashesViaIdentity(global::System.String viaIdentity, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsWindowsCrashes[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systeminsights/windows_crashes$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systeminsights/windows_crashes'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systeminsights/windows_crashes"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemInsightsWindowsCrashes_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListSystemInsightsWindowsCrashes" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemInsightsWindowsCrashes_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemInsightsWindowsCrashes[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.ISystemInsightsWindowsCrashes[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.ISystemInsightsWindowsCrashes) (JumpCloud.SDK.V2.Models.SystemInsightsWindowsCrashes.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListSystemInsightsWindowsCrashes" /> method. Call this like the actual call, but you
        /// will get validation events back.
        /// </summary>
        /// <param name="limit"></param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemInsightsWindowsCrashes_Validate(int? limit, int? skip, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertIsLessThanOrEqual(nameof(limit),limit,100);
            }
        }

        /// <summary>
        /// This endpoint returns all the System Groups a System is a member of.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/systems/{System_ID}/memberof \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="systemId">ObjectID of the System.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="date">Current date header for the System Context API</param>
        /// <param name="authorization">Authorization header for the System Context API</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemMemberOf(string systemId, string[] filter, int? limit, int? skip, string date, string authorization, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systems/"
                        + global::System.Uri.EscapeDataString(systemId)
                        + "/memberof"
                        + "?"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // add headers parameters
                if (null != date)
                {
                    request.Headers.Add("Date",date);
                }
                if (null != authorization)
                {
                    request.Headers.Add("Authorization",authorization);
                }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemMemberOf_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns all the System Groups a System is a member of.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/systems/{System_ID}/memberof \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="date">Current date header for the System Context API</param>
        /// <param name="authorization">Authorization header for the System Context API</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemMemberOfViaIdentity(global::System.String viaIdentity, string[] filter, int? limit, int? skip, string date, string authorization, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systems/(?<system_id>[^/]+)/memberof$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systems/{system_id}/memberof'");
                }

                // replace URI parameters with values from identity
                var systemId = _match.Groups["system_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systems/"
                        + systemId
                        + "/memberof"
                        + "?"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // add headers parameters
                if (null != date)
                {
                    request.Headers.Add("Date",date);
                }
                if (null != authorization)
                {
                    request.Headers.Add("Authorization",authorization);
                }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemMemberOf_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListSystemMemberOf" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemMemberOf_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1) (JumpCloud.SDK.V2.Models.GraphObjectWithPaths1.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListSystemMemberOf" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="systemId">ObjectID of the System.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="date">Current date header for the System Context API</param>
        /// <param name="authorization">Authorization header for the System Context API</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemMemberOf_Validate(string systemId, string[] filter, int? limit, int? skip, string date, string authorization, string[] sort, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(systemId),systemId);
                await eventListener.AssertNotNull(nameof(date),date);
                await eventListener.AssertNotNull(nameof(authorization),authorization);
            }
        }

        /// <summary>
        /// This endpoint will return all Commands bound to a System, either directly or indirectly, essentially traversing the JumpCloud
        /// Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this System to the corresponding Command; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the Command from this System.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/systems/{System_ID}/commands \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="systemId">ObjectID of the System.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemTraverseCommand(string systemId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systems/"
                        + global::System.Uri.EscapeDataString(systemId)
                        + "/commands"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemTraverseCommand_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all Commands bound to a System, either directly or indirectly, essentially traversing the JumpCloud
        /// Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this System to the corresponding Command; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the Command from this System.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/systems/{System_ID}/commands \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemTraverseCommandViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systems/(?<system_id>[^/]+)/commands$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systems/{system_id}/commands'");
                }

                // replace URI parameters with values from identity
                var systemId = _match.Groups["system_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systems/"
                        + systemId
                        + "/commands"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemTraverseCommand_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListSystemTraverseCommand" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemTraverseCommand_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1) (JumpCloud.SDK.V2.Models.GraphObjectWithPaths1.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListSystemTraverseCommand" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="systemId">ObjectID of the System.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemTraverseCommand_Validate(string systemId, int? limit, int? skip, string[] filter, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(systemId),systemId);
            }
        }

        /// <summary>
        /// This endpoint will return all Policies bound to a System, either directly or indirectly, essentially traversing the JumpCloud
        /// Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this System to the corresponding Policy; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the Policy from this System.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// This endpoint is not yet public as we have finish the code.
        /// ##### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/{System_ID}/policies \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="systemId">ObjectID of the System.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemTraversePolicy(string systemId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systems/"
                        + global::System.Uri.EscapeDataString(systemId)
                        + "/policies"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemTraversePolicy_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all Policies bound to a System, either directly or indirectly, essentially traversing the JumpCloud
        /// Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this System to the corresponding Policy; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the Policy from this System.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// This endpoint is not yet public as we have finish the code.
        /// ##### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/{System_ID}/policies \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemTraversePolicyViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systems/(?<system_id>[^/]+)/policies$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systems/{system_id}/policies'");
                }

                // replace URI parameters with values from identity
                var systemId = _match.Groups["system_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systems/"
                        + systemId
                        + "/policies"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemTraversePolicy_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListSystemTraversePolicy" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemTraversePolicy_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1) (JumpCloud.SDK.V2.Models.GraphObjectWithPaths1.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListSystemTraversePolicy" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="systemId">ObjectID of the System.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemTraversePolicy_Validate(string systemId, int? limit, int? skip, string[] filter, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(systemId),systemId);
            }
        }

        /// <summary>
        /// This endpoint will return all Users bound to a System, either directly or indirectly essentially traversing the JumpCloud
        /// Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this System to the corresponding User; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the User from this System.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/systems/{System_ID}/users \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="systemId">ObjectID of the System.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="date">Current date header for the System Context API</param>
        /// <param name="authorization">Authorization header for the System Context API</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemTraverseUser(string systemId, int? limit, int? skip, string date, string authorization, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systems/"
                        + global::System.Uri.EscapeDataString(systemId)
                        + "/users"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // add headers parameters
                if (null != date)
                {
                    request.Headers.Add("Date",date);
                }
                if (null != authorization)
                {
                    request.Headers.Add("Authorization",authorization);
                }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemTraverseUser_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all User Groups bound to a System, either directly or indirectly essentially traversing the
        /// JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this System to the corresponding User Group; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the User Group from this System.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/systems/{System_ID}/usergroups \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="systemId">ObjectID of the System.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="date">Current date header for the System Context API</param>
        /// <param name="authorization">Authorization header for the System Context API</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemTraverseUserGroup(string systemId, int? limit, int? skip, string date, string authorization, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systems/"
                        + global::System.Uri.EscapeDataString(systemId)
                        + "/usergroups"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // add headers parameters
                if (null != date)
                {
                    request.Headers.Add("Date",date);
                }
                if (null != authorization)
                {
                    request.Headers.Add("Authorization",authorization);
                }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemTraverseUserGroup_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all User Groups bound to a System, either directly or indirectly essentially traversing the
        /// JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this System to the corresponding User Group; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the User Group from this System.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/systems/{System_ID}/usergroups \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="date">Current date header for the System Context API</param>
        /// <param name="authorization">Authorization header for the System Context API</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemTraverseUserGroupViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string date, string authorization, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systems/(?<system_id>[^/]+)/usergroups$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systems/{system_id}/usergroups'");
                }

                // replace URI parameters with values from identity
                var systemId = _match.Groups["system_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systems/"
                        + systemId
                        + "/usergroups"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // add headers parameters
                if (null != date)
                {
                    request.Headers.Add("Date",date);
                }
                if (null != authorization)
                {
                    request.Headers.Add("Authorization",authorization);
                }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemTraverseUserGroup_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListSystemTraverseUserGroup" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemTraverseUserGroup_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1) (JumpCloud.SDK.V2.Models.GraphObjectWithPaths1.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListSystemTraverseUserGroup" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="systemId">ObjectID of the System.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="date">Current date header for the System Context API</param>
        /// <param name="authorization">Authorization header for the System Context API</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemTraverseUserGroup_Validate(string systemId, int? limit, int? skip, string date, string authorization, string[] filter, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(systemId),systemId);
                await eventListener.AssertNotNull(nameof(date),date);
                await eventListener.AssertNotNull(nameof(authorization),authorization);
            }
        }

        /// <summary>
        /// This endpoint will return all Users bound to a System, either directly or indirectly essentially traversing the JumpCloud
        /// Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this System to the corresponding User; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the User from this System.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/systems/{System_ID}/users \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="date">Current date header for the System Context API</param>
        /// <param name="authorization">Authorization header for the System Context API</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListSystemTraverseUserViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string date, string authorization, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systems/(?<system_id>[^/]+)/users$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systems/{system_id}/users'");
                }

                // replace URI parameters with values from identity
                var systemId = _match.Groups["system_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systems/"
                        + systemId
                        + "/users"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // add headers parameters
                if (null != date)
                {
                    request.Headers.Add("Date",date);
                }
                if (null != authorization)
                {
                    request.Headers.Add("Authorization",authorization);
                }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListSystemTraverseUser_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListSystemTraverseUser" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemTraverseUser_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1) (JumpCloud.SDK.V2.Models.GraphObjectWithPaths1.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListSystemTraverseUser" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="systemId">ObjectID of the System.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="date">Current date header for the System Context API</param>
        /// <param name="authorization">Authorization header for the System Context API</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListSystemTraverseUser_Validate(string systemId, int? limit, int? skip, string date, string authorization, string[] filter, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(systemId),systemId);
                await eventListener.AssertNotNull(nameof(date),date);
                await eventListener.AssertNotNull(nameof(authorization),authorization);
            }
        }

        /// <summary>
        /// This endpoint returns the _direct_ associations of a User.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example Users and Systems.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/users/{UserID}/associations?targets=system_group \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="userId">ObjectID of the User.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="targets"></param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListUserAssociation(string userId, int? limit, int? skip, string[] targets, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/users/"
                        + global::System.Uri.EscapeDataString(userId)
                        + "/associations"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != targets  && targets.Length > 0 ? "targets=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(targets, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListUserAssociation_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns the _direct_ associations of a User.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example Users and Systems.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/users/{UserID}/associations?targets=system_group \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="targets"></param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListUserAssociationViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] targets, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/users/(?<user_id>[^/]+)/associations$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/users/{user_id}/associations'");
                }

                // replace URI parameters with values from identity
                var userId = _match.Groups["user_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/users/"
                        + userId
                        + "/associations"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != targets  && targets.Length > 0 ? "targets=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(targets, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListUserAssociation_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListUserAssociation" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListUserAssociation_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.IGraphConnection[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.IGraphConnection) (JumpCloud.SDK.V2.Models.GraphConnection.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListUserAssociation" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="userId">ObjectID of the User.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="targets"></param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListUserAssociation_Validate(string userId, int? limit, int? skip, string[] targets, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(userId),userId);
                await eventListener.AssertNotNull(nameof(targets), targets);
                if (targets != null ) {
                        for (int __i = 0; __i < targets.Length; __i++) {
                          await eventListener.AssertEnum($"targets[{__i}]",targets[__i],@"active_directory", @"application", @"command", @"g_suite", @"ldap_server", @"office_365", @"policy", @"radius_server", @"system", @"system_group");
                        }
                      }
            }
        }

        /// <summary>
        /// This endpoint returns all User Groups.
        /// Available filter fields:
        /// - `name`
        /// - `disabled`
        /// - `type`
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/usergroups \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onDefault">a delegate that is called when the remote service returns default (any response code not handled
        /// elsewhere).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListUserGroup(string[] filter, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IUserGroup[]>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IError>, global::System.Threading.Tasks.Task> onDefault, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/usergroups"
                        + "?"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListUserGroup_Call(request,onOk,onDefault,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns the _direct_ associations of this User Group.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example User Groups and Users.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/usergroups/{GroupID}/associations?targets=system \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="groupId">ObjectID of the User Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="targets"></param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListUserGroupAssociation(string groupId, int? limit, int? skip, string[] targets, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/usergroups/"
                        + global::System.Uri.EscapeDataString(groupId)
                        + "/associations"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != targets  && targets.Length > 0 ? "targets=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(targets, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListUserGroupAssociation_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns the _direct_ associations of this User Group.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example User Groups and Users.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/usergroups/{GroupID}/associations?targets=system \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="targets"></param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListUserGroupAssociationViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] targets, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/usergroups/(?<group_id>[^/]+)/associations$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/usergroups/{group_id}/associations'");
                }

                // replace URI parameters with values from identity
                var groupId = _match.Groups["group_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/usergroups/"
                        + groupId
                        + "/associations"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != targets  && targets.Length > 0 ? "targets=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(targets, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListUserGroupAssociation_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListUserGroupAssociation" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListUserGroupAssociation_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.IGraphConnection[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.IGraphConnection) (JumpCloud.SDK.V2.Models.GraphConnection.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListUserGroupAssociation" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="groupId">ObjectID of the User Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="targets"></param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListUserGroupAssociation_Validate(string groupId, int? limit, int? skip, string[] targets, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(groupId),groupId);
                await eventListener.AssertNotNull(nameof(targets), targets);
                if (targets != null ) {
                        for (int __i = 0; __i < targets.Length; __i++) {
                          await eventListener.AssertEnum($"targets[{__i}]",targets[__i],@"active_directory", @"application", @"command", @"g_suite", @"ldap_server", @"office_365", @"policy", @"radius_server", @"system", @"system_group");
                        }
                      }
            }
        }

        /// <summary>
        /// This endpoint returns the user members of a User Group.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/usergroups/{GroupID}/members \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="groupId">ObjectID of the User Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListUserGroupMembers(string groupId, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/usergroups/"
                        + global::System.Uri.EscapeDataString(groupId)
                        + "/members"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListUserGroupMembers_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns the user members of a User Group.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/usergroups/{GroupID}/members \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListUserGroupMembersViaIdentity(global::System.String viaIdentity, int? limit, int? skip, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/usergroups/(?<group_id>[^/]+)/members$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/usergroups/{group_id}/members'");
                }

                // replace URI parameters with values from identity
                var groupId = _match.Groups["group_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/usergroups/"
                        + groupId
                        + "/members"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListUserGroupMembers_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListUserGroupMembers" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListUserGroupMembers_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphConnection[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.IGraphConnection[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.IGraphConnection) (JumpCloud.SDK.V2.Models.GraphConnection.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListUserGroupMembers" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="groupId">ObjectID of the User Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListUserGroupMembers_Validate(string groupId, int? limit, int? skip, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(groupId),groupId);
            }
        }

        /// <summary>
        /// This endpoint returns all users members that are a member of this User Group.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/usergroups/{GroupID}/membership \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="groupId">ObjectID of the User Group.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListUserGroupMembership(string groupId, string[] filter, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/usergroups/"
                        + global::System.Uri.EscapeDataString(groupId)
                        + "/membership"
                        + "?"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListUserGroupMembership_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns all users members that are a member of this User Group.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/usergroups/{GroupID}/membership \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListUserGroupMembershipViaIdentity(global::System.String viaIdentity, string[] filter, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/usergroups/(?<group_id>[^/]+)/membership$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/usergroups/{group_id}/membership'");
                }

                // replace URI parameters with values from identity
                var groupId = _match.Groups["group_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/usergroups/"
                        + groupId
                        + "/membership"
                        + "?"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListUserGroupMembership_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListUserGroupMembership" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListUserGroupMembership_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1) (JumpCloud.SDK.V2.Models.GraphObjectWithPaths1.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListUserGroupMembership" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="groupId">ObjectID of the User Group.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListUserGroupMembership_Validate(string groupId, string[] filter, int? limit, int? skip, string[] sort, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(groupId),groupId);
            }
        }

        /// <summary>
        /// This endpoint will return all Applications bound to a User Group, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this User Group to the corresponding Application; this array represents all
        /// grouping and/or associations that would have to be removed to deprovision the Application from this User Group.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/usergroups/{GroupID}/applications \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="groupId">ObjectID of the User Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListUserGroupTraverseApplication(string groupId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/usergroups/"
                        + global::System.Uri.EscapeDataString(groupId)
                        + "/applications"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListUserGroupTraverseApplication_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all Applications bound to a User Group, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this User Group to the corresponding Application; this array represents all
        /// grouping and/or associations that would have to be removed to deprovision the Application from this User Group.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/usergroups/{GroupID}/applications \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListUserGroupTraverseApplicationViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/usergroups/(?<group_id>[^/]+)/applications$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/usergroups/{group_id}/applications'");
                }

                // replace URI parameters with values from identity
                var groupId = _match.Groups["group_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/usergroups/"
                        + groupId
                        + "/applications"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListUserGroupTraverseApplication_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListUserGroupTraverseApplication" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListUserGroupTraverseApplication_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1) (JumpCloud.SDK.V2.Models.GraphObjectWithPaths1.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListUserGroupTraverseApplication" /> method. Call this like the actual call, but you
        /// will get validation events back.
        /// </summary>
        /// <param name="groupId">ObjectID of the User Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListUserGroupTraverseApplication_Validate(string groupId, int? limit, int? skip, string[] filter, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(groupId),groupId);
            }
        }

        /// <summary>
        /// This endpoint will return all Directories bound to a User Group, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this User Group to the corresponding Directory; this array represents all
        /// grouping and/or associations that would have to be removed to deprovision the Directories from this User Group.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/usergroups/{GroupID}/directories \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="groupId">ObjectID of the User Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListUserGroupTraverseDirectory(string groupId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/usergroups/"
                        + global::System.Uri.EscapeDataString(groupId)
                        + "/directories"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListUserGroupTraverseDirectory_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all Directories bound to a User Group, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this User Group to the corresponding Directory; this array represents all
        /// grouping and/or associations that would have to be removed to deprovision the Directories from this User Group.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/usergroups/{GroupID}/directories \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListUserGroupTraverseDirectoryViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/usergroups/(?<group_id>[^/]+)/directories$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/usergroups/{group_id}/directories'");
                }

                // replace URI parameters with values from identity
                var groupId = _match.Groups["group_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/usergroups/"
                        + groupId
                        + "/directories"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListUserGroupTraverseDirectory_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListUserGroupTraverseDirectory" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListUserGroupTraverseDirectory_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1) (JumpCloud.SDK.V2.Models.GraphObjectWithPaths1.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListUserGroupTraverseDirectory" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="groupId">ObjectID of the User Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListUserGroupTraverseDirectory_Validate(string groupId, int? limit, int? skip, string[] filter, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(groupId),groupId);
            }
        }

        /// <summary>
        /// This endpoint will return all G Suite Instances bound to a User Group, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this User Group to the corresponding G Suite instance; this array represents
        /// all grouping and/or associations that would have to be removed to deprovision the G Suite instance from this User Group.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/usergroups/{GroupID/gsuites \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="groupId">ObjectID of the User Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListUserGroupTraverseGSuite(string groupId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/usergroups/"
                        + global::System.Uri.EscapeDataString(groupId)
                        + "/gsuites"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListUserGroupTraverseGSuite_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all G Suite Instances bound to a User Group, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this User Group to the corresponding G Suite instance; this array represents
        /// all grouping and/or associations that would have to be removed to deprovision the G Suite instance from this User Group.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/usergroups/{GroupID/gsuites \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListUserGroupTraverseGSuiteViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/usergroups/(?<group_id>[^/]+)/gsuites$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/usergroups/{group_id}/gsuites'");
                }

                // replace URI parameters with values from identity
                var groupId = _match.Groups["group_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/usergroups/"
                        + groupId
                        + "/gsuites"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListUserGroupTraverseGSuite_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListUserGroupTraverseGSuite" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListUserGroupTraverseGSuite_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1) (JumpCloud.SDK.V2.Models.GraphObjectWithPaths1.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListUserGroupTraverseGSuite" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="groupId">ObjectID of the User Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListUserGroupTraverseGSuite_Validate(string groupId, int? limit, int? skip, string[] filter, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(groupId),groupId);
            }
        }

        /// <summary>
        /// This endpoint will return all LDAP Servers bound to a User Group, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this User Group to the corresponding LDAP Server; this array represents all
        /// grouping and/or associations that would have to be removed to deprovision the LDAP Server from this User Group.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/usergroups/{GroupID}/ldapservers \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="groupId">ObjectID of the User Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListUserGroupTraverseLdapServer(string groupId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/usergroups/"
                        + global::System.Uri.EscapeDataString(groupId)
                        + "/ldapservers"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListUserGroupTraverseLdapServer_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all LDAP Servers bound to a User Group, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this User Group to the corresponding LDAP Server; this array represents all
        /// grouping and/or associations that would have to be removed to deprovision the LDAP Server from this User Group.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/usergroups/{GroupID}/ldapservers \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListUserGroupTraverseLdapServerViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/usergroups/(?<group_id>[^/]+)/ldapservers$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/usergroups/{group_id}/ldapservers'");
                }

                // replace URI parameters with values from identity
                var groupId = _match.Groups["group_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/usergroups/"
                        + groupId
                        + "/ldapservers"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListUserGroupTraverseLdapServer_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListUserGroupTraverseLdapServer" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListUserGroupTraverseLdapServer_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1) (JumpCloud.SDK.V2.Models.GraphObjectWithPaths1.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListUserGroupTraverseLdapServer" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="groupId">ObjectID of the User Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListUserGroupTraverseLdapServer_Validate(string groupId, int? limit, int? skip, string[] filter, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(groupId),groupId);
            }
        }

        /// <summary>
        /// This endpoint will return all Office 365 instances bound to a User Group, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this User Group to the corresponding Office 365 instance; this array represents
        /// all grouping and/or associations that would have to be removed to deprovision the Office 365 instance from this User Group.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/usergroups/{GroupID}/office365s \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="groupId">ObjectID of the User Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListUserGroupTraverseOffice365(string groupId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/usergroups/"
                        + global::System.Uri.EscapeDataString(groupId)
                        + "/office365s"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListUserGroupTraverseOffice365_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all Office 365 instances bound to a User Group, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this User Group to the corresponding Office 365 instance; this array represents
        /// all grouping and/or associations that would have to be removed to deprovision the Office 365 instance from this User Group.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/usergroups/{GroupID}/office365s \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListUserGroupTraverseOffice365ViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/usergroups/(?<group_id>[^/]+)/office365s$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/usergroups/{group_id}/office365s'");
                }

                // replace URI parameters with values from identity
                var groupId = _match.Groups["group_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/usergroups/"
                        + groupId
                        + "/office365s"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListUserGroupTraverseOffice365_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListUserGroupTraverseOffice365" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListUserGroupTraverseOffice365_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1) (JumpCloud.SDK.V2.Models.GraphObjectWithPaths1.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListUserGroupTraverseOffice365" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="groupId">ObjectID of the User Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListUserGroupTraverseOffice365_Validate(string groupId, int? limit, int? skip, string[] filter, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(groupId),groupId);
            }
        }

        /// <summary>
        /// This endpoint will return all RADIUS servers bound to a User Group, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this User Group to the corresponding RADIUS Server; this array represents
        /// all grouping and/or associations that would have to be removed to deprovision the RADIUS Server from this User Group.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/usergroups/{GroupID}/radiusservers \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="groupId">ObjectID of the User Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListUserGroupTraverseRadiusServer(string groupId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/usergroups/"
                        + global::System.Uri.EscapeDataString(groupId)
                        + "/radiusservers"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListUserGroupTraverseRadiusServer_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all RADIUS servers bound to a User Group, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this User Group to the corresponding RADIUS Server; this array represents
        /// all grouping and/or associations that would have to be removed to deprovision the RADIUS Server from this User Group.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/usergroups/{GroupID}/radiusservers \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListUserGroupTraverseRadiusServerViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/usergroups/(?<group_id>[^/]+)/radiusservers$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/usergroups/{group_id}/radiusservers'");
                }

                // replace URI parameters with values from identity
                var groupId = _match.Groups["group_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/usergroups/"
                        + groupId
                        + "/radiusservers"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListUserGroupTraverseRadiusServer_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListUserGroupTraverseRadiusServer" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListUserGroupTraverseRadiusServer_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1) (JumpCloud.SDK.V2.Models.GraphObjectWithPaths1.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListUserGroupTraverseRadiusServer" /> method. Call this like the actual call, but you
        /// will get validation events back.
        /// </summary>
        /// <param name="groupId">ObjectID of the User Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListUserGroupTraverseRadiusServer_Validate(string groupId, int? limit, int? skip, string[] filter, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(groupId),groupId);
            }
        }

        /// <summary>
        /// This endpoint will return all Systems bound to a User Group, either directly or indirectly, essentially traversing the
        /// JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this User Group to the corresponding System; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the System from this User Group.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/usergroups/{GroupID}/systems \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="groupId">ObjectID of the User Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListUserGroupTraverseSystem(string groupId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/usergroups/"
                        + global::System.Uri.EscapeDataString(groupId)
                        + "/systems"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListUserGroupTraverseSystem_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all System Groups bound to a User Group, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this User Group to the corresponding System Group; this array represents all
        /// grouping and/or associations that would have to be removed to deprovision the System Group from this User Group.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/usergroups/{GroupID}/systemgroups \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="groupId">ObjectID of the User Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListUserGroupTraverseSystemGroup(string groupId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/usergroups/"
                        + global::System.Uri.EscapeDataString(groupId)
                        + "/systemgroups"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListUserGroupTraverseSystemGroup_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all System Groups bound to a User Group, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this User Group to the corresponding System Group; this array represents all
        /// grouping and/or associations that would have to be removed to deprovision the System Group from this User Group.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/usergroups/{GroupID}/systemgroups \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListUserGroupTraverseSystemGroupViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/usergroups/(?<group_id>[^/]+)/systemgroups$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/usergroups/{group_id}/systemgroups'");
                }

                // replace URI parameters with values from identity
                var groupId = _match.Groups["group_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/usergroups/"
                        + groupId
                        + "/systemgroups"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListUserGroupTraverseSystemGroup_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListUserGroupTraverseSystemGroup" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListUserGroupTraverseSystemGroup_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1) (JumpCloud.SDK.V2.Models.GraphObjectWithPaths1.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListUserGroupTraverseSystemGroup" /> method. Call this like the actual call, but you
        /// will get validation events back.
        /// </summary>
        /// <param name="groupId">ObjectID of the User Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListUserGroupTraverseSystemGroup_Validate(string groupId, int? limit, int? skip, string[] filter, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(groupId),groupId);
            }
        }

        /// <summary>
        /// This endpoint will return all Systems bound to a User Group, either directly or indirectly, essentially traversing the
        /// JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this User Group to the corresponding System; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the System from this User Group.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/usergroups/{GroupID}/systems \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListUserGroupTraverseSystemViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/usergroups/(?<group_id>[^/]+)/systems$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/usergroups/{group_id}/systems'");
                }

                // replace URI parameters with values from identity
                var groupId = _match.Groups["group_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/usergroups/"
                        + groupId
                        + "/systems"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListUserGroupTraverseSystem_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListUserGroupTraverseSystem" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListUserGroupTraverseSystem_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1) (JumpCloud.SDK.V2.Models.GraphObjectWithPaths1.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListUserGroupTraverseSystem" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="groupId">ObjectID of the User Group.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListUserGroupTraverseSystem_Validate(string groupId, int? limit, int? skip, string[] filter, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(groupId),groupId);
            }
        }

        /// <summary>
        /// This endpoint returns all User Groups.
        /// Available filter fields:
        /// - `name`
        /// - `disabled`
        /// - `type`
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/usergroups \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onDefault">a delegate that is called when the remote service returns default (any response code not handled
        /// elsewhere).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListUserGroupViaIdentity(global::System.String viaIdentity, string[] filter, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IUserGroup[]>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IError>, global::System.Threading.Tasks.Task> onDefault, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/usergroups$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/usergroups'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/usergroups"
                        + "?"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListUserGroup_Call(request,onOk,onDefault,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListUserGroup" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onDefault">a delegate that is called when the remote service returns default (any response code not handled
        /// elsewhere).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListUserGroup_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IUserGroup[]>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IError>, global::System.Threading.Tasks.Task> onDefault, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.IUserGroup[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.IUserGroup) (JumpCloud.SDK.V2.Models.UserGroup.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onDefault(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloud.SDK.V2.Models.Error.FromJson(JumpCloud.SDK.V2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListUserGroup" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListUserGroup_Validate(string[] filter, int? limit, int? skip, string[] sort, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {

            }
        }

        /// <summary>
        /// This endpoint returns all the User Groups a User is a member of.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/users/{UserID}/memberof \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="userId">ObjectID of the User.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListUserMemberOf(string userId, string[] filter, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/users/"
                        + global::System.Uri.EscapeDataString(userId)
                        + "/memberof"
                        + "?"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListUserMemberOf_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns all the User Groups a User is a member of.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/users/{UserID}/memberof \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListUserMemberOfViaIdentity(global::System.String viaIdentity, string[] filter, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/users/(?<user_id>[^/]+)/memberof$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/users/{user_id}/memberof'");
                }

                // replace URI parameters with values from identity
                var userId = _match.Groups["user_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/users/"
                        + userId
                        + "/memberof"
                        + "?"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListUserMemberOf_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListUserMemberOf" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListUserMemberOf_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1) (JumpCloud.SDK.V2.Models.GraphObjectWithPaths1.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListUserMemberOf" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="userId">ObjectID of the User.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListUserMemberOf_Validate(string userId, string[] filter, int? limit, int? skip, string[] sort, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(userId),userId);
            }
        }

        /// <summary>
        /// This endpoint will return all Applications bound to a User, either directly or indirectly, essentially traversing the
        /// JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this User to the corresponding Application; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the Application from this User.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/users/{UserID}/applications \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="userId">ObjectID of the User.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListUserTraverseApplication(string userId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/users/"
                        + global::System.Uri.EscapeDataString(userId)
                        + "/applications"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListUserTraverseApplication_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all Applications bound to a User, either directly or indirectly, essentially traversing the
        /// JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this User to the corresponding Application; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the Application from this User.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/users/{UserID}/applications \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListUserTraverseApplicationViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/users/(?<user_id>[^/]+)/applications$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/users/{user_id}/applications'");
                }

                // replace URI parameters with values from identity
                var userId = _match.Groups["user_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/users/"
                        + userId
                        + "/applications"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListUserTraverseApplication_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListUserTraverseApplication" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListUserTraverseApplication_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1) (JumpCloud.SDK.V2.Models.GraphObjectWithPaths1.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListUserTraverseApplication" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="userId">ObjectID of the User.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListUserTraverseApplication_Validate(string userId, int? limit, int? skip, string[] filter, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(userId),userId);
            }
        }

        /// <summary>
        /// This endpoint will return all Directories bound to a User, either directly or indirectly, essentially traversing the JumpCloud
        /// Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this User to the corresponding Directory; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the Directory from this User.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/users/{UserID}/directories \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="userId">ObjectID of the User.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListUserTraverseDirectory(string userId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/users/"
                        + global::System.Uri.EscapeDataString(userId)
                        + "/directories"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListUserTraverseDirectory_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all Directories bound to a User, either directly or indirectly, essentially traversing the JumpCloud
        /// Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this User to the corresponding Directory; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the Directory from this User.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/users/{UserID}/directories \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListUserTraverseDirectoryViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/users/(?<user_id>[^/]+)/directories$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/users/{user_id}/directories'");
                }

                // replace URI parameters with values from identity
                var userId = _match.Groups["user_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/users/"
                        + userId
                        + "/directories"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListUserTraverseDirectory_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListUserTraverseDirectory" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListUserTraverseDirectory_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1) (JumpCloud.SDK.V2.Models.GraphObjectWithPaths1.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListUserTraverseDirectory" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="userId">ObjectID of the User.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListUserTraverseDirectory_Validate(string userId, int? limit, int? skip, string[] filter, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(userId),userId);
            }
        }

        /// <summary>
        /// This endpoint will return all G-Suite Instances bound to a User, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this User to the corresponding G Suite instance; this array represents all
        /// grouping and/or associations that would have to be removed to deprovision the G Suite instance from this User.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/users/{UserID}/gsuites \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="userId">ObjectID of the User.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListUserTraverseGSuite(string userId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/users/"
                        + global::System.Uri.EscapeDataString(userId)
                        + "/gsuites"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListUserTraverseGSuite_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all G-Suite Instances bound to a User, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this User to the corresponding G Suite instance; this array represents all
        /// grouping and/or associations that would have to be removed to deprovision the G Suite instance from this User.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/users/{UserID}/gsuites \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListUserTraverseGSuiteViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/users/(?<user_id>[^/]+)/gsuites$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/users/{user_id}/gsuites'");
                }

                // replace URI parameters with values from identity
                var userId = _match.Groups["user_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/users/"
                        + userId
                        + "/gsuites"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListUserTraverseGSuite_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListUserTraverseGSuite" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListUserTraverseGSuite_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1) (JumpCloud.SDK.V2.Models.GraphObjectWithPaths1.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListUserTraverseGSuite" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="userId">ObjectID of the User.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListUserTraverseGSuite_Validate(string userId, int? limit, int? skip, string[] filter, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(userId),userId);
            }
        }

        /// <summary>
        /// This endpoint will return all LDAP Servers bound to a User, either directly or indirectly, essentially traversing the
        /// JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this User to the corresponding LDAP Server; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the LDAP Server from this User.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/users/{UserID}/ldapservers \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="userId">ObjectID of the User.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListUserTraverseLdapServer(string userId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/users/"
                        + global::System.Uri.EscapeDataString(userId)
                        + "/ldapservers"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListUserTraverseLdapServer_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all LDAP Servers bound to a User, either directly or indirectly, essentially traversing the
        /// JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this User to the corresponding LDAP Server; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the LDAP Server from this User.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/users/{UserID}/ldapservers \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListUserTraverseLdapServerViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/users/(?<user_id>[^/]+)/ldapservers$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/users/{user_id}/ldapservers'");
                }

                // replace URI parameters with values from identity
                var userId = _match.Groups["user_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/users/"
                        + userId
                        + "/ldapservers"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListUserTraverseLdapServer_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListUserTraverseLdapServer" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListUserTraverseLdapServer_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1) (JumpCloud.SDK.V2.Models.GraphObjectWithPaths1.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListUserTraverseLdapServer" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="userId">ObjectID of the User.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListUserTraverseLdapServer_Validate(string userId, int? limit, int? skip, string[] filter, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(userId),userId);
            }
        }

        /// <summary>
        /// This endpoint will return all Office 365 Instances bound to a User, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this User to the corresponding Office 365 instance; this array represents
        /// all grouping and/or associations that would have to be removed to deprovision the Office 365 instance from this User.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/users/{UserID}/office365s \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="userId">ObjectID of the User.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListUserTraverseOffice365(string userId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/users/"
                        + global::System.Uri.EscapeDataString(userId)
                        + "/office365s"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListUserTraverseOffice365_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all Office 365 Instances bound to a User, either directly or indirectly, essentially traversing
        /// the JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this User to the corresponding Office 365 instance; this array represents
        /// all grouping and/or associations that would have to be removed to deprovision the Office 365 instance from this User.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/users/{UserID}/office365s \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListUserTraverseOffice365ViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/users/(?<user_id>[^/]+)/office365s$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/users/{user_id}/office365s'");
                }

                // replace URI parameters with values from identity
                var userId = _match.Groups["user_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/users/"
                        + userId
                        + "/office365s"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListUserTraverseOffice365_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListUserTraverseOffice365" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListUserTraverseOffice365_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1) (JumpCloud.SDK.V2.Models.GraphObjectWithPaths1.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListUserTraverseOffice365" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="userId">ObjectID of the User.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListUserTraverseOffice365_Validate(string userId, int? limit, int? skip, string[] filter, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(userId),userId);
            }
        }

        /// <summary>
        /// This endpoint will return all RADIUS Servers bound to a User, either directly or indirectly, essentially traversing the
        /// JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this User to the corresponding RADIUS Server; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the RADIUS Server from this User.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/users/{UserID}/radiusservers \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="userId">ObjectID of the User.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListUserTraverseRadiusServer(string userId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/users/"
                        + global::System.Uri.EscapeDataString(userId)
                        + "/radiusservers"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListUserTraverseRadiusServer_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all RADIUS Servers bound to a User, either directly or indirectly, essentially traversing the
        /// JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this User to the corresponding RADIUS Server; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the RADIUS Server from this User.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/users/{UserID}/radiusservers \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListUserTraverseRadiusServerViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/users/(?<user_id>[^/]+)/radiusservers$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/users/{user_id}/radiusservers'");
                }

                // replace URI parameters with values from identity
                var userId = _match.Groups["user_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/users/"
                        + userId
                        + "/radiusservers"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListUserTraverseRadiusServer_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListUserTraverseRadiusServer" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListUserTraverseRadiusServer_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1) (JumpCloud.SDK.V2.Models.GraphObjectWithPaths1.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListUserTraverseRadiusServer" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="userId">ObjectID of the User.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListUserTraverseRadiusServer_Validate(string userId, int? limit, int? skip, string[] filter, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(userId),userId);
            }
        }

        /// <summary>
        /// This endpoint will return all Systems bound to a User, either directly or indirectly, essentially traversing the JumpCloud
        /// Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this User to the corresponding System; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the System from this User.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/users/{UserID}/systems\
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="userId">ObjectID of the User.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListUserTraverseSystem(string userId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/users/"
                        + global::System.Uri.EscapeDataString(userId)
                        + "/systems"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListUserTraverseSystem_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all System Groups bound to a User, either directly or indirectly, essentially traversing the
        /// JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this User to the corresponding System Group; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the System Group from this User.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/users/{UserID}/systemgroups\
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="userId">ObjectID of the User.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListUserTraverseSystemGroup(string userId, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/users/"
                        + global::System.Uri.EscapeDataString(userId)
                        + "/systemgroups"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListUserTraverseSystemGroup_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all System Groups bound to a User, either directly or indirectly, essentially traversing the
        /// JumpCloud Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this User to the corresponding System Group; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the System Group from this User.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/users/{UserID}/systemgroups\
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListUserTraverseSystemGroupViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/users/(?<user_id>[^/]+)/systemgroups$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/users/{user_id}/systemgroups'");
                }

                // replace URI parameters with values from identity
                var userId = _match.Groups["user_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/users/"
                        + userId
                        + "/systemgroups"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListUserTraverseSystemGroup_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListUserTraverseSystemGroup" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListUserTraverseSystemGroup_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1) (JumpCloud.SDK.V2.Models.GraphObjectWithPaths1.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListUserTraverseSystemGroup" /> method. Call this like the actual call, but you will
        /// get validation events back.
        /// </summary>
        /// <param name="userId">ObjectID of the User.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListUserTraverseSystemGroup_Validate(string userId, int? limit, int? skip, string[] filter, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(userId),userId);
            }
        }

        /// <summary>
        /// This endpoint will return all Systems bound to a User, either directly or indirectly, essentially traversing the JumpCloud
        /// Graph for your Organization.
        /// Each element will contain the type, id, attributes and paths.
        /// The `attributes` object is a key/value hash of compiled graph attributes for all paths followed.
        /// The `paths` array enumerates each path from this User to the corresponding System; this array represents all grouping
        /// and/or associations that would have to be removed to deprovision the System from this User.
        /// See `/members` and `/associations` endpoints to manage those collections.
        /// #### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/users/{UserID}/systems\
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListUserTraverseSystemViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/users/(?<user_id>[^/]+)/systems$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/users/{user_id}/systems'");
                }

                // replace URI parameters with values from identity
                var userId = _match.Groups["user_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/users/"
                        + userId
                        + "/systems"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListUserTraverseSystem_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListUserTraverseSystem" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListUserTraverseSystem_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.IGraphObjectWithPaths1) (JumpCloud.SDK.V2.Models.GraphObjectWithPaths1.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListUserTraverseSystem" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="userId">ObjectID of the User.</param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListUserTraverseSystem_Validate(string userId, int? limit, int? skip, string[] filter, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(userId),userId);
            }
        }

        /// <summary>
        /// This endpoint will return all the available information about all your instances of Workday.
        /// ##### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/workdays/ \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListWorkday(int? limit, int? skip, string[] sort, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IWorkdayOutput[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/workdays"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListWorkday_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all the available information about all your instances of Workday.
        /// ##### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/workdays/ \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListWorkdayViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] sort, string[] filter, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IWorkdayOutput[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/workdays$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/workdays'");
                }

                // replace URI parameters with values from identity
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/workdays"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        + "&"
                        + (null != filter  && filter.Length > 0 ? "filter=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(filter, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListWorkday_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all of the data in your WorkDay Custom Report that has been associated with your WorkDay Instance
        /// in JumpCloud.
        /// ##### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/workdays/{WorkDayID}/workers \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="workdayId"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListWorkdayWorker(string workdayId, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IWorkdayWorker[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/workdays/"
                        + global::System.Uri.EscapeDataString(workdayId)
                        + "/workers"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListWorkdayWorker_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will return all of the data in your WorkDay Custom Report that has been associated with your WorkDay Instance
        /// in JumpCloud.
        /// ##### Sample Request
        /// ```
        /// curl -X GET https://console.jumpcloud.com/api/v2/workdays/{WorkDayID}/workers \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task ListWorkdayWorkerViaIdentity(global::System.String viaIdentity, int? limit, int? skip, string[] sort, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IWorkdayWorker[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/workdays/(?<workday_id>[^/]+)/workers$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/workdays/{workday_id}/workers'");
                }

                // replace URI parameters with values from identity
                var workdayId = _match.Groups["workday_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/workdays/"
                        + workdayId
                        + "/workers"
                        + "?"
                        + (null == limit ? global::System.String.Empty : "limit=" + global::System.Uri.EscapeDataString(limit.ToString()))
                        + "&"
                        + (null == skip ? global::System.String.Empty : "skip=" + global::System.Uri.EscapeDataString(skip.ToString()))
                        + "&"
                        + (null != sort  && sort.Length > 0 ? "sort=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(sort, (current, each) => current + "," + ( global::System.Uri.EscapeDataString(each?.ToString()??global::System.String.Empty) ))) : global::System.String.Empty)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Get, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.ListWorkdayWorker_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="ListWorkdayWorker" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListWorkdayWorker_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IWorkdayWorker[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.IWorkdayWorker[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.IWorkdayWorker) (JumpCloud.SDK.V2.Models.WorkdayWorker.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListWorkdayWorker" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="workdayId"></param>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListWorkdayWorker_Validate(string workdayId, int? limit, int? skip, string[] sort, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(workdayId),workdayId);
            }
        }

        /// <summary>Actual wire call for <see cref="ListWorkday" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListWorkday_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IWorkdayOutput[]>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => If( JumpCloud.SDK.V2.Runtime.Json.JsonArray.Parse(body.Result) as JumpCloud.SDK.V2.Runtime.Json.JsonArray, out var __y) ? new global::System.Func<JumpCloud.SDK.V2.Models.IWorkdayOutput[]>(()=> global::System.Linq.Enumerable.ToArray(global::System.Linq.Enumerable.Select(__y, (__x)=>(JumpCloud.SDK.V2.Models.IWorkdayOutput) (JumpCloud.SDK.V2.Models.WorkdayOutput.FromJson(__x) )) ))() : null));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="ListWorkday" /> method. Call this like the actual call, but you will get validation events
        /// back.
        /// </summary>
        /// <param name="limit">The number of records to return at once. Limited to 100.</param>
        /// <param name="skip">The offset into the records to return.</param>
        /// <param name="sort">The comma separated fields used to sort the collection.
        /// Default sort is ascending, prefix with `-` to sort descending.
        /// </param>
        /// <param name="filter">Supported operators are: eq, ne, gt, ge, lt, le, between, search, in</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task ListWorkday_Validate(int? limit, int? skip, string[] sort, string[] filter, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {

            }
        }

        /// <summary>
        /// The endpoint allows you to create a bulk job to asynchronously update users. See [Update a System User](https://docs.jumpcloud.com/1.0/systemusers/update-a-system-user)
        /// for full list of attributes.
        /// #### Sample Request
        /// ```
        /// curl -X PATCH https://console.jumpcloud.com/api/v2/bulk/users \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '[
        /// {
        /// "id":"5be9fb4ddb01290001e85109",
        /// "firstname":"{UPDATED_FIRSTNAME}",
        /// "department":"{UPDATED_DEPARTMENT}",
        /// "attributes":[
        /// {"name":"Custom","value":"{ATTRIBUTE_VALUE}"}
        /// ]
        /// },
        /// {
        /// "id":"5be9fb4ddb01290001e85109",
        /// "firstname":"{UPDATED_FIRSTNAME}",
        /// "costCenter":"{UPDATED_COST_CENTER}",
        /// "phoneNumbers":[
        /// {"type":"home","number":"{HOME_PHONE_NUMBER}"},
        /// {"type":"work","number":"{WORK_PHONE_NUMBER}"}
        /// ]
        /// }
        /// ]
        /// ```
        /// </summary>
        /// <param name="body"></param>
        /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task PatchBulkUsers(JumpCloud.SDK.V2.Models.IBulkUserUpdate[] body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IJobId>, global::System.Threading.Tasks.Task> onCreated, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/bulk/users"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Patch, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? new JumpCloud.SDK.V2.Runtime.Json.XNodeArray(global::System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Select(body, (__x) => __x?.ToJson(null, JumpCloud.SDK.V2.Runtime.SerializationMode.None)))) : null, global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.PatchBulkUsers_Call(request,onCreated,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="PatchBulkUsers" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onCreated">a delegate that is called when the remote service returns 201 (Created).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task PatchBulkUsers_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IJobId>, global::System.Threading.Tasks.Task> onCreated, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.Created:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onCreated(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloud.SDK.V2.Models.JobId.FromJson(JumpCloud.SDK.V2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="PatchBulkUsers" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="body"></param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task PatchBulkUsers_Validate(JumpCloud.SDK.V2.Models.IBulkUserUpdate[] body, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                if (body != null ) {
                        for (int __i = 0; __i < body.Length; __i++) {
                          await eventListener.AssertObjectIsValid($"body[{__i}]", body[__i]);
                        }
                      }
            }
        }

        /// <summary>
        /// This endpoint allows updating some attributes of a G Suite.
        /// ##### Sample Request
        /// ```
        /// curl -X PATCH https://console.jumpcloud.com/api/v2/gsuites/{GSUITE_ID} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "userLockoutAction": "suspend",
        /// "userPasswordExpirationAction": "maintain"
        /// }'
        /// ```
        /// </summary>
        /// <param name="id">Unique identifier of the GSuite.</param>
        /// <param name="body">GSuite Patch Input</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task PatchGSuite(string id, JumpCloud.SDK.V2.Models.IGsuitePatchInput body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGsuiteOutput>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/gsuites/"
                        + global::System.Uri.EscapeDataString(id)

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Patch, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.PatchGSuite_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint allows updating some attributes of a G Suite.
        /// ##### Sample Request
        /// ```
        /// curl -X PATCH https://console.jumpcloud.com/api/v2/gsuites/{GSUITE_ID} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "userLockoutAction": "suspend",
        /// "userPasswordExpirationAction": "maintain"
        /// }'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="body">GSuite Patch Input</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task PatchGSuiteViaIdentity(global::System.String viaIdentity, JumpCloud.SDK.V2.Models.IGsuitePatchInput body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGsuiteOutput>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/gsuites/(?<id>[^/]+)$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/gsuites/{id}'");
                }

                // replace URI parameters with values from identity
                var id = _match.Groups["id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/gsuites/"
                        + id

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Patch, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.PatchGSuite_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="PatchGSuite" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task PatchGSuite_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IGsuiteOutput>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloud.SDK.V2.Models.GsuiteOutput.FromJson(JumpCloud.SDK.V2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="PatchGSuite" /> method. Call this like the actual call, but you will get validation events
        /// back.
        /// </summary>
        /// <param name="id">Unique identifier of the GSuite.</param>
        /// <param name="body">GSuite Patch Input</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task PatchGSuite_Validate(string id, JumpCloud.SDK.V2.Models.IGsuitePatchInput body, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(id),id);
                await eventListener.AssertNotNull(nameof(body), body);
                await eventListener.AssertObjectIsValid(nameof(body), body);
            }
        }

        /// <summary>
        /// This endpoint allows updating some attributes of an LDAP server.
        /// Sample Request
        /// ```
        /// curl -X PATCH https://console.jumpcloud.com/api/v2/ldapservers/{LDAP_ID} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "userLockoutAction": "remove",
        /// "userPasswordExpirationAction": "disable"
        /// }'
        /// ```
        /// </summary>
        /// <param name="id">Unique identifier of the LDAP server.</param>
        /// <param name="xApiKey"></param>
        /// <param name="xOrgId"></param>
        /// <param name="body"></param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onBadRequest">a delegate that is called when the remote service returns 400 (BadRequest).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task PatchLdapServer(string id, string xApiKey, string xOrgId, JumpCloud.SDK.V2.Models.IPaths1Ka5IlhLdapserversIdPatchRequestbodyContentApplicationJsonSchema body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IPaths1Dvt4UsLdapserversIdPatchResponses200ContentApplicationJsonSchema>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IPaths1Lb0C0ZLdapserversIdPatchResponses400ContentApplicationJsonSchema>, global::System.Threading.Tasks.Task> onBadRequest, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/ldapservers/"
                        + global::System.Uri.EscapeDataString(id)

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Patch, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // add headers parameters
                if (null != xApiKey)
                {
                    request.Headers.Add("x-api-key",xApiKey);
                }
                if (null != xOrgId)
                {
                    request.Headers.Add("x-org-id",xOrgId);
                }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.PatchLdapServer_Call(request,onOk,onBadRequest,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint allows updating some attributes of an LDAP server.
        /// Sample Request
        /// ```
        /// curl -X PATCH https://console.jumpcloud.com/api/v2/ldapservers/{LDAP_ID} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "userLockoutAction": "remove",
        /// "userPasswordExpirationAction": "disable"
        /// }'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="xApiKey"></param>
        /// <param name="xOrgId"></param>
        /// <param name="body"></param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onBadRequest">a delegate that is called when the remote service returns 400 (BadRequest).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task PatchLdapServerViaIdentity(global::System.String viaIdentity, string xApiKey, string xOrgId, JumpCloud.SDK.V2.Models.IPaths1Ka5IlhLdapserversIdPatchRequestbodyContentApplicationJsonSchema body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IPaths1Dvt4UsLdapserversIdPatchResponses200ContentApplicationJsonSchema>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IPaths1Lb0C0ZLdapserversIdPatchResponses400ContentApplicationJsonSchema>, global::System.Threading.Tasks.Task> onBadRequest, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/ldapservers/(?<id>[^/]+)$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/ldapservers/{id}'");
                }

                // replace URI parameters with values from identity
                var id = _match.Groups["id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/ldapservers/"
                        + id

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Patch, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // add headers parameters
                if (null != xApiKey)
                {
                    request.Headers.Add("x-api-key",xApiKey);
                }
                if (null != xOrgId)
                {
                    request.Headers.Add("x-org-id",xOrgId);
                }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.PatchLdapServer_Call(request,onOk,onBadRequest,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="PatchLdapServer" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onBadRequest">a delegate that is called when the remote service returns 400 (BadRequest).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task PatchLdapServer_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IPaths1Dvt4UsLdapserversIdPatchResponses200ContentApplicationJsonSchema>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IPaths1Lb0C0ZLdapserversIdPatchResponses400ContentApplicationJsonSchema>, global::System.Threading.Tasks.Task> onBadRequest, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloud.SDK.V2.Models.Paths1Dvt4UsLdapserversIdPatchResponses200ContentApplicationJsonSchema.FromJson(JumpCloud.SDK.V2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.BadRequest:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onBadRequest(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloud.SDK.V2.Models.Paths1Lb0C0ZLdapserversIdPatchResponses400ContentApplicationJsonSchema.FromJson(JumpCloud.SDK.V2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="PatchLdapServer" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="id">Unique identifier of the LDAP server.</param>
        /// <param name="xApiKey"></param>
        /// <param name="xOrgId"></param>
        /// <param name="body"></param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task PatchLdapServer_Validate(string id, string xApiKey, string xOrgId, JumpCloud.SDK.V2.Models.IPaths1Ka5IlhLdapserversIdPatchRequestbodyContentApplicationJsonSchema body, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(id),id);
                await eventListener.AssertNotNull(nameof(xApiKey),xApiKey);
                await eventListener.AssertNotNull(nameof(xOrgId),xOrgId);
                await eventListener.AssertNotNull(nameof(body), body);
                await eventListener.AssertObjectIsValid(nameof(body), body);
            }
        }

        /// <summary>
        /// This endpoint allows updating some attributes of an Office 365 instance.
        /// #####
        /// Sample Request
        /// ```
        /// curl -X PATCH https://console.jumpcloud.com/api/v2/office365s/{O365_ID} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "userLockoutAction": "maintain",
        /// "userPasswordExpirationAction": "suspend"
        /// }'
        /// ```
        /// </summary>
        /// <param name="office365Id">ObjectID of the Office 365 instance.</param>
        /// <param name="body">Office 365 Patch Input</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task PatchOffice365(string office365Id, JumpCloud.SDK.V2.Models.IOffice365PatchInput body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IOffice365Output>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/office365s/"
                        + global::System.Uri.EscapeDataString(office365Id)

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Patch, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.PatchOffice365_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint allows updating some attributes of an Office 365 instance.
        /// #####
        /// Sample Request
        /// ```
        /// curl -X PATCH https://console.jumpcloud.com/api/v2/office365s/{O365_ID} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "userLockoutAction": "maintain",
        /// "userPasswordExpirationAction": "suspend"
        /// }'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="body">Office 365 Patch Input</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task PatchOffice365ViaIdentity(global::System.String viaIdentity, JumpCloud.SDK.V2.Models.IOffice365PatchInput body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IOffice365Output>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/office365s/(?<office365_id>[^/]+)$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/office365s/{office365_id}'");
                }

                // replace URI parameters with values from identity
                var office365Id = _match.Groups["office365_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/office365s/"
                        + office365Id

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Patch, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.PatchOffice365_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="PatchOffice365" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task PatchOffice365_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IOffice365Output>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloud.SDK.V2.Models.Office365Output.FromJson(JumpCloud.SDK.V2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="PatchOffice365" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="office365Id">ObjectID of the Office 365 instance.</param>
        /// <param name="body">Office 365 Patch Input</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task PatchOffice365_Validate(string office365Id, JumpCloud.SDK.V2.Models.IOffice365PatchInput body, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(office365Id),office365Id);
                await eventListener.AssertNotNull(nameof(body), body);
                await eventListener.AssertObjectIsValid(nameof(body), body);
            }
        }

        /// <summary>
        /// Updates the specified Duo application.
        /// #### Sample Request
        /// ```
        /// curl -X PUT https://console.jumpcloud.com/api/v2/duo/accounts/{ACCOUNT_ID}/applications/{APPLICATION_ID} \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "name": "Application Name",
        /// "apiHost": "api-1234.duosecurity.com",
        /// "integrationKey": "1234",
        /// "secretKey": "5678"
        /// }'
        /// ```
        /// </summary>
        /// <param name="accountId"></param>
        /// <param name="applicationId"></param>
        /// <param name="body">DuoApplicationUpdateReq</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onBadRequest">a delegate that is called when the remote service returns 400 (BadRequest).</param>
        /// <param name="onUnauthorized">a delegate that is called when the remote service returns 401 (Unauthorized).</param>
        /// <param name="onForbidden">a delegate that is called when the remote service returns 403 (Forbidden).</param>
        /// <param name="onNotFound">a delegate that is called when the remote service returns 404 (NotFound).</param>
        /// <param name="onConflict">a delegate that is called when the remote service returns 409 (Conflict).</param>
        /// <param name="onInternalServerError">a delegate that is called when the remote service returns 500 (InternalServerError).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task PutDuoApplication(string accountId, string applicationId, JumpCloud.SDK.V2.Models.IDuoApplicationUpdateReq body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IDuoApplication>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onBadRequest, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onUnauthorized, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onForbidden, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onNotFound, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onConflict, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onInternalServerError, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/duo/accounts/"
                        + global::System.Uri.EscapeDataString(accountId)
                        + "/applications/"
                        + global::System.Uri.EscapeDataString(applicationId)

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Put, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.PutDuoApplication_Call(request,onOk,onBadRequest,onUnauthorized,onForbidden,onNotFound,onConflict,onInternalServerError,eventListener,sender);
            }
        }

        /// <summary>
        /// Updates the specified Duo application.
        /// #### Sample Request
        /// ```
        /// curl -X PUT https://console.jumpcloud.com/api/v2/duo/accounts/{ACCOUNT_ID}/applications/{APPLICATION_ID} \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "name": "Application Name",
        /// "apiHost": "api-1234.duosecurity.com",
        /// "integrationKey": "1234",
        /// "secretKey": "5678"
        /// }'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="body">DuoApplicationUpdateReq</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onBadRequest">a delegate that is called when the remote service returns 400 (BadRequest).</param>
        /// <param name="onUnauthorized">a delegate that is called when the remote service returns 401 (Unauthorized).</param>
        /// <param name="onForbidden">a delegate that is called when the remote service returns 403 (Forbidden).</param>
        /// <param name="onNotFound">a delegate that is called when the remote service returns 404 (NotFound).</param>
        /// <param name="onConflict">a delegate that is called when the remote service returns 409 (Conflict).</param>
        /// <param name="onInternalServerError">a delegate that is called when the remote service returns 500 (InternalServerError).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task PutDuoApplicationViaIdentity(global::System.String viaIdentity, JumpCloud.SDK.V2.Models.IDuoApplicationUpdateReq body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IDuoApplication>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onBadRequest, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onUnauthorized, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onForbidden, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onNotFound, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onConflict, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onInternalServerError, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/duo/accounts/(?<account_id>[^/]+)/applications/(?<application_id>[^/]+)$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/duo/accounts/{account_id}/applications/{application_id}'");
                }

                // replace URI parameters with values from identity
                var accountId = _match.Groups["account_id"].Value;
                var applicationId = _match.Groups["application_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/duo/accounts/"
                        + accountId
                        + "/applications/"
                        + applicationId

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Put, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.PutDuoApplication_Call(request,onOk,onBadRequest,onUnauthorized,onForbidden,onNotFound,onConflict,onInternalServerError,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="PutDuoApplication" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onBadRequest">a delegate that is called when the remote service returns 400 (BadRequest).</param>
        /// <param name="onUnauthorized">a delegate that is called when the remote service returns 401 (Unauthorized).</param>
        /// <param name="onForbidden">a delegate that is called when the remote service returns 403 (Forbidden).</param>
        /// <param name="onNotFound">a delegate that is called when the remote service returns 404 (NotFound).</param>
        /// <param name="onConflict">a delegate that is called when the remote service returns 409 (Conflict).</param>
        /// <param name="onInternalServerError">a delegate that is called when the remote service returns 500 (InternalServerError).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task PutDuoApplication_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IDuoApplication>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onBadRequest, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onUnauthorized, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onForbidden, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onNotFound, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onConflict, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IErrorresponse>, global::System.Threading.Tasks.Task> onInternalServerError, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloud.SDK.V2.Models.DuoApplication.FromJson(JumpCloud.SDK.V2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.BadRequest:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onBadRequest(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloud.SDK.V2.Models.Errorresponse.FromJson(JumpCloud.SDK.V2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.Unauthorized:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onUnauthorized(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloud.SDK.V2.Models.Errorresponse.FromJson(JumpCloud.SDK.V2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.Forbidden:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onForbidden(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloud.SDK.V2.Models.Errorresponse.FromJson(JumpCloud.SDK.V2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.NotFound:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onNotFound(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloud.SDK.V2.Models.Errorresponse.FromJson(JumpCloud.SDK.V2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.Conflict:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onConflict(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloud.SDK.V2.Models.Errorresponse.FromJson(JumpCloud.SDK.V2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        case global::System.Net.HttpStatusCode.InternalServerError:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onInternalServerError(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloud.SDK.V2.Models.Errorresponse.FromJson(JumpCloud.SDK.V2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="PutDuoApplication" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="accountId"></param>
        /// <param name="applicationId"></param>
        /// <param name="body">DuoApplicationUpdateReq</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task PutDuoApplication_Validate(string accountId, string applicationId, JumpCloud.SDK.V2.Models.IDuoApplicationUpdateReq body, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(accountId),accountId);
                await eventListener.AssertNotNull(nameof(applicationId),applicationId);
                await eventListener.AssertNotNull(nameof(body), body);
                await eventListener.AssertObjectIsValid(nameof(body), body);
            }
        }

        /// <summary>
        /// This endpoint allows you to update the samba domain information for an LDAP server.
        /// ##### Sample Request
        /// ```
        /// curl -X PUT https://console.jumpcloud.com/api/v2/ldapservers/{LDAP_ID}/sambadomains/{SAMBA_ID} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "sid":"{SID_ID}",
        /// "name":"{WORKGROUP_NAME}"
        /// }'
        /// ```
        /// </summary>
        /// <param name="ldapserverId">Unique identifier of the LDAP server.</param>
        /// <param name="id">Unique identifier of the samba domain.</param>
        /// <param name="contentType"></param>
        /// <param name="accept"></param>
        /// <param name="body">Samba Domain Input</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task PutLdapServerSambaDomain(string ldapserverId, string id, string contentType, string accept, JumpCloud.SDK.V2.Models.ISambaDomainInput body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISambaDomainOutput>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/ldapservers/"
                        + global::System.Uri.EscapeDataString(ldapserverId)
                        + "/sambadomains/"
                        + global::System.Uri.EscapeDataString(id)

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Put, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // add headers parameters
                if (null != contentType)
                {
                    request.Headers.Add("Content-Type",contentType);
                }
                if (null != accept)
                {
                    request.Headers.Add("Accept",accept);
                }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.PutLdapServerSambaDomain_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint allows you to update the samba domain information for an LDAP server.
        /// ##### Sample Request
        /// ```
        /// curl -X PUT https://console.jumpcloud.com/api/v2/ldapservers/{LDAP_ID}/sambadomains/{SAMBA_ID} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "sid":"{SID_ID}",
        /// "name":"{WORKGROUP_NAME}"
        /// }'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="contentType"></param>
        /// <param name="accept"></param>
        /// <param name="body">Samba Domain Input</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task PutLdapServerSambaDomainViaIdentity(global::System.String viaIdentity, string contentType, string accept, JumpCloud.SDK.V2.Models.ISambaDomainInput body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISambaDomainOutput>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/ldapservers/(?<ldapserver_id>[^/]+)/sambadomains/(?<id>[^/]+)$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/ldapservers/{ldapserver_id}/sambadomains/{id}'");
                }

                // replace URI parameters with values from identity
                var ldapserverId = _match.Groups["ldapserver_id"].Value;
                var id = _match.Groups["id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/ldapservers/"
                        + ldapserverId
                        + "/sambadomains/"
                        + id

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Put, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // add headers parameters
                if (null != contentType)
                {
                    request.Headers.Add("Content-Type",contentType);
                }
                if (null != accept)
                {
                    request.Headers.Add("Accept",accept);
                }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.PutLdapServerSambaDomain_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="PutLdapServerSambaDomain" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task PutLdapServerSambaDomain_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISambaDomainOutput>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloud.SDK.V2.Models.SambaDomainOutput.FromJson(JumpCloud.SDK.V2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="PutLdapServerSambaDomain" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="ldapserverId">Unique identifier of the LDAP server.</param>
        /// <param name="id">Unique identifier of the samba domain.</param>
        /// <param name="contentType"></param>
        /// <param name="accept"></param>
        /// <param name="body">Samba Domain Input</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task PutLdapServerSambaDomain_Validate(string ldapserverId, string id, string contentType, string accept, JumpCloud.SDK.V2.Models.ISambaDomainInput body, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(ldapserverId),ldapserverId);
                await eventListener.AssertNotNull(nameof(id),id);
                await eventListener.AssertNotNull(nameof(contentType),contentType);
                await eventListener.AssertNotNull(nameof(accept),accept);
                await eventListener.AssertNotNull(nameof(body), body);
                await eventListener.AssertObjectIsValid(nameof(body), body);
            }
        }

        /// <summary>
        /// This endpoint allows you to update a policy. Given the amount of configurable parameters required to update a Policy,
        /// we suggest you use the JumpCloud Admin Console to create new policies.
        /// ##### Sample Request
        /// ```
        /// curl -X PUT https://console.jumpcloud.com/api/v2/policies/59fced45c9118022172547ff \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY' \
        /// -d '{
        /// {Policy_Parameters}
        /// }'
        /// ```
        /// </summary>
        /// <param name="id">ObjectID of the Policy object.</param>
        /// <param name="body">An instance of a policy template.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task PutPolicy(string id, JumpCloud.SDK.V2.Models.IPolicyRequest body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IPolicy>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/policies/"
                        + global::System.Uri.EscapeDataString(id)

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Put, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.PutPolicy_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint allows you to update a policy. Given the amount of configurable parameters required to update a Policy,
        /// we suggest you use the JumpCloud Admin Console to create new policies.
        /// ##### Sample Request
        /// ```
        /// curl -X PUT https://console.jumpcloud.com/api/v2/policies/59fced45c9118022172547ff \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY' \
        /// -d '{
        /// {Policy_Parameters}
        /// }'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="body">An instance of a policy template.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task PutPolicyViaIdentity(global::System.String viaIdentity, JumpCloud.SDK.V2.Models.IPolicyRequest body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IPolicy>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/policies/(?<id>[^/]+)$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/policies/{id}'");
                }

                // replace URI parameters with values from identity
                var id = _match.Groups["id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/policies/"
                        + id

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Put, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.PutPolicy_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="PutPolicy" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task PutPolicy_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IPolicy>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloud.SDK.V2.Models.Policy.FromJson(JumpCloud.SDK.V2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="PutPolicy" /> method. Call this like the actual call, but you will get validation events
        /// back.
        /// </summary>
        /// <param name="id">ObjectID of the Policy object.</param>
        /// <param name="body">An instance of a policy template.</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task PutPolicy_Validate(string id, JumpCloud.SDK.V2.Models.IPolicyRequest body, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(id),id);
                await eventListener.AssertNotNull(nameof(body), body);
                await eventListener.AssertObjectIsValid(nameof(body), body);
            }
        }

        /// <summary>
        /// This endpoint allows you to do a full update of the System Group.
        /// #### Sample Request
        /// ```
        /// curl -X PUT https://console.jumpcloud.com/api/v2/systemgroups/{Group_ID} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "name": "Name_Update"
        /// }'
        /// ```
        /// </summary>
        /// <param name="id">ObjectID of the System Group.</param>
        /// <param name="body">SystemGroupData</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task PutSystemGroup(string id, JumpCloud.SDK.V2.Models.ISystemGroupData body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemGroup>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systemgroups/"
                        + global::System.Uri.EscapeDataString(id)

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Put, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.PutSystemGroup_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint allows you to do a full update of the System Group.
        /// #### Sample Request
        /// ```
        /// curl -X PUT https://console.jumpcloud.com/api/v2/systemgroups/{Group_ID} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "name": "Name_Update"
        /// }'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="body">SystemGroupData</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task PutSystemGroupViaIdentity(global::System.String viaIdentity, JumpCloud.SDK.V2.Models.ISystemGroupData body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemGroup>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systemgroups/(?<id>[^/]+)$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systemgroups/{id}'");
                }

                // replace URI parameters with values from identity
                var id = _match.Groups["id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systemgroups/"
                        + id

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Put, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.PutSystemGroup_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="PutSystemGroup" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task PutSystemGroup_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.ISystemGroup>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloud.SDK.V2.Models.SystemGroup.FromJson(JumpCloud.SDK.V2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="PutSystemGroup" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="id">ObjectID of the System Group.</param>
        /// <param name="body">SystemGroupData</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task PutSystemGroup_Validate(string id, JumpCloud.SDK.V2.Models.ISystemGroupData body, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(id),id);
                await eventListener.AssertNotNull(nameof(body), body);
                await eventListener.AssertObjectIsValid(nameof(body), body);
            }
        }

        /// <summary>
        /// This endpoint allows you to do a full update of the User Group.
        /// #### Sample Request
        /// ```
        /// curl -X PUT https://console.jumpcloud.com/api/v2/usergroups/{Group_ID} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY' \
        /// -d '{
        /// "name": "group_update"
        /// }'
        /// ```
        /// </summary>
        /// <param name="id">ObjectID of the User Group.</param>
        /// <param name="body">UserGroupPut</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task PutUserGroup(string id, JumpCloud.SDK.V2.Models.IUserGroupPut body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IUserGroup>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/usergroups/"
                        + global::System.Uri.EscapeDataString(id)

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Put, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.PutUserGroup_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint allows you to do a full update of the User Group.
        /// #### Sample Request
        /// ```
        /// curl -X PUT https://console.jumpcloud.com/api/v2/usergroups/{Group_ID} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY' \
        /// -d '{
        /// "name": "group_update"
        /// }'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="body">UserGroupPut</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task PutUserGroupViaIdentity(global::System.String viaIdentity, JumpCloud.SDK.V2.Models.IUserGroupPut body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IUserGroup>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/usergroups/(?<id>[^/]+)$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/usergroups/{id}'");
                }

                // replace URI parameters with values from identity
                var id = _match.Groups["id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/usergroups/"
                        + id

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Put, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.PutUserGroup_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="PutUserGroup" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task PutUserGroup_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IUserGroup>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloud.SDK.V2.Models.UserGroup.FromJson(JumpCloud.SDK.V2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="PutUserGroup" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="id">ObjectID of the User Group.</param>
        /// <param name="body">UserGroupPut</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task PutUserGroup_Validate(string id, JumpCloud.SDK.V2.Models.IUserGroupPut body, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(id),id);
                await eventListener.AssertNotNull(nameof(body), body);
                await eventListener.AssertObjectIsValid(nameof(body), body);
            }
        }

        /// <summary>
        /// This endpoint allows you to update the name and Custom Report URL for a Workday Instance.
        /// Currently, the name can not be changed from the default of `Workday Import`.
        /// ##### Sample Request
        /// ```
        /// curl -X PUT https://console.jumpcloud.com/api/v2/workdays/{WorkdayID} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "reportUrl":"{Report_URL}",
        /// "name":"{Name}"
        /// } '
        /// ```
        /// </summary>
        /// <param name="id"></param>
        /// <param name="body">Workday Fields</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task PutWorkday(string id, JumpCloud.SDK.V2.Models.IWorkdayFields body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IWorkdayOutput>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/workdays/"
                        + global::System.Uri.EscapeDataString(id)

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Put, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.PutWorkday_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint allows you to update the name and Custom Report URL for a Workday Instance.
        /// Currently, the name can not be changed from the default of `Workday Import`.
        /// ##### Sample Request
        /// ```
        /// curl -X PUT https://console.jumpcloud.com/api/v2/workdays/{WorkdayID} \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "reportUrl":"{Report_URL}",
        /// "name":"{Name}"
        /// } '
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="body">Workday Fields</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task PutWorkdayViaIdentity(global::System.String viaIdentity, JumpCloud.SDK.V2.Models.IWorkdayFields body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IWorkdayOutput>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/workdays/(?<id>[^/]+)$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/workdays/{id}'");
                }

                // replace URI parameters with values from identity
                var id = _match.Groups["id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/workdays/"
                        + id

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Put, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.PutWorkday_Call(request,onOk,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="PutWorkday" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task PutWorkday_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<JumpCloud.SDK.V2.Models.IWorkdayOutput>, global::System.Threading.Tasks.Task> onOk, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => JumpCloud.SDK.V2.Models.WorkdayOutput.FromJson(JumpCloud.SDK.V2.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="PutWorkday" /> method. Call this like the actual call, but you will get validation events
        /// back.
        /// </summary>
        /// <param name="id"></param>
        /// <param name="body">Workday Fields</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task PutWorkday_Validate(string id, JumpCloud.SDK.V2.Models.IWorkdayFields body, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(id),id);
                await eventListener.AssertNotNull(nameof(body), body);
                await eventListener.AssertObjectIsValid(nameof(body), body);
            }
        }

        /// <summary>
        /// Removes any and all authorization methods from the workday instance
        /// ##### Sample Request
        /// ```
        /// curl -X DELETE https://console.jumpcloud.com/api/v2/workdays/{WorkDayID}/auth \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="workdayId"></param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task RemoveWorkdayAuthorization(string workdayId, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/workdays/"
                        + global::System.Uri.EscapeDataString(workdayId)
                        + "/auth"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Delete, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.RemoveWorkdayAuthorization_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>
        /// Removes any and all authorization methods from the workday instance
        /// ##### Sample Request
        /// ```
        /// curl -X DELETE https://console.jumpcloud.com/api/v2/workdays/{WorkDayID}/auth \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task RemoveWorkdayAuthorizationViaIdentity(global::System.String viaIdentity, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/workdays/(?<workday_id>[^/]+)/auth$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/workdays/{workday_id}/auth'");
                }

                // replace URI parameters with values from identity
                var workdayId = _match.Groups["workday_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/workdays/"
                        + workdayId
                        + "/auth"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Delete, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.RemoveWorkdayAuthorization_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="RemoveWorkdayAuthorization" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task RemoveWorkdayAuthorization_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.NoContent:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onNoContent(_response);
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="RemoveWorkdayAuthorization" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="workdayId"></param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task RemoveWorkdayAuthorization_Validate(string workdayId, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(workdayId),workdayId);
            }
        }

        /// <summary>
        /// This endpoint allows you to manage the _direct_ associations of an Application. A direct association can be a non-homogeneous
        /// relationship between 2 different objects, for example Application and User Groups.
        /// #### Sample Request
        /// ```
        /// curl -X POST 'https://console.jumpcloud.com/api/v2/applications/{Application_ID}/associations' \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "op": "add",
        /// "type": "user_group",
        /// "id": "{Group_ID}"
        /// }'
        /// ```
        /// </summary>
        /// <param name="applicationId">ObjectID of the Application.</param>
        /// <param name="body">GraphManagementReq</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SetApplicationAssociation(string applicationId, JumpCloud.SDK.V2.Models.IGraphManagementReq body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/applications/"
                        + global::System.Uri.EscapeDataString(applicationId)
                        + "/associations"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SetApplicationAssociation_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint allows you to manage the _direct_ associations of an Application. A direct association can be a non-homogeneous
        /// relationship between 2 different objects, for example Application and User Groups.
        /// #### Sample Request
        /// ```
        /// curl -X POST 'https://console.jumpcloud.com/api/v2/applications/{Application_ID}/associations' \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "op": "add",
        /// "type": "user_group",
        /// "id": "{Group_ID}"
        /// }'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="body">GraphManagementReq</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SetApplicationAssociationViaIdentity(global::System.String viaIdentity, JumpCloud.SDK.V2.Models.IGraphManagementReq body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/applications/(?<application_id>[^/]+)/associations$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/applications/{application_id}/associations'");
                }

                // replace URI parameters with values from identity
                var applicationId = _match.Groups["application_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/applications/"
                        + applicationId
                        + "/associations"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SetApplicationAssociation_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="SetApplicationAssociation" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SetApplicationAssociation_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.NoContent:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onNoContent(_response);
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="SetApplicationAssociation" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="applicationId">ObjectID of the Application.</param>
        /// <param name="body">GraphManagementReq</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SetApplicationAssociation_Validate(string applicationId, JumpCloud.SDK.V2.Models.IGraphManagementReq body, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(applicationId),applicationId);
                await eventListener.AssertNotNull(nameof(body), body);
                await eventListener.AssertObjectIsValid(nameof(body), body);
            }
        }

        /// <summary>
        /// This endpoint will allow you to manage the _direct_ associations of this Command.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example Commands and User
        /// Groups.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/commands/{Command_ID}/associations \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "op": "add",
        /// "type": "system_group",
        /// "id": "Group_ID"
        /// }'
        /// ```
        /// </summary>
        /// <param name="commandId">ObjectID of the Command.</param>
        /// <param name="body">GraphManagementReq</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SetCommandAssociation(string commandId, JumpCloud.SDK.V2.Models.IGraphManagementReq body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/commands/"
                        + global::System.Uri.EscapeDataString(commandId)
                        + "/associations"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SetCommandAssociation_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint will allow you to manage the _direct_ associations of this Command.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example Commands and User
        /// Groups.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/commands/{Command_ID}/associations \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "op": "add",
        /// "type": "system_group",
        /// "id": "Group_ID"
        /// }'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="body">GraphManagementReq</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SetCommandAssociationViaIdentity(global::System.String viaIdentity, JumpCloud.SDK.V2.Models.IGraphManagementReq body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/commands/(?<command_id>[^/]+)/associations$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/commands/{command_id}/associations'");
                }

                // replace URI parameters with values from identity
                var commandId = _match.Groups["command_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/commands/"
                        + commandId
                        + "/associations"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SetCommandAssociation_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="SetCommandAssociation" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SetCommandAssociation_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.NoContent:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onNoContent(_response);
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="SetCommandAssociation" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="commandId">ObjectID of the Command.</param>
        /// <param name="body">GraphManagementReq</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SetCommandAssociation_Validate(string commandId, JumpCloud.SDK.V2.Models.IGraphManagementReq body, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(commandId),commandId);
                await eventListener.AssertNotNull(nameof(body), body);
                await eventListener.AssertObjectIsValid(nameof(body), body);
            }
        }

        /// <summary>
        /// This endpoint returns the _direct_ associations of this G Suite instance.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example G Suite and Users.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/gsuites/{Gsuite_ID}/associations \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "op": "add",
        /// "type": "user_group",
        /// "id": "{Group_ID}"
        /// }'
        /// ```
        /// </summary>
        /// <param name="gsuiteId">ObjectID of the G Suite instance.</param>
        /// <param name="body">GraphManagementReq</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SetGSuiteAssociation(string gsuiteId, JumpCloud.SDK.V2.Models.IGraphManagementReq body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/gsuites/"
                        + global::System.Uri.EscapeDataString(gsuiteId)
                        + "/associations"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SetGSuiteAssociation_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint returns the _direct_ associations of this G Suite instance.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example G Suite and Users.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/gsuites/{Gsuite_ID}/associations \
        /// -H 'accept: application/json' \
        /// -H 'content-type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "op": "add",
        /// "type": "user_group",
        /// "id": "{Group_ID}"
        /// }'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="body">GraphManagementReq</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SetGSuiteAssociationViaIdentity(global::System.String viaIdentity, JumpCloud.SDK.V2.Models.IGraphManagementReq body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/gsuites/(?<gsuite_id>[^/]+)/associations$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/gsuites/{gsuite_id}/associations'");
                }

                // replace URI parameters with values from identity
                var gsuiteId = _match.Groups["gsuite_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/gsuites/"
                        + gsuiteId
                        + "/associations"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SetGSuiteAssociation_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="SetGSuiteAssociation" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SetGSuiteAssociation_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.NoContent:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onNoContent(_response);
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="SetGSuiteAssociation" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="gsuiteId">ObjectID of the G Suite instance.</param>
        /// <param name="body">GraphManagementReq</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SetGSuiteAssociation_Validate(string gsuiteId, JumpCloud.SDK.V2.Models.IGraphManagementReq body, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(gsuiteId),gsuiteId);
                await eventListener.AssertNotNull(nameof(body), body);
                await eventListener.AssertObjectIsValid(nameof(body), body);
            }
        }

        /// <summary>
        /// This endpoint allows you to manage the _direct_ associations of a LDAP Server.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example LDAP and Users.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/ldapservers/{LDAP_ID}/associations \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "op": "add",
        /// "type": "user",
        /// "id": "{User_ID}"
        /// }'
        /// ```
        /// </summary>
        /// <param name="ldapserverId">ObjectID of the LDAP Server.</param>
        /// <param name="body">GraphManagementReq</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SetLdapServerAssociation(string ldapserverId, JumpCloud.SDK.V2.Models.IGraphManagementReq body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/ldapservers/"
                        + global::System.Uri.EscapeDataString(ldapserverId)
                        + "/associations"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SetLdapServerAssociation_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint allows you to manage the _direct_ associations of a LDAP Server.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example LDAP and Users.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/ldapservers/{LDAP_ID}/associations \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "op": "add",
        /// "type": "user",
        /// "id": "{User_ID}"
        /// }'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="body">GraphManagementReq</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SetLdapServerAssociationViaIdentity(global::System.String viaIdentity, JumpCloud.SDK.V2.Models.IGraphManagementReq body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/ldapservers/(?<ldapserver_id>[^/]+)/associations$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/ldapservers/{ldapserver_id}/associations'");
                }

                // replace URI parameters with values from identity
                var ldapserverId = _match.Groups["ldapserver_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/ldapservers/"
                        + ldapserverId
                        + "/associations"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SetLdapServerAssociation_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="SetLdapServerAssociation" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SetLdapServerAssociation_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.NoContent:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onNoContent(_response);
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="SetLdapServerAssociation" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="ldapserverId">ObjectID of the LDAP Server.</param>
        /// <param name="body">GraphManagementReq</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SetLdapServerAssociation_Validate(string ldapserverId, JumpCloud.SDK.V2.Models.IGraphManagementReq body, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(ldapserverId),ldapserverId);
                await eventListener.AssertNotNull(nameof(body), body);
                await eventListener.AssertObjectIsValid(nameof(body), body);
            }
        }

        /// <summary>
        /// This endpoint allows you to manage the _direct_ associations of a Office 365 instance.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example Office 365 and Users.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/office365s/{O365_ID}/associations \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "op": "add",
        /// "type": "user_group",
        /// "id": "{Group_ID}"
        /// }'
        /// ```
        /// </summary>
        /// <param name="office365Id">ObjectID of the Office 365 instance.</param>
        /// <param name="body">GraphManagementReq</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SetOffice365Association(string office365Id, JumpCloud.SDK.V2.Models.IGraphManagementReq body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/office365s/"
                        + global::System.Uri.EscapeDataString(office365Id)
                        + "/associations"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SetOffice365Association_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint allows you to manage the _direct_ associations of a Office 365 instance.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example Office 365 and Users.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/office365s/{O365_ID}/associations \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "op": "add",
        /// "type": "user_group",
        /// "id": "{Group_ID}"
        /// }'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="body">GraphManagementReq</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SetOffice365AssociationViaIdentity(global::System.String viaIdentity, JumpCloud.SDK.V2.Models.IGraphManagementReq body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/office365s/(?<office365_id>[^/]+)/associations$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/office365s/{office365_id}/associations'");
                }

                // replace URI parameters with values from identity
                var office365Id = _match.Groups["office365_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/office365s/"
                        + office365Id
                        + "/associations"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SetOffice365Association_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="SetOffice365Association" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SetOffice365Association_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.NoContent:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onNoContent(_response);
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="SetOffice365Association" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="office365Id">ObjectID of the Office 365 instance.</param>
        /// <param name="body">GraphManagementReq</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SetOffice365Association_Validate(string office365Id, JumpCloud.SDK.V2.Models.IGraphManagementReq body, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(office365Id),office365Id);
                await eventListener.AssertNotNull(nameof(body), body);
                await eventListener.AssertObjectIsValid(nameof(body), body);
            }
        }

        /// <summary>
        /// This endpoint allows you to manage the _direct_ associations of a Policy.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example Policies and Systems.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/policies/{Policy_ID}/associations/ \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "op": "add",
        /// "type": "system_group",
        /// "id": "{Group_ID}"
        /// }'
        /// ```
        /// </summary>
        /// <param name="policyId"></param>
        /// <param name="body">GraphManagementReq</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SetPolicyAssociation(string policyId, JumpCloud.SDK.V2.Models.IGraphManagementReq body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/policies/"
                        + global::System.Uri.EscapeDataString(policyId)
                        + "/associations"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SetPolicyAssociation_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint allows you to manage the _direct_ associations of a Policy.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example Policies and Systems.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/policies/{Policy_ID}/associations/ \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "op": "add",
        /// "type": "system_group",
        /// "id": "{Group_ID}"
        /// }'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="body">GraphManagementReq</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SetPolicyAssociationViaIdentity(global::System.String viaIdentity, JumpCloud.SDK.V2.Models.IGraphManagementReq body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/policies/(?<policy_id>[^/]+)/associations$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/policies/{policy_id}/associations'");
                }

                // replace URI parameters with values from identity
                var policyId = _match.Groups["policy_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/policies/"
                        + policyId
                        + "/associations"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SetPolicyAssociation_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="SetPolicyAssociation" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SetPolicyAssociation_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.NoContent:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onNoContent(_response);
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="SetPolicyAssociation" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="policyId"></param>
        /// <param name="body">GraphManagementReq</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SetPolicyAssociation_Validate(string policyId, JumpCloud.SDK.V2.Models.IGraphManagementReq body, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(policyId),policyId);
                await eventListener.AssertNotNull(nameof(body), body);
                await eventListener.AssertObjectIsValid(nameof(body), body);
            }
        }

        /// <summary>
        /// This endpoint allows you to manage the _direct_ associations of a Radius Server.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example Radius Servers and
        /// Users.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/radiusservers/{RADIUS_ID}/associations \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        ///
        /// "type":"user",
        /// "id":"{USER_ID}",
        /// "op":"add"
        ///
        /// }'
        /// ```
        /// </summary>
        /// <param name="radiusserverId">ObjectID of the Radius Server.</param>
        /// <param name="body">GraphManagementReq</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SetRadiusServerAssociation(string radiusserverId, JumpCloud.SDK.V2.Models.IGraphManagementReq body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/radiusservers/"
                        + global::System.Uri.EscapeDataString(radiusserverId)
                        + "/associations"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SetRadiusServerAssociation_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint allows you to manage the _direct_ associations of a Radius Server.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example Radius Servers and
        /// Users.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/radiusservers/{RADIUS_ID}/associations \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        ///
        /// "type":"user",
        /// "id":"{USER_ID}",
        /// "op":"add"
        ///
        /// }'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="body">GraphManagementReq</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SetRadiusServerAssociationViaIdentity(global::System.String viaIdentity, JumpCloud.SDK.V2.Models.IGraphManagementReq body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/radiusservers/(?<radiusserver_id>[^/]+)/associations$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/radiusservers/{radiusserver_id}/associations'");
                }

                // replace URI parameters with values from identity
                var radiusserverId = _match.Groups["radiusserver_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/radiusservers/"
                        + radiusserverId
                        + "/associations"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SetRadiusServerAssociation_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="SetRadiusServerAssociation" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SetRadiusServerAssociation_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.NoContent:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onNoContent(_response);
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="SetRadiusServerAssociation" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="radiusserverId">ObjectID of the Radius Server.</param>
        /// <param name="body">GraphManagementReq</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SetRadiusServerAssociation_Validate(string radiusserverId, JumpCloud.SDK.V2.Models.IGraphManagementReq body, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(radiusserverId),radiusserverId);
                await eventListener.AssertNotNull(nameof(body), body);
                await eventListener.AssertObjectIsValid(nameof(body), body);
            }
        }

        /// <summary>
        /// This endpoint allows you to manage the _direct_ associations of a System.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example Systems and Users.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/systems/{System_ID}/associations \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "attributes": {
        /// "sudo": {
        /// "enabled": true,
        /// "withoutPassword": false
        /// }
        /// },
        /// "op": "add",
        /// "type": "user",
        /// "id": "UserID"
        /// }'
        /// ```
        /// </summary>
        /// <param name="systemId">ObjectID of the System.</param>
        /// <param name="date">Current date header for the System Context API</param>
        /// <param name="authorization">Authorization header for the System Context API</param>
        /// <param name="body">SystemGraphManagementReq</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SetSystemAssociation(string systemId, string date, string authorization, JumpCloud.SDK.V2.Models.ISystemGraphManagementReq body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systems/"
                        + global::System.Uri.EscapeDataString(systemId)
                        + "/associations"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // add headers parameters
                if (null != date)
                {
                    request.Headers.Add("Date",date);
                }
                if (null != authorization)
                {
                    request.Headers.Add("Authorization",authorization);
                }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SetSystemAssociation_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint allows you to manage the _direct_ associations of a System.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example Systems and Users.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/systems/{System_ID}/associations \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "attributes": {
        /// "sudo": {
        /// "enabled": true,
        /// "withoutPassword": false
        /// }
        /// },
        /// "op": "add",
        /// "type": "user",
        /// "id": "UserID"
        /// }'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="date">Current date header for the System Context API</param>
        /// <param name="authorization">Authorization header for the System Context API</param>
        /// <param name="body">SystemGraphManagementReq</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SetSystemAssociationViaIdentity(global::System.String viaIdentity, string date, string authorization, JumpCloud.SDK.V2.Models.ISystemGraphManagementReq body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systems/(?<system_id>[^/]+)/associations$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systems/{system_id}/associations'");
                }

                // replace URI parameters with values from identity
                var systemId = _match.Groups["system_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systems/"
                        + systemId
                        + "/associations"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // add headers parameters
                if (null != date)
                {
                    request.Headers.Add("Date",date);
                }
                if (null != authorization)
                {
                    request.Headers.Add("Authorization",authorization);
                }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SetSystemAssociation_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="SetSystemAssociation" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SetSystemAssociation_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.NoContent:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onNoContent(_response);
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="SetSystemAssociation" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="systemId">ObjectID of the System.</param>
        /// <param name="date">Current date header for the System Context API</param>
        /// <param name="authorization">Authorization header for the System Context API</param>
        /// <param name="body">SystemGraphManagementReq</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SetSystemAssociation_Validate(string systemId, string date, string authorization, JumpCloud.SDK.V2.Models.ISystemGraphManagementReq body, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(systemId),systemId);
                await eventListener.AssertNotNull(nameof(date),date);
                await eventListener.AssertNotNull(nameof(authorization),authorization);
                await eventListener.AssertNotNull(nameof(body), body);
                await eventListener.AssertObjectIsValid(nameof(body), body);
            }
        }

        /// <summary>
        /// This endpoint allows you to manage the _direct_ associations of a System Group.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example System Groups and
        /// Users.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/systemgroups/{GroupID}/associations \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "op": "add",
        /// "type": "user",
        /// "id": "{UserID}"
        /// }'
        /// ```
        /// </summary>
        /// <param name="groupId">ObjectID of the System Group.</param>
        /// <param name="body">SystemGroupGraphManagementReq</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SetSystemGroupAssociation(string groupId, JumpCloud.SDK.V2.Models.ISystemGroupGraphManagementReq body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systemgroups/"
                        + global::System.Uri.EscapeDataString(groupId)
                        + "/associations"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SetSystemGroupAssociation_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint allows you to manage the _direct_ associations of a System Group.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example System Groups and
        /// Users.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/systemgroups/{GroupID}/associations \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "op": "add",
        /// "type": "user",
        /// "id": "{UserID}"
        /// }'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="body">SystemGroupGraphManagementReq</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SetSystemGroupAssociationViaIdentity(global::System.String viaIdentity, JumpCloud.SDK.V2.Models.ISystemGroupGraphManagementReq body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systemgroups/(?<group_id>[^/]+)/associations$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systemgroups/{group_id}/associations'");
                }

                // replace URI parameters with values from identity
                var groupId = _match.Groups["group_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systemgroups/"
                        + groupId
                        + "/associations"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SetSystemGroupAssociation_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="SetSystemGroupAssociation" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SetSystemGroupAssociation_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.NoContent:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onNoContent(_response);
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="SetSystemGroupAssociation" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="groupId">ObjectID of the System Group.</param>
        /// <param name="body">SystemGroupGraphManagementReq</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SetSystemGroupAssociation_Validate(string groupId, JumpCloud.SDK.V2.Models.ISystemGroupGraphManagementReq body, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(groupId),groupId);
                await eventListener.AssertNotNull(nameof(body), body);
                await eventListener.AssertObjectIsValid(nameof(body), body);
            }
        }

        /// <summary>
        /// This endpoint allows you to manage the system members of a System Group.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/systemgroups/{Group_ID}/members \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "op": "add",
        /// "type": "system",
        /// "id": "{System_ID}"
        /// }'
        /// ```
        /// </summary>
        /// <param name="groupId">ObjectID of the System Group.</param>
        /// <param name="date">Current date header for the System Context API</param>
        /// <param name="authorization">Authorization header for the System Context API</param>
        /// <param name="body">SystemGroupMembersReq</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SetSystemGroupMembers(string groupId, string date, string authorization, JumpCloud.SDK.V2.Models.ISystemGroupMembersReq body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systemgroups/"
                        + global::System.Uri.EscapeDataString(groupId)
                        + "/members"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // add headers parameters
                if (null != date)
                {
                    request.Headers.Add("Date",date);
                }
                if (null != authorization)
                {
                    request.Headers.Add("Authorization",authorization);
                }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SetSystemGroupMembers_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint allows you to manage the system members of a System Group.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/systemgroups/{Group_ID}/members \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "op": "add",
        /// "type": "system",
        /// "id": "{System_ID}"
        /// }'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="date">Current date header for the System Context API</param>
        /// <param name="authorization">Authorization header for the System Context API</param>
        /// <param name="body">SystemGroupMembersReq</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SetSystemGroupMembersViaIdentity(global::System.String viaIdentity, string date, string authorization, JumpCloud.SDK.V2.Models.ISystemGroupMembersReq body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/systemgroups/(?<group_id>[^/]+)/members$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/systemgroups/{group_id}/members'");
                }

                // replace URI parameters with values from identity
                var groupId = _match.Groups["group_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/systemgroups/"
                        + groupId
                        + "/members"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // add headers parameters
                if (null != date)
                {
                    request.Headers.Add("Date",date);
                }
                if (null != authorization)
                {
                    request.Headers.Add("Authorization",authorization);
                }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SetSystemGroupMembers_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="SetSystemGroupMembers" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SetSystemGroupMembers_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.NoContent:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onNoContent(_response);
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="SetSystemGroupMembers" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="groupId">ObjectID of the System Group.</param>
        /// <param name="date">Current date header for the System Context API</param>
        /// <param name="authorization">Authorization header for the System Context API</param>
        /// <param name="body">SystemGroupMembersReq</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SetSystemGroupMembers_Validate(string groupId, string date, string authorization, JumpCloud.SDK.V2.Models.ISystemGroupMembersReq body, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(groupId),groupId);
                await eventListener.AssertNotNull(nameof(date),date);
                await eventListener.AssertNotNull(nameof(authorization),authorization);
                await eventListener.AssertNotNull(nameof(body), body);
                await eventListener.AssertObjectIsValid(nameof(body), body);
            }
        }

        /// <summary>
        /// This endpoint allows you to manage the _direct_ associations of a User.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example Users and Systems.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/users/{UserID}/associations \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "attributes": {
        /// "sudo": {
        /// "enabled": true,
        /// "withoutPassword": false
        /// }
        /// },
        /// "op": "add",
        /// "type": "system_group",
        /// "id": "{GroupID}"
        /// }'
        /// </summary>
        /// <param name="userId">ObjectID of the User.</param>
        /// <param name="body">UserGraphManagementReq</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SetUserAssociation(string userId, JumpCloud.SDK.V2.Models.IUserGraphManagementReq body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/users/"
                        + global::System.Uri.EscapeDataString(userId)
                        + "/associations"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SetUserAssociation_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint allows you to manage the _direct_ associations of a User.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example Users and Systems.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/users/{UserID}/associations \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "attributes": {
        /// "sudo": {
        /// "enabled": true,
        /// "withoutPassword": false
        /// }
        /// },
        /// "op": "add",
        /// "type": "system_group",
        /// "id": "{GroupID}"
        /// }'
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="body">UserGraphManagementReq</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SetUserAssociationViaIdentity(global::System.String viaIdentity, JumpCloud.SDK.V2.Models.IUserGraphManagementReq body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/users/(?<user_id>[^/]+)/associations$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/users/{user_id}/associations'");
                }

                // replace URI parameters with values from identity
                var userId = _match.Groups["user_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/users/"
                        + userId
                        + "/associations"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SetUserAssociation_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="SetUserAssociation" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SetUserAssociation_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.NoContent:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onNoContent(_response);
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="SetUserAssociation" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="userId">ObjectID of the User.</param>
        /// <param name="body">UserGraphManagementReq</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SetUserAssociation_Validate(string userId, JumpCloud.SDK.V2.Models.IUserGraphManagementReq body, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(userId),userId);
                await eventListener.AssertNotNull(nameof(body), body);
                await eventListener.AssertObjectIsValid(nameof(body), body);
            }
        }

        /// <summary>
        /// This endpoint manages the _direct_ associations of this User Group.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example User Groups and Users.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/usergroups/{GroupID}/associations \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "op": "add",
        /// "type": "system",
        /// "id": "{SystemID}"
        /// }'
        /// ```
        /// </summary>
        /// <param name="groupId">ObjectID of the User Group.</param>
        /// <param name="body">UserGroupGraphManagementReq</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SetUserGroupAssociation(string groupId, JumpCloud.SDK.V2.Models.IUserGroupGraphManagementReq body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/usergroups/"
                        + global::System.Uri.EscapeDataString(groupId)
                        + "/associations"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SetUserGroupAssociation_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint manages the _direct_ associations of this User Group.
        /// A direct association can be a non-homogeneous relationship between 2 different objects, for example User Groups and Users.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/usergroups/{GroupID}/associations \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "op": "add",
        /// "type": "system",
        /// "id": "{SystemID}"
        /// }'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="body">UserGroupGraphManagementReq</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SetUserGroupAssociationViaIdentity(global::System.String viaIdentity, JumpCloud.SDK.V2.Models.IUserGroupGraphManagementReq body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/usergroups/(?<group_id>[^/]+)/associations$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/usergroups/{group_id}/associations'");
                }

                // replace URI parameters with values from identity
                var groupId = _match.Groups["group_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/usergroups/"
                        + groupId
                        + "/associations"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SetUserGroupAssociation_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="SetUserGroupAssociation" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SetUserGroupAssociation_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.NoContent:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onNoContent(_response);
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="SetUserGroupAssociation" /> method. Call this like the actual call, but you will get
        /// validation events back.
        /// </summary>
        /// <param name="groupId">ObjectID of the User Group.</param>
        /// <param name="body">UserGroupGraphManagementReq</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SetUserGroupAssociation_Validate(string groupId, JumpCloud.SDK.V2.Models.IUserGroupGraphManagementReq body, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(groupId),groupId);
                await eventListener.AssertNotNull(nameof(body), body);
                await eventListener.AssertObjectIsValid(nameof(body), body);
            }
        }

        /// <summary>
        /// This endpoint allows you to manage the user members of a User Group.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/usergroups/{GroupID}/members \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "op": "add",
        /// "type": "user",
        /// "id": "{User_ID}"
        /// }'
        /// ```
        /// </summary>
        /// <param name="groupId">ObjectID of the User Group.</param>
        /// <param name="body">UserGroupMembersReq</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SetUserGroupMembers(string groupId, JumpCloud.SDK.V2.Models.IUserGroupMembersReq body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/usergroups/"
                        + global::System.Uri.EscapeDataString(groupId)
                        + "/members"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SetUserGroupMembers_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>
        /// This endpoint allows you to manage the user members of a User Group.
        /// #### Sample Request
        /// ```
        /// curl -X POST https://console.jumpcloud.com/api/v2/usergroups/{GroupID}/members \
        /// -H 'Accept: application/json' \
        /// -H 'Content-Type: application/json' \
        /// -H 'x-api-key: {API_KEY}' \
        /// -d '{
        /// "op": "add",
        /// "type": "user",
        /// "id": "{User_ID}"
        /// }'
        /// ```
        /// </summary>
        /// <param name="viaIdentity"></param>
        /// <param name="body">UserGroupMembersReq</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task SetUserGroupMembersViaIdentity(global::System.String viaIdentity, JumpCloud.SDK.V2.Models.IUserGroupMembersReq body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/usergroups/(?<group_id>[^/]+)/members$").Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/usergroups/{group_id}/members'");
                }

                // replace URI parameters with values from identity
                var groupId = _match.Groups["group_id"].Value;
                // construct URL
                var _url = new global::System.Uri(global::System.Text.RegularExpressions.Regex.Replace(
                        "https://console.jumpcloud.com/api/v2/usergroups/"
                        + groupId
                        + "/members"

                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2"));

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.URLCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var request =  new global::System.Net.Http.HttpRequestMessage(JumpCloud.SDK.V2.Runtime.Method.Post, _url);
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.RequestCreated, _url); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.HeaderParametersAdded, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BodyContentSet, _url); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.SetUserGroupMembers_Call(request,onNoContent,eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref="SetUserGroupMembers" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onNoContent">a delegate that is called when the remote service returns 204 (NoContent).</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an JumpCloud.SDK.V2.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SetUserGroupMembers_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task> onNoContent, JumpCloud.SDK.V2.Runtime.IEventListener eventListener, JumpCloud.SDK.V2.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sender.SendAsync(request, eventListener);
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.NoContent:
                        {
                            await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onNoContent(_response);
                            break;
                        }
                        default:
                        {
                            throw new JumpCloud.SDK.V2.Runtime.UndeclaredResponseException(_response);
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(JumpCloud.SDK.V2.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="SetUserGroupMembers" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="groupId">ObjectID of the User Group.</param>
        /// <param name="body">UserGroupMembersReq</param>
        /// <param name="eventListener">an <see cref="JumpCloud.SDK.V2.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task SetUserGroupMembers_Validate(string groupId, JumpCloud.SDK.V2.Models.IUserGroupMembersReq body, JumpCloud.SDK.V2.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(groupId),groupId);
                await eventListener.AssertNotNull(nameof(body), body);
                await eventListener.AssertObjectIsValid(nameof(body), body);
            }
        }
    }
}